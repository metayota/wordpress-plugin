{"editor":{"id":164,"parameters":[],"implementation":{"html":"<div>\n    <router name=\"router\" base=\"\">\n        <routes array=\"\">\n            <route url=\"\/editor\/\" page=\"editor.welcome\"><\/route>\n            <route url=\"\/editor\/view\/[page]\/[subpage]\"><\/route>\n\t\t\t<route url=\"\/editor\/view\/[page]\"><\/route>\n            <route url=\"\/editor\/resource\/[resource]\/[tab]\"><\/route>\n            <route url=\"\/page\/[resource]\/[tab]\" resource=\"website.view\"><\/route>\n            <route url=\"\/page\/[resource]\" resource=\"website.view\"><\/route>\n            <route url=\"\/submit\/[resource]\" page=\"rc.submit.work\"><\/route>\n            <route url=\"\/tasks\/\" resource=\"website.tasks\"><\/route>\n            <route url=\"\/documentation\" page=\"documentation-metayota-editor\"><\/route>\n            <route url=\"\/tasks\/[taskid]\" page=\"website.task.detail\"><\/route>\n\t\t\t<route url=\"\/change\/[resource]\" page=\"rc.change\"><\/route>\n\n            <!-- please use this pattern, since it is the standard way, even if the router has more code, everything gets easier and better URLs -->\n            <route url=\"\/editor\/compare-to-repository\/[repository]\/[resourcename]\" title=\"Form Button Test\">\n                <content tag=\"rc.change\"><\/content>\n            <\/route>\n            <route url=\"\/editor\/mail-manager\/[server]\" title=\"E-Mail Management\">\n                <content tag=\"mail-manager\"><\/content>\n            <\/route>\n            <route url=\"\/editor\/translator\" title=\"Translator\">\n                <content tag=\"translator\"><\/content>\n            <\/route>\n        <\/routes>\n    <\/router>\n\t<input element=\"is_wordpress\" value=\"yes\" type=\"hidden\"\/>\n    <when test=\"{router$.attributes != undefined ? router$.attributes.resource : null}\" then=\"this.resourceSelected( value )\"><\/when>\n    <when test=\"{router$.attributes != undefined ? router$.attributes.tab : null}\" then=\"this.tabChanged( value )\"><\/when>\n\t<when test=\"{router$.attributes != undefined ? router$.attributes.page : null}\" then=\"this.showTag( value )\"><\/when>\n    <when test=\"{router$ && router$.active && router$.active.content}\" then=\"this.showStandardRoute()\"><\/when>\n\n\t<div id=\"rc-editor\" class=\"j-editor {this.compact then 'compact'} {this.hidden then 'hidden'} tab-{this.tab}\" (keydown)=\"this.onKeypress(event)\" tabindex=\"0\">\n\t\t<div class=\"editor-controls\">\n            \n\t\t\t<dropdown sort=\"{false}\" translate_options=\"{true}\" default=\"{false}\" element=\"rcDropdown\" class=\"rc-dropdown editor-control\" (change)=\"this.action(element.value,element)\" stdtext=\"{this.getRCMenuName()}\" options=\"{this.getRcMenuActions()}\"><\/dropdown>\n\t\t\t<div if=\"true\">\n                <dropdown translate_options=\"{true}\" default=\"{false}\" element=\"menuDropdown\" class=\"menu-dropdown editor-control\" (change)=\"this.action(element.value,element)\" stdtext=\"...\" options=\"{this.actions}\"><\/dropdown>\n\t\t\t<\/div>\n\t\t\t<dropdown translate_options=\"{true}\" default=\"{false}\" element=\"tabDropdown\" (change)=\"this.gotoTab(element.value)\" options=\"{this.tabs}\" value=\"{this.tab}\" class=\"tab-dropdown dropdown editor-control\"><\/dropdown>\n            <button class=\"button icon-button editor-control { (router$.active && router$.active.content && router$.active.content.tag == 'website.view') || this.tab == 'view'  || this.tab == 'showtag'  ? '' : 'hidden' }\" (click)=\"this.lastTab()\"><span>X<\/span><img class=\"back-button\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/back.svg\"\/><\/button>\n            <button class=\"button icon-button see-button editor-control \" (click)=\"this.switchAndReloadView()\"><span>X<\/span><img src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/eye_white.svg\"\/><\/button>\n\t\t\t<form.livesearch stdtext=\"!{this.currentServer && this.currentServer.id ? '(No server selected)' : null}\" defaultfilter=\"{{name:'project_id',value:this.selectedProject}}\" element=\"tagDropdown\" (change)=\"this.gotoResource(element.value)\" valueattribute=\"name\" options=\"{this.allResources}\" projectresources=\"{this.projectResources ? this.projectResources : []}\" value=\"{this.selectedTag}\" class=\"tag-dropdown editor-control {this.loading ? 'search-loading' : '' }\"><\/form.livesearch>\n\t\t\t<button class=\"button icon-button editor-control control-save { !this.unsaved then 'disabled' } { this.tab == 'view' ? 'hidden' : '' }\" (click)=\"(this.unsaved then this.save())\"><span>X<\/span><img src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/document_white.svg\"\/><\/button>\n            <button class=\"button icon-button control-settings editor-control\" (click)=\"this.toggleSettings()\"><span>X<\/span><img src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/settings.svg\"\/><\/button>\n\t\t\t<div style=\"{this.settingsVisible ? '' :'display:none'}\">\n            \t<settings server=\"{this.currentServer}\" (webservice)=\"this.gotoTab('webservice')\" (view)=\"this.showViewWithParameters(event)\" resource=\"{this.selectedTagObj}\"><\/settings>\n\t\t\t<\/div>\n\t\t<\/div>\n\n        <div id=\"j-editor-content\">\n            <div if=\"router$.active and router$.active.include and !this.disableview and !this.reloading\" class=\"tab includepage visible\">\n                <!--include tag=\"{router$.attributes.resource}\" attributes=\"{router$.attributes}\"><\/include-->\n            <\/div>\n\n            <div class=\"tab implementation code-editor { !(router$.active && router$.active.include) && this.tab == 'vscode' then 'visible'}\">\n                <tabs (change)=\"this.implementationTabChanged(event)\" tabs=\"{this.implementationTabs}\" active=\"{this.activeImplementationTab}\"><\/tabs>\n                <dropdown default=\"{false}\" element=\"implTabDropdown\" options=\"{this.implTabs}\" displaytext=\"...\" class=\"implementation-tabs-dropdown dropdown editor-control\"><\/dropdown>\n                <vs.codeeditor tab=\"{this.activeImplementationTab}\" resource=\"{this.selectedTagObj then this.selectedTagObj.name}\" (change)=\"this.resourceChanged()\" element=\"msedit\" value=\"{this.activeImplementation}\" language=\"{this.getSuffix( this.activeImplementationTab )}\"><\/vs.codeeditor>\n            <\/div>\n\n            <div if=\"!(router$.active && router$.active.include)\">\n\n                <div class=\"tab visible\" if=\"this.tab == 'designer'\">\n                    <designer tags=\"{this.projectResourceOptions}\" element=\"designer\" (change)=\"this.designUpdated(event.design,event.html); this.update('this.getPreviewTag')\" tag=\"{this.selectedTagObj}\" value=\"{ this.getDesign() }\"><\/designer>\t\t\t\n                <\/div>\n                \n                <div class=\"tab {this.tab == 'documentation' then 'visible'}\">\n                    <form.textarea (change)=\"this.documentationUpdated(element.value)\" element=\"elDocumentation\" label=\"Documentation\" value=\"{this.selectedTagObj then this.selectedTagObj.documentation}\"><\/form.textarea>\n                <\/div>\n                \n                <div class=\"tab tab-content visible\" if=\"this.tab == 'overview'\">\n                    <overview tags=\"{this.tags}\" tag=\"{this.selectedTagObj}\" element=\"overview\"><\/overview>\n                <\/div>\n\n                <search element=\"searchDialog\"><\/search>\n                \n                <div class=\"tab tab-content tab-todo visible\" if=\"this.tab == 'todo' && this.selectedTagObj != null\">\n                    <todo addform=\"{true}\" element=\"todo\" resourcename=\"{this.selectedTagObj.name}\"><\/todo>\n                <\/div>\n                \n                <div class=\"tab tab-content visible\" if=\"this.tab == 'config'\">\n                    <resource.configuration resourcename=\"{this.selectedTagObj then this.selectedTagObj.name}\" element=\"config\"><\/resource.configuration>\n                <\/div>\n                \n                <div class=\"tab tab-content visible\" if=\"this.tab == 'development'\">\n                    <rc.editor.tasks resource=\"{this.selectedTagObj}\" element=\"development\" (change)=\"this.testsChanged(event)\"><\/rc.editor.tasks>\n                <\/div>\n                \n                <div class=\"tab tab-content visible\" if=\"this.tab == 'ratings' \">\n                    <ratings resourcename=\"{this.selectedTagObj then this.selectedTagObj.name}\"><\/ratings>\n                <\/div>\n\n                <div class=\"tab tab-access tab-content visible\" if=\"this.tab == 'access' \">\n                    <rc.accesscontrol resource=\"{this.selectedTagObj}\"><\/rc.accesscontrol>\n                <\/div>\n\n                <div class=\"tab tab-change tab-content visible\" if=\"this.tab == 'changes'\">\n                    <rc.change resourcename=\"{this.selectedTagObj then this.selectedTagObj.name}\"><\/rc.change>\n                <\/div>\n\n                <div class=\"tab tab-defaults tab-content visible\" if=\"this.tab == 'defaults'\">\n                    <editor.defaults resourcename=\"{this.selectedTagObj then this.selectedTagObj.name}\"><\/editor.defaults>\n                <\/div>\n                \n                <div class=\"tab tab-content {this.tab == 'parameters' then 'visible'}\">\n                    <editor.parameters (change)=\"this.paramsChanged(event)\" tag=\"{this.selectedTagObj}\"><\/editor.parameters>\n                <\/div>\n                \n                <div class=\"tab tab-content dependencies visible\" if=\"this.tab == 'dependencies'\">\n                    <editor.dependencies (change)=\"this.resourceUpdated(event,'dependencies')\" dependencies=\"{this.dependencies then this.dependencies}\" tags=\"{this.allResources}\"><\/editor.dependencies>\n                <\/div> \n\n                <div if=\"!this.reloading and this.tab == 'debug'\" class=\"preview-tab tab tab-content {this.tab == 'debug' ? 'visible' : 'hidden'}\" >\n                    <play element=\"play\" fullscreen=\"{this.tab == 'view'}\" resource=\"{this.selectedTagObj}\" moreinfo=\"{true}\" parameters=\"{this.parameters}\"><\/play>\n                <\/div>\n\n                <div if=\"!this.reloading and this.tab == 'view'\"  class=\"preview-tab tab tab-content {this.tab == 'view' ? 'visible' : 'hidden'}\" >\n                    <div class=\"preview-db-table\" if=\"this.selectedTagObj && this.selectedTagObj.type == 'dbtable'\">\n                        \n                        <database.table.editor table=\"{this.selectedTagObj.name}\" resourcetype=\"{this.selectedTagObj.name}\" title=\"{this.selectedTagObj.title_translated}\"><\/database.table.editor>\n                    <\/div>\n                    <div class=\"preview-db-table\" if=\"this.selectedTagObj && this.selectedTagObj.type == 'webservice'\">\n                        <!--settings server=\"{this.currentServer}\" (webservice)=\"this.gotoTab('webservice')\" (view)=\"this.showViewWithParameters(event)\" resource=\"{this.selectedTagObj}\"><\/settings-->\n                        <h1>{this.selectedTagObj then this.selectedTagObj.title}<\/h1>\n                        <p if=\"this.selectedTagObj && this.selectedTagObj.description\">\n                            {this.selectedTagObj.description}\n                        <\/p>\n                                               <form.resource target=\"webservice\" method=\"POST\" action=\"\/wp-content\/plugins\/metayota\/scripts\/{this.selectedTagObj.name}\/{this.selectedTagObj.name}.php\" subtitle=\"{this.selectedTagObj then this.selectedTagObj.documentation}\" submitlabel=\"Enviar\" (submit)=\"element.form.submit();this.gotoTab('webservice');\" resourcetype=\"server:{this.selectedTagObj then this.selectedTagObj.name}\"><\/form.resource>\n                    <\/div>\n                                          <iframe if=\"this.selectedTagObj && (this.selectedTagObj.type != 'dbtable' && this.selectedTagObj.type != 'webservice')\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/index\/index.php?tag={this.selectedResource}&params={encodeURIComponent(JSON.stringify(this.selectedResourceParameters)) + '&language=es'}\"><\/iframe>\n                <\/div>\n\n                <div if=\"!this.reloading\"  class=\"preview-tab tab tab-content {this.tab == 'webservice' ? 'visible' : 'hidden'}\" >\n                    <iframe name=\"webservice\"><\/iframe>\n                <\/div>\n\n                <div class=\"tab tab-content visible\" if=\"this.tab == 'showtag' && !(router$ && router$.active && router$.active.content)\">\n                    <include tag=\"{this.tagToShow}\" attributes=\"{this.selectedResourceParameters}\"><\/include>\n                <\/div>\n\n                \n                <div class=\"tab tab-content visible\" if=\"this.tab == 'standard-route'\">\n                    <include tag=\"{router$ && router$.active && router$.active.content ? router$.active.content.tag : null}\" attributes=\"{router$.active then router$.params}\"><\/include>\n                <\/div>\n            <\/div>\n\n        <\/div>\n\t<\/div>\n<rc.spider><\/rc.spider>\n<editor.css><\/editor.css>\n<\/div>\n<toast element=\"toaster\"><\/toast>","javascript":"class JEditor extends Tag {\n\n    setup() {\n        this.tab = 'overview'\n    }\n    init() {\n        this.isWP = resource.getData().wordpress\n        this.history = {}\n        this.tab_history = {}\n        this.disableSnapback()\n        this.publish('editor$', this)\n        this.selectedProject = localStorage.selectedProject\n        if (this.isWP) {\n            this.selectedProject = 1\n            localStorage.selectedProject = 1\n        }\n        this.previousTab = this.tab\n        this.hidden = localStorage.editorHidden == 'true'\n        this.fullscreen = true\n        this.initImplementationDropdown()\n        this.updateCurrentTask()\n        this.updateTabs()\n        this.tab = 'overview'\n        if (localStorage.helpmode == 'on') {\n            Tag.publish('helpMode$', true)\n        }\n        if (this.isWP) {\n            this.actions = [\n                { value: 'add_resource', name: 'editor_menu_add_resource' },\n                { value: 'delete_resource', name: 'editor_menu_delete_resource' },\n                { value: 'search', name: 'editor_menu_search' },\n                { value: 'translator', name: 'editor_menu_translator' },\n                { value: 'admin_menu', name: 'wp_admin_menus' },\n                \n            ];\n        } else {\n            this.actions = [\n                { value: 'errors', name: 'editor_menu_errors' },\n                { value: 'add_resource', name: 'editor_menu_add_resource' },\n                { value: 'delete_resource', name: 'editor_menu_delete_resource' },\n                { value: 'create_project', name: 'editor_menu_create_project' },\n                { value: 'open_project', name: 'editor_menu_open_project' },\n                { value: 'todos', name: 'editor_menu_todos' },\n                { value: 'search', name: 'editor_menu_search' },\n                { value: 'submit_work', name: 'editor_menu_submit_work' },\n                { value: 'update', name: 'editor_menu_update' },\n                { value: 'translator', name: 'editor_menu_translator' }\n            ];\n        }\n\n\n        this.options = [];\n        this.updateResources();\n\n        window.onbeforeunload = function () {\n            if (!this.unsaved) {\n                return null\n            }\n            return translate('confirm_exit_message');\n        }.bind(this);\n\n        document.onkeypress = function (e) {\n            this.onKeypress(e)\n        }.bind(this)\n\n        window.onresize = function (e) {\n            this.doLayout(this.tag)\n        }.bind(this)\n\n        this.updateCurrentServer();\n        this.showTag('editor.welcome');\n        \/\/  this.resourceSelected(this.selectedTag)\n\n        this.chat()\n    }\n\n    showStandardRoute() {\n        this.setAttribute('tab', 'standard-route')\n    }\n\n\n    chat() {\n\n    }\n\n    formatSource() {\n        let val = this.msedit.editor.getValue()\n        let suffix = this.getSuffix(this.activeImplementationTab)\n        if (suffix == 'javascript') {\n            GlobalResource.call('rc.formatter', { js: val }).then(result => {\n                if (result.js) {\n                    this.activeImplementation = result.js\n                    this.update('this.activeImplementation')\n                }\n            })\n        }\n        if (suffix == 'css') {\n            GlobalResource.action('rc.formatter', 'format_css', { css: val }).then(result => {\n                if (result.css) {\n                    this.activeImplementation = result.css\n                    this.update('this.activeImplementation')\n                }\n            })\n        }\n        if (suffix == 'php') {\n            GlobalResource.action('rc.formatter', 'format_php', { php: val }).then(result => {\n                if (result.php) {\n                    this.activeImplementation = result.php\n                    this.update('this.activeImplementation')\n                }\n            })\n        }\n        \/\/value=\"{this.activeImplementation}\" language=\"{}\">\n        \/\/\n    }\n\n    getRCMenuName() {\n        if (this.currentTask) {\n            return 'Task #' + this.currentTask.id\n        }\n        if (this.currentServer && this.currentServer.title) {\n            let username = loggedInUser$.username\n            if (this.currentServer.servername) {\n                \/\/          return username + '@' + this.currentServer.servername\n            }\n            return this.currentServer.title\n        }\n        return 'Metayota'\n    }\n\n    updateCurrentServer() {\n        return resource.action('current_server').then(server => {\n            this.currentServer = server\n            this.update('this.currentServer')\n            this.update('this.getRcMenuActions')\n            this.update('this.getRCMenuName')\n            this.updateResources()\n        })\n    }\n\n    getSuffix(filename) {\n        if (filename == 'html.php') {\n            return 'html'\n        }\n        if (!filename) {\n            return ''\n        }\n        if (filename.includes('.')) {\n            return filename.split('.').pop()\n        } else {\n            return filename\n        }\n    }\n\n    updateCurrentTask() {\n        resource.action('current_task').then(task => {\n            if (task && task.id) {\n                this.currentTask = task\n            } else {\n                this.currentTask = undefined\n            }\n            notify('editor$.currentTask')\n            this.update('this.getRcMenuActions')\n            this.updateTabs()\n            this.update('this.getRCMenuName')\n        })\n    }\n\n    toggleSettings() {\n        this.setAttribute('settingsVisible', !this.settingsVisible)\n    }\n\n    enterFullscreen(element) {\n        if (element.requestFullscreen) {\n            element.requestFullscreen()\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen()\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen()\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen()\n        }\n    }\n    initImplementationDropdown() {\n        this.implTabs = [\n            {\n                name: translate('create_file'), fn: function () {\n                    Resource.cls('dialog').createDialog('rc.editor.tab.create', { label: 'create_tab_label', submitlabel: \"create_tab_submit_label\" }).then(project => {\n                        if (project.technology || project.custom) {\n\n                            let resourceName = project.custom != '' && project.custom != null ? project.custom : project.technology\n                            this.activeImplementationTab = resourceName\n                            this.activeImplementation = ''\n                            if (!this.implementation) {\n                                this.implementation = {}\n                            }\n                            this.implementation[resourceName] = '';\n                            this.implementationTabs.push({ name: resourceName })\n\n                            this.update('this.implementationTabs')\n                            this.update('this.activeImplementationTab')\n                            this.update('this.activeImplementation')\n                            this.resourceChanged();\n                        }\n                    })\n                }.bind(this)\n            },\n            {\n                name: translate('delete_file'), fn: function () {\n                    if (confirm(translate('confirm_delete_file'))) {\n                        delete this.implementation[this.activeImplementationTab]\n                        let idx = this.implementationTabs.findIndex(tab => { return tab.name == this.activeImplementationTab })\n                        this.implementationTabs.splice(idx, 1)\n                        this.activeImplementationTab = null\n                        this.activeImplementation = ''\n                        this.update('this.implementationTabs');\n                        this.update('this.activeImplementationTab');\n                        this.update('this.implementation');\n                        this.update('this.activeImplementation')\n                        this.resourceChanged();\n\n                        if (this.implementationTabs.length > 0) {\n                            let tabName = this.implementationTabs[0].name\n                            this.implementationTabChanged(tabName)\n                        }\n                    }\n                }.bind(this)\n            },\n            {\n                name: translate('rename_file'), fn: function () {\n                    let oldResourceName = this.activeImplementationTab\n                    let newResourceName = prompt('Enter new name for tab', oldResourceName)\n                    if (newResourceName && (newResourceName != oldResourceName)) {\n                        this.implementation[newResourceName] = this.implementation[oldResourceName]\n                        delete this.implementation[oldResourceName]\n                        let idx = this.implementationTabs.findIndex(tab => { return tab.name == oldResourceName })\n                        this.implementationTabs.splice(idx, 1)\n                        this.implementationTabs.push({ name: newResourceName })\n\n                        this.activeImplementationTab = newResourceName\n                        this.update('this.implementationTabs');\n                        this.update('this.activeImplementationTab');\n                        this.update('this.implementation');\n                        this.resourceChanged();\n                    }\n                }.bind(this)\n            }\n        ]\n    }\n    editorFullscreen() {\n        this.enterFullscreen(document.documentElement);\n    }\n    showViewWithParameters(parameters) {\n        debugger\n        this.selectedResource = this.selectedTag\n        this.setAttribute('settingsVisible', false)\n        this.gotoTab('view')\n        this.selectedResourceParameters = parameters\n        this.update('this.selectedResourceParameters')\n        this.update('this.selectedResource')\n\n    }\n    findLineAndPosition(searchString, fullString) {\n        var position = fullString.indexOf(searchString);\n        var lineNumber = fullString.substr(0, position).split('\\n').length;\n        var linePosition = position - fullString.lastIndexOf('\\n', position - 1);\n        return { lineNumber: lineNumber, linePosition: linePosition };\n    }\n    updateLineNumberHash() {\n        if (window.location.hash) {\n            let params = window.location.hash.substring(1).split(',')\n            let line = 0;\n            let tab = ''\n            let codepoint = undefined\n            let message = \"Error in your source code\"\n            for (let param of params) {\n                let paramDetail = param.split('=')\n                let paramName = paramDetail[0]\n                let paramValue = paramDetail[1]\n\n                if (paramName == 'line') {\n                    line = paramValue * 1;\n                }\n                if (paramName == 'tab') {\n                    tab = paramValue;\n                }\n                if (paramName == 'codepoint') {\n                    codepoint = decodeURIComponent(paramValue)\n                }\n\n\n            }\n            if (tab != '') {\n                this.switchTab('vscode')\n                if (tab == 'html') {\n                    if (this.implementationTabs) {\n                        let idx = this.implementationTabs.findIndex(tab => { return tab.name == 'html' })\n                        if (idx == -1) {\n                            tab = 'html.php'\n                        }\n                    }\n                }\n                this.switchImplementationTab(tab)\n                this.msedit.editor.revealLine(line)\n                this.msedit.editor.setPosition({ column: 0, lineNumber: line })\n            }\n            if (codepoint != undefined) {\n\n\n                    let pos = this.findLineAndPosition(codepoint, this.implementation[this.activeImplementationTab])\n                    this.msedit.editor.revealLine(pos.lineNumber)\n    \n                    let modelMarkers = []\n                    modelMarkers.push({ severity: monaco.MarkerSeverity.Error, startLineNumber: pos.lineNumber*1, startColumn: pos.linePosition*1, endLineNumber: pos.lineNumber*1, endColumn: pos.linePosition+codepoint.length, message: message})\n                    monaco.editor.setModelMarkers(monaco.editor.getModels()[0], '', modelMarkers)\n                 let newDecorator = {\n                     range: new monaco.Range(pos.lineNumber, pos.linePosition, pos.lineNumber, pos.linePosition+codepoint.length),\n                     options: { inlineClassName: 'highlight' }\n                 };\n                 this.currentDecorationId = this.msedit.editor.getModel().deltaDecorations([], [newDecorator]);\n\n            }\n        }\n    }\n\n    removeDecoration() {\n        if (this.currentDecorationId) {\n            this.msedit.editor.getModel().deltaDecorations([this.currentDecorationId], []);\n            this.currentDecorationId = null;  \/\/ Reset the id after removal\n        }\n    }\n    \/* chooseServer() {\n         Resource.cls('dialog').createDialog('choose.server', {submitlabel:\"Choose Server\"}).then( server => {\n             resource.action('choose_server',{server:server.server}).then( server => {\n                 this.resetEditor(true)\n                 this.updateResources()\n                 this.currentServer = server\n                 this.update('this.currentServer')\n                 this.update('this.getRcMenuActions')\n                 this.update('this.getRCMenuName')\n             })\n         });\n     }*\/\n    getRcMenuActions() {\n        let chooseServerName = this.currentServer && this.currentServer.id ? this.currentServer.title : 'Servers';\n\n        let helpMode = {\n            name: (window.helpMode$ == true ? 'editor_menu_help_mode_on' : 'editor_menu_help_mode_off'), fn: function () {\n                Tag.publish('helpMode$', !window.helpMode$)\n                this.update('this.getRcMenuActions')\n                if (window.helpMode$) {\n                    toast$.show(translate('help_mode_activation_message'), false, 'success')\n                    localStorage.helpmode = 'on'\n                } else {\n\n                    toast$.show(translate('help_mode_deactivation_message'), false, 'success')\n\n                }\n            }.bind(this)\n        };\n\n        if (this.isWP) {\n            let items = [\n                {\n                    name: 'editor_menu_render_html_tutorial', fn: () => {\n                        window.location = 'https:\/\/www.metayota.com\/documentation'\n                    }\n                },\n                helpMode\n            ];\n            return items;\n        }\n\n        let items = [\n            {\n                name: 'editor_menu_servers', fn: () => {\n                    router$.goto('\/editor\/view\/server.admin')\n                }\n            },\n            {\n                name: (this.currentTask && this.currentTask.id ? translate('editor_menu_current_task') + this.currentTask.title : 'editor_menu_tasks'), fn: function () {\n                    if (this.currentTask && this.currentTask.id) {\n                        router$.goto('\/tasks\/' + this.currentTask.id)\n                    } else {\n                        router$.goto('\/editor\/view\/website.tasks')\n                    }\n                }.bind(this)\n            },\n            { value: 'account', name: 'editor_menu_account' },\n            { value: 'your_skills', name: 'editor_menu_your_skills' },\n            { value: 'render_html_tutorial', name: 'editor_menu_render_html_tutorial' },\n            { value: 'support', name: 'editor_menu_support' },\n            {\n                name: 'editor_menu_buy_coins', fn: function () {\n                    window.location = '\/page\/rc.web.payments\/60'\n                }\n            },helpMode\n\n        ];\n\n        if (loggedInUser$.usergroup_id == \"3\") {\n            items.push({\n                name: translate('admin'), fn: function () {\n                    router$.goto('\/editor\/view\/rc.admin')\n                }\n            })\n        }\n        if (loggedInUser$.id != undefined) {\n            items.push({\n                name: translate('logout'), fn: function () {\n                    Resource.action('login', 'logout').then(x => {\n                        window.loggedInUser$ = {}\n                        document.location = '\/'\n                    })\n                }.bind(this)\n            })\n        } else {\n            items.push({\n                name: translate('login'), fn: function () {\n                    document.location = '\/login'\n                }\n            })\n        }\n        if (this.currentServer && this.currentServer.id) {\n            items.unshift({\n                name: editor$.currentServer.http_host, fn: function () {\n                    window.location = editor$.currentServer.http_host\n                }\n            })\n        }\n        return items;\n    }\n    logoclick() {\n        let n = Math.round(Math.random() * 9 + 1)\n        if (n > 5) {\n            n = 1\n        }\n        let animation = 'visible' + n\n        this.rlogo.classList.remove(animation)\n        this.rlogo.classList.add(animation)\n        window.setTimeout(function () {\n            this.rlogo.classList.remove(animation)\n        }.bind(this), 4000)\n    }\n\n    updateResources() {\n        return resource.action('list-resources').then(resources => {\n\n            this.allResources = resources\n            this.projectResources = resources.filter((v) => {\n                return (v.project_id == this.selectedProject)\n            })\n            this.projectResourceOptions = resources.map((v) => { return { title: v.title, name: v.name, value: v.name, project_id: v.project_id, type: v.type } })\n            this.update('this.allResources')\n            this.update('this.projectResources')\n            this.update('this.projectResourceOptions')\n\n            this.publish('tags$', this.projectResourceOptions);\n        });\n    }\n\n    resetEditor(update = false) {\n        this.selectedTagObj = null\n        this.activeImplementation = null\n        this.implementationTabs = null\n        this.selectedTag = null\n        this.update('this.selectedTagObj')\n        this.update('this.selectedTag')\n        this.update('this.activeImplementation')\n        this.update('this.implementationTabs')\n        this.unsaved = false\n        this.update('this.unsaved')\n        this.doLayout()\n    }\n\n    setup() {\n        this.initUser()\n\n        let spinner = document.getElementById('main-spinner')\n        if (spinner) spinner.remove()\n    }\n\n    initUser() {\n        let user = Resource.cls('user_obj')\n        if (user) {\n            user.updateLoggedInUser();\n        } else {\n            console.warn('user is not defined')\n        }\n    }\n\n    viewFullscreen() {\n        this.fullscreen = !this.fullscreen\n        this.update('this.fullscreen')\n    }\n\n    goto(resource, tab, line) {\n\n        let tabHistory = {}\n        tabHistory[tab] = {\n            position: { lineNumber: line, column: 1 }\n        }\n        this.history[resource] = {\n            activeTab: tab,\n            tab_history: tabHistory\n        }\n        this.switchImplementationTab(tab)\n        this.loadTabAndScrollPosition()\n        \/*  if (this.selectedResource == resource) {\n              this.switchTab('vscode')\n              \n              this.loadTabAndScrollPosition()\n              window.history.pushState({}, '\/editor\/resource\/' + resource + '\/vscode', );\n          } else {*\/\n        router$.goto('\/editor\/resource\/' + resource + '\/vscode')\n        this.msedit.getErrors()\n        \/\/}    \n        \/*\n        }\n        this.resourceSelected(resource).then(result => {\n            \/\/this.switchTab('vscode')\n           \/\/ \n            setTimeout( () => {\n            this.switchImplementationTab(tab)\n            this.msedit.editor.revealLine(line)\n            this.msedit.editor.setPosition({ column: 0, lineNumber: line })\n            \/\/window.history.pushState({}, \"\", );\n            },0);\n        })*\/\n    }\n\n    showEditor() {\n        this.hidden = false\n        localStorage.editorHidden = false\n        this.update('this.hidden')\n        this.doLayout(this.tag)\n        window.setTimeout(function () {\n            this.doLayout(value)\n        }.bind(this), 20)\n    }\n\n    set hidden(h) {\n        this._hidden = h\n        this.update('this.hidden')\n    }\n\n    get hidden() {\n        return this._hidden\n    }\n\n    action(name, element) {\n        element.value = null\n\n        if (name != 'search') {\n            this.searchDialog.close();\n        }\n\n        if (name == 'website') {\n            window.location = '\/'\n        }\n\n        if (name == 'account') {\n            router$.goto('\/editor\/view\/website.account')\n        }\n\n        if (name == 'support') {\n            \/\/router$.goto('\/editor\/resource\/rc:website.contact\/view')\n            window.location = ('\/contact')\n        }\n\n        if (name == 'your_skills') {\n            router$.goto('\/editor\/view\/website.admin.skills')\n        }\n\n        if (name == 'update') {\n            router$.goto('\/editor\/view\/rc.sync')\n        }\n\n        if (name == 'translator') {\n            router$.goto('\/editor\/translator')\n        }\n\n        if (name == 'admin_menu') {\n            router$.goto('\/editor\/view\/admin-menus')\n        }\n        \n\n        if (name == 'errors') {\n            router$.goto('\/editor\/view\/errors')\n        }\n\n        if (name == 'submit_work') {\n            router$.goto('\/submit\/' + this.selectedTag)\n        }\n\n        if (name == 'open_project') {\n            Resource.cls('dialog').createDialog('rc.project.select', { submitlabel: \"Open Project\" }).then(project => {\n                let projectId = project['project_id']\n                localStorage.selectedProject = projectId\n                this.selectedProject = projectId\n                this.resetEditor(true)\n                this.updateResources()\n                this.update('this.selectedProject')\n            })\n        }\n\n        if (name == 'fullscreen') {\n            this.editorFullscreen()\n        }\n\n        if (name == 'todos') {\n            router$.goto('\/editor\/view\/rc.all.todo')\n        }\n\n        if (name == 'create_project') {\n            DialogForm.createDialog('rc.project', { label: translate('create_project_label'), submitlabel: translate('create_project_submit_label') }).then(project => {\n                resource.action('create_project', { project: project })\n            })\n        }\n\n        if (name == 'create_tab') {\n\n            Resource.cls('dialog').createDialog('rc.editor.tab.create', { label: translate('create_tab_label'), submitlabel: translate('create_tab_submit_label') }).then(project => {\n                if (project.technology || project.custom) {\n\n                    let resourceName = project.custom != '' && project.custom != null ? project.custom : project.technology\n                    this.activeImplementationTab = resourceName\n                    this.activeImplementation = ''\n                    if (!this.implementation) {\n                        this.implementation = {}\n                    }\n                    this.implementation[resourceName] = '';\n                    this.implementationTabs.push({ name: resourceName })\n\n                    this.update('this.implementationTabs')\n                    this.update('this.activeImplementationTab')\n                    this.update('this.activeImplementation')\n                    this.resourceChanged();\n                }\n            })\n        }\n        if (name == 'rename_resource') {\n            let resourceName = prompt(translate('resource_name_prompt'));\n            if (resourceName) {\n\n            }\n        }\n\n        if (name == 'render_html_tutorial') {\n            window.location = '\/documentation';\n        }\n\n        if (name == 'search') {\n            this.searchDialog.show();\n        }\n        if (name == 'add_resource') {\n            router$.goto('\/editor\/view\/editor.addresource')\n            \/\/this.addresource.visible = true\n        }\n        if (name == 'delete_resource') {\n            let confirmed = confirm(translate('resource_deletion_confirmation', { title: this.selectedTagObj.title, name: this.selectedTagObj.name }));\n            if (confirmed) {\n                resource.action('delete_resource', { id: this.selectedTagObj.id }).then(deleted => {\n                    this.resetEditor(true)\n                    this.updateResources()\n                    this.tagDropdown.deleteRecentlyViewed(this.selectedTagObj.name)\n                })\n            }\n        }\n        if (name == 'backup') {\n            this.makeBackup();\n        }\n\n    }\n\n    findDocument() {\n        this.searchDialog.toggle();\n    }\n\n    checkSave() {\n        if (this.unsaved) {\n            if (translate('save_changes_confirmation')) {\n                this.save();\n            } else {\n                this.tagToSave = null\n                this.unsaved = false\n                this.update('this.tagToSave')\n                this.update('this.unsaved')\n                return false;\n            }\n        }\n        this.unsaved = false\n        this.update('this.tagToSave')\n        this.update('this.unsaved')\n        return true;\n    }\n\n    showAddResource() {\n        this.addresource.visible = true\n    }\n\n    gotoImpl(value) {\n        router$.goto('\/editor\/resource\/' + value + '\/vscode')\n        this.selectedResource = value\n        this.update('this.selectedResource')\n        document.title = value\n    }\n\n    gotoView(value) {\n        router$.goto('\/editor\/resource\/' + value + '\/view')\n        this.selectedResource = value\n        this.update('this.selectedResource')\n    }\n\n    showTag(value) {\n        this.tagToShow = value\n        this.update('this.tagToShow')\n        this.tab = 'showtag'\n        this.update('this.tab')\n    }\n\n    loadTabAndScrollPosition() {\n        if (this.history[this.selectedResource] != undefined) {\n            const storedData = this.history[this.selectedResource];\n            this.tab_history = storedData.tab_history\n        } else {\n            this.tab_history = {}\n        }\n        this.loadTabScrollPosition()\n        \/*     if(storedData.activeTab !== undefined) {\n                 this.activeImplementationTab = storedData.activeTab;\n                 this.gotoTab(storedData.activeTab)\n             }*\/\n\n        \/*   const editor = this.msedit.editor;\/\/.getModels()[0];\n           if (editor && storedData.position && storedData.scrollPosition !== undefined) {\n               editor.setPosition(storedData.position);\n               editor.setScrollTop(storedData.scrollPosition);\n               return;\n           }*\/\n\n\n        \/*  const editor = this.msedit.editor;\n          if(editor) {\n              editor.setPosition({ lineNumber: 1, column: 1 });\n              editor.setScrollTop(0);\n          }*\/\n    }\n\n    saveTabAndScrollPosition() {\n        if (this.selectedResource != undefined && this.activeImplementationTab != undefined) {\n            this.saveTabScrollPosition()\n            \/\/   if(editor) {\n            \/\/     const position = editor.getPosition();\n            \/\/   const scrollPosition = editor.getScrollTop();\n            this.history[this.selectedResource] = {\n                activeTab: this.activeImplementationTab,\n                tab_history: this.tab_history\n            }\n            \/\/  }\n        }\n    }\n\n    gotoResource(value) {\n        this.saveTabAndScrollPosition()\n\n        if (value == this.selectedResource) { return }\n        if (this.tab == null || this.tab == 'null') {\n            this.tab = 'overview'\n            this.tabDropdown.value = 'overview'\n        }\n        router$.goto('\/editor\/resource\/' + value + '\/' + this.tab)\n        this.selectedResource = value\n        this.update('this.selectedResource')\n        document.title = value\n    }\n\n    gotoTab(value) {\n        router$.goto('\/editor\/resource\/' + this.selectedTag + '\/' + value)\n    }\n\n    resourceSelected(value) {\n        if (!value) {\n            return false;\n        }\n\n        this.selectedResource = value\n        this.update('this.selectedResource')\n\n        this.checkSave()\n        this.resetEditor()\n        this.loading = true\n        this.update('this.loading')\n        this.tagToSave = null\n        this.update('this.tagToSave')\n\n        this.selectedTag = value\n        this.update('this.selectedTag')\n\n        if (this.tab != this.tabDropdown.value) {\n            if (this.tabDropdown.value != null) {\n                this.tab = this.tabDropdown.value\n            }\n            this.gotoTab(this.tab)\n            this.tabChanged(this.tab)\n        }\n\n        return resource.action('load-resource', { name: value }).then(resource => {\n            if (resource) {\n                \/\/this.gotoTab(this.tabDropdown.value)\n                this.resourceLoaded(resource);\n                window.setTimeout(function () {\n                    this.update('this.loading')\n                }.bind(this), 300)\n                this.loading = false\n                this.updateLineNumberHash()\n\n\n            }\n        })\n    }\n\n    resourceLoaded(resource) {\n        try {\n            if (resource.implementation) {\n                this.implementation = JSON.parse(resource.implementation)\n            } else {\n                this.implementation = {}\n            }\n        } catch (error) {\n            console.error('implementation could not be parsed', error, resource.implementation)\n            this.implementation = {}\n        }\n\n        if (this.implementation) {\n            this.implementationTabs = Object.keys(this.implementation).map(v => { return { name: v } });\n        } else {\n            this.implementationTabs = []\n        }\n\n        if (this.implementationTabs.length > 0) {\n\n            if (this.history[resource.name] != undefined) {\n                this.activeImplementationTab = this.history[resource.name].activeTab\n            } else {\n                this.activeImplementationTab = this.implementationTabs[0].name\n            }\n\n            this.activeImplementation = this.implementation[this.activeImplementationTab]\n        } else {\n            this.activeImplementation = ''\n        }\n\n        this.update('this.implementationTabs')\n        this.update('this.activeImplementation')\n        this.update('this.activeImplementationTab')\n        this.update('this.implementation')\n\n        this.updateDependencies(resource)\n        this.updateParameters(resource)\n\n        this.update('this.selectedTag')\n\n        this.selectedTagObj = resource\n        this.update('this.selectedTagObj')\n\n        this.unsaved = false;\n        this.update('this.unsaved');\n        this.update('this.getDesign')\n\n        this.doLayout(this.tab);\n\n        this.tagToSave = resource\n\n        this.loadTabAndScrollPosition()\n        return true\n    }\n\n    updateTabs() {\n        if (this.isWP) {\n            this.tabs = [\n                { name: 'editor_menu_overview', value: 'overview' },\n                { name: 'editor_menu_config', value: 'config' },\n                \/*{ name: 'editor_menu_defaults', value: 'defaults' },*\/\n                { name: 'editor_menu_vscode', value: 'vscode' },\n                { name: 'editor_menu_parameters', value: 'parameters' },\n                { name: 'editor_menu_dependencies', value: 'dependencies' },\n                { name: 'editor_menu_view', value: 'view' },\n                { name: 'editor_menu_access', value: 'access' },\n            ];\n        } else {\n            this.tabs = [\n                { name: 'editor_menu_overview', value: 'overview' },\n                { name: 'editor_menu_config', value: 'config' },\n                { name: 'editor_menu_defaults', value: 'defaults' },\n                { name: 'editor_menu_vscode', value: 'vscode' },\n                { name: 'editor_menu_parameters', value: 'parameters' },\n                { name: 'editor_menu_dependencies', value: 'dependencies' },\n                { name: 'editor_menu_view', value: 'view' },\n                { name: 'editor_menu_designer', value: 'designer' },\n                { name: 'editor_menu_development', value: 'development' },\n                { name: 'editor_menu_todo', value: 'todo' },\n                { name: 'editor_menu_debug', value: 'debug' },\n                { name: 'editor_menu_access', value: 'access' },\n            ];\n        }\n\n        if (this.currentTask) {\n            this.tabs.push({ name: 'Changes', value: 'changes' })\n        }\n        this.update('this.tabs')\n        this.update('this.tab')\n    }\n\n    updateParameters(resource) {\n        if (resource.parameters) {\n            try {\n                this.parameters = JSON.parse(resource.parameters);\n            } catch (e) {\n                this.parameters = []\n            }\n        } else {\n            this.parameters = [];\n        }\n        this.update('this.parameters');\n    }\n\n    updateDependencies(resource) {\n        if (resource.dependencies && resource.dependencies != '') {\n            try {\n                this.dependencies = JSON.parse(resource.dependencies);\n            } catch (e) {\n                this.dependencies = []\n            }\n        } else {\n            this.dependencies = null;\n        }\n        if (!Array.isArray(this.dependencies)) {\n            this.dependencies = [];\n        }\n        this.update('this.dependencies');\n    }\n\n    resourceUpdated(resourceObj, name = null) {\n        if (name !== null) {\n            let newResourceObj = {}\n            newResourceObj[name] = resourceObj\n            resourceObj = newResourceObj\n        }\n\n        Object.assign(this.tagToSave, resourceObj)\n        this.resourceChanged()\n    }\n\n    resourceChanged() {\n        this.removeDecoration()\n        this.unsaved = true;\n        this.update('this.unsaved');\n    }\n\n    updateTagChanged(tag) {\n        this.tagToSave = Object.assign({}, tag)\n        this.resourceChanged()\n    }\n\n    documentationUpdated(doc) {\n        this.tagToSave.documentation = doc\n        this.resourceChanged()\n    }\n\n    designUpdated(design, html) {\n        if (!this.implementation) {\n            this.implementation = {}\n        }\n        this.implementation.design = design\n        this.implementation.html = html\n        this.resourceChanged()\n    }\n\n    paramsChanged(parameters) {\n        this.tagToSave.parameters = parameters\n        this.resourceChanged()\n        this.save()\n    }\n\n    todosChanged(todos) {\n        this.tagToSave.todos = JSON.stringify(todos)\n        this.resourceChanged()\n    }\n\n    testsChanged(tests) {\n        this.tests = tests\n        this.resourceChanged()\n    }\n\n    switchAndReloadView() {\n        \/\/\tthis.lastTab()\n        \/\/ Tag.clear(this.selectedTagObj.name)\n        this.gotoTab('view')\n\n    }\n\n    viewResourceWithTab(resource, tab) {\n        this.resourceSelected(resource)\n        this.tabChanged(tab)\n    }\n\n    switchTab(value) {\n        this.tabChanged(value)\n    }\n\n    tabChanged(value) {\n        if (value != 'view') {\n            this.previousTab = value\n        }\n        if (value == 'vscode') {\n            this.msedit.getErrors()\n        }\n        this.checkSave();\n\n        this.tab = value;\n        this.update('this.tab');\n        this.update('this.tabs');\n\n        this.unsaved = false\n\n        this.update('this.unsaved')\n\n        this.doLayout(value)\n        this.updateLineNumberHash()\n    }\n\n    doLayout() {\n        this.compact = false\n        this.update('this.compact')\n        if (this.tab == 'vscode' && this.msedit && this.msedit.editor) {\n            this.msedit.editor.layout();\n        }\n    }\n\n    save() {\n        if (this.activeImplementationTab && this.tab == 'vscode') {\n            this.implementation[this.activeImplementationTab] = this.msedit.value;\n        }\n        if (this.designer) {\n            this.implementation.design = JSON.stringify(this.designer.value, null, 2)\n        }\n\n        let data = {}\n        data.implementation = JSON.stringify(this.implementation);\n        data.documentation = this.tagToSave.documentation;\n        data.title = this.tagToSave.title;\n        data.extends_resource = this.tagToSave.extends_resource;\n        data.dependencies = this.tagToSave.dependencies;\n        data.parameters = this.tagToSave.parameters;\n        data.tests = JSON.stringify(this.tests);\n        data.version = this.tagToSave.version;\n        data.license = this.tagToSave.license;\n        data.todos = this.tagToSave.todos;\n        data.id = this.tagToSave.id;\n        data.hash = this.tagToSave.hash\n\n\n        GlobalResource.call('resource.update', data).then(result => {\n            if (result.new_hash != undefined) {\n                this.tagToSave.hash = result.new_hash\n            }\n            if (result.error != undefined) {\n                toast$.show(result.error, true)\n                alert(result.error)\n                return\n            }\n            if (this.tab == 'designer') {\n                this.designer.refreshPreview();\n            }\n            if (this.tab == 'vscode') {\n                this.msedit.getErrors()\n            }\n            if (this.tab == 'vscode') {\n                Resource.call('check.dependencies', { 'resource': this.tagToSave.name }).then(result => {\n                    if (result.length > 0) {\n                        toast$.show('missing_dependencies', true, 'error', '\/editor\/view\/check.dependencies\/' + this.tagToSave.name, 'add_dependencies');\n                    }\n                })\n            }\n            if (this.tab == 'designer') {\n                Resource.call('check.dependencies', { 'resource': this.tagToSave.name }).then(result => {\n                    if (result.length > 0) {\n                        Resource.action('check.dependencies', 'add_dependencies', { resource: this.tagToSave.name, dependencies: result }).then(addResult => {\n\n                            let msg = translate('resources_added_to_dependencies_message', { resource_count: result.length });\n                            toast$.show(msg, false, 'success');\n                            this.designer.refreshPreview();\n                        })\n                    }\n                })\n            }\n            this.reloadView();\n            this.unsaved = false;\n            this.update('this.unsaved');\n        })\n        \/\/ this.tagToSave = null\n\n\n\n    }\n\n    reloadView() {\n        this.setAttribute('reloading', true)\n        Tag.clear(this.tagToSave.name)\n        this.setAttribute('reloading', false)\n    }\n\n    lastTab() {\n        if (router$.active && router$.active.content && router$.active.content.tag == 'website.view') {\n            router$.goto('\/editor\/')\n        } else if (this.includeTag != null) {\n            this.includeTag = null\n            this.update('this.includeTag')\n            this.doLayout(this.tag)\n        } else if (this.previousTab) {\n            \/\/this.switchTab(this.previousTab)\n            this.gotoTab(this.previousTab)\n        }\n    }\n\n    getDesign() {\n        if (!this.implementation) {\n            return {}\n        }\n        if (this.implementation.design) {\n            try {\n                return JSON.parse(this.implementation.design)\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        return {}\n    }\n\n    onKeypress(event) {\n        if (event.key == 'F10') {\n            this.tagDropdown.toggleOptions();\n        }\n        if (event.key == 'F9') {\n            this.tabDropdown.toggleOptions();\n        }\n        if (event.key == 'F8') {\n            this.menuDropdown.toggleOptions();\n        }\n        if (event.key == 'F7') {\n            this.logoclick()\n        }\n        if ((event.metaKey || event.ctrlKey)) {\n\n            if (event.key == 's') {\n                this.save();\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n        }\n        \/*\tif (event.metaKey || event.ctrlKey) {\n                if (event.key == 'i') {\n                    this.tabChanged('implementation')\n                } else if (event.key == 'o') {\n                    this.tabChanged('overview')\n                } else {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            }*\/\n    }\n    switchImplementationTab(tab) {\n        this.implementationTabChanged(tab)\n    }\n\n    saveTabScrollPosition() {\n        const editor = this.msedit.editor;\/\/.getModels()[0];\n        if (editor) {\n            const position = editor.getPosition();\n            const scrollPosition = editor.getScrollTop();\n            this.tab_history[this.activeImplementationTab] = {\n                position: position,\n                scrollPosition: scrollPosition\n            }\n        }\n    }\n\n    loadTabScrollPosition() {\n        const editor = this.msedit.editor;\/\/.getModels()[0]; \n        if (editor) {\n            let storedData = this.tab_history[this.activeImplementationTab]\n            if (storedData && storedData.position) {\n                editor.revealLine(storedData.position.lineNumber)\n                editor.setPosition(storedData.position);\n                if (storedData.scrollPosition !== undefined) {\n                    editor.setScrollTop(storedData.scrollPosition);\n                }\n                return;\n            }\n            editor.setPosition({ lineNumber: 1, column: 1 });\n            editor.setScrollTop(0);\n        } else {\n            console.log('editor is not defined')\n        }\n\n    }\n\n    implementationTabChanged(tab) {\n        if (this.implementation != undefined) {\n            this.saveTabScrollPosition();\n            let keepUnsaved = this.unsaved\n            if (this.activeImplementationTab) {\n                this.implementation[this.activeImplementationTab] = this.msedit.value;\n            }\n            this.activeImplementationTab = tab;\n            this.activeImplementation = this.implementation[this.activeImplementationTab]\n            this.update('this.activeImplementation');\n            this.unsaved = keepUnsaved\n            this.update('this.unsaved')\n        }\n        this.update('this.activeImplementationTab');\n        this.loadTabScrollPosition()\n    }\n\n    preventDefault(e) {\n        e.preventDefault()\n    }\n    disableSnapback() {\n        document.addEventListener(\n            'touchstart',\n            this.preventDefault,\n            { passive: false }\n        )\n        document.addEventListener(\n            'touchmove',\n            this.preventDefault,\n            { passive: false }\n        )\n    }\n}"},"data":{"wordpress":true},"name":"editor","title":"Editor","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"database.table.editor"},{"name":"designer","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"dialog"},{"name":"dropdown","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"editor.call"},{"version":"1.0.0","type":"tag","name":"editor.css"},{"version":"1.0.0","type":"tag","name":"editor.defaults"},{"name":"editor.dependencies","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"editor.manage.project"},{"name":"editor.parameters","version":"1.0.0","type":"tag"},{"name":"form.livesearch","version":"1.0.0","type":"tag"},{"name":"overview","type":"tag","version":"1.0.0"},{"name":"play","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"ratings"},{"version":"1.0.0","type":"tag","name":"rc.accesscontrol"},{"version":"1.0.0","type":"object","name":"rc.account"},{"version":"1.0.0","type":"tag","name":"rc.change"},{"version":"1.0.0","type":"tag","name":"rc.db.table"},{"name":"rc.editor.tasks","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"object","name":"rc.project"},{"version":"1.0.0","type":"tag","name":"rc.spider"},{"version":"1.0.0","type":"tag","name":"resource.configuration"},{"version":"1.0.0","type":"tag","name":"router"},{"name":"search","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"settings"},{"name":"tabs","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"toast"},{"name":"todo","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"translate"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"version":"1.0.0","type":"object","name":"user_obj"},{"name":"vs.codeeditor","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"when"},{"version":"1.0.0","type":"php-library","name":"format-text"}],"extends_resource":""},"form.button":{"id":965,"parameters":[{"name":"label","type":"string","documentation":"La 'Etiqueta de Formulario' para este bot\u00f3n.","required":null,"title":"Etiqueta","title_translated":"Feldbeschriftung","documentation_translated":"Das 'Formular-Label' f\u00fcr diesen Button."},{"name":"enabled","title":"Activado","type":"boolean","documentation":"","required":null,"title_translated":"Aktiviert","documentation_translated":""},{"name":"(click)","title":"Al hacer clic","type":"string","documentation":"Evento que se dispara cuando el usuario hace clic en el bot\u00f3n (y el bot\u00f3n est\u00e1 habilitado).","event":true,"title_translated":"Beim Klicken","documentation_translated":"Ereignis, das ausgel\u00f6st wird, wenn der Benutzer auf den Button klickt (und der Button aktiviert ist)."}],"implementation":{"html":"<div class=\"btn-container\">\n    <button type=\"button\" tabindex=\"0\"  (click)=\"this.enabled then this.fire('click')\" class=\"form-button button button-primary {!this.enabled then 'form-button-disabled'} {this.class}\">{translate(this.label)}<\/button>\n<\/div>","css":".form-button, a.form-button {\n    margin-top: 16px;\n    margin-bottom: 16px;\n    padding-left: 32px;\n    padding-right: 32px;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    display: inline-block;\n    cursor: pointer;\n    left: 0px;\n    transition-property: top, left, box-shadow;\n    transition-duration: 0.3s;\n    font-weight: normal;\n    border-radius: 8px;\n    border: 1px solid gray;\n}\n\n.form-button:hover {\n    background: #999;\n}\n\n.form-button:active {\n    position: relative;\n    left: 2px;\n    top: 2px;\n    \n}\n\n.btn-container {\n    display: inline-block;\n    margin-right: 16px;\n}\n\n.form-button-disabled {\n    user-select: none;\n    opacity: 0.5;\n    pointer-events: none;\n}","javascript":"class JJFormButton extends Tag {\n    set title(t) {\n        this.label = t\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n    get label() {\n        return this._label\n    }\n    set enabled(e) {\n        this._enabled = e\n        this.update('this.enabled')\n    }\n    get enabled() {\n        if (this._enabled === undefined) {\n            return true\n        }\n        return this._enabled\n    }\n}"},"name":"form.button","title":"Bot\u00f3n Elemento de formulario","type":"tag","dependencies":[],"extends_resource":null},"database.table.editor":{"id":1068,"parameters":[{"name":"title","title":"T\u00edtulo","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Titel","documentation_translated":""},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":null,"readonly":false,"required":false,"title_translated":"Ressourcentyp","documentation_translated":""},{"name":"table","title":"Cuadro","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Tisch","documentation_translated":""},{"name":"show_description","title":"Mostrar documentaci\u00f3n","type":"boolean","documentation":"","readonly":false,"required":false,"title_translated":"Zeige Dokumentation","documentation_translated":""}],"implementation":{"html":"<div class=\"database-editor\">\n    <h1>{this.title}<\/h1>\n\n    <form.text placeholder=\"Buscar en\" (change)=\"this.searchChanged(event)\"><\/form.text>\n    <div style=\"overflow-x: scroll;max-width: 100%;\">\n        <p if=\"this.objs and this.objs.length == 0\">\n            No se han encontrado entradas.        <\/p>\n        <table if=\"this.objs and this.objs.length > 0\" class=\"table wp-list-table widefat fixed striped table-view-list\">\n            <thead>\n                <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                    <th first>\n                        Acciones                    <\/th>\n                    <th (click)=\"this.sortBy(parameter.name)\">{translate(parameter.title)}\n                        {this.getSortIndicator(parameter.name)}<\/th>\n                <\/tr>\n            <\/thead>\n            <tbody for=\"obj of this.objs\">\n                <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                    <td first>\n                        <i (click)=\"this.editRow( obj.id )\" class=\"action\"><img class=\"icon\"\n                                src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/edit.svg\" \/><\/i>\n                        <i (click)=\"this.deleteRow( obj.id )\" class=\"action\"><img class=\"icon\"\n                                src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\" \/><\/i>\n                    <\/td>\n                    <td>\n                        <object.viewparameter showlabel=\"{false}\" parameter=\"{parameter}\" value=\"{obj[parameter.name]}\" value_translated=\"{obj[parameter.name+'_translated']}\">\n                        <\/object.viewparameter>\n                    <\/td>\n                <\/tr>\n            <\/tbody>\n        <\/table>\n    <\/div>\n    <div class=\"tablenav bottom\">\n        <paginator number_of_pages=\"{this.number_of_pages}\" (change)=\"this.pageChanged(event)\"><\/paginator>\n        <form.button (click)=\"this.showAddDialog()\" label=\"A\u00f1adir\"><form.button>\n    <\/form.button>\n<\/div>","css":".pages .form-button {\n    min-width: 30px;\n    min-height: 30px;\n    border-radius: 3px;\n    padding: 0px;\n}\n\n.database-editor table {\n    width: 100%;\n}\n\n.database-editor tr:nth-child(even), .database-editor thead tr {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.database-editor td, .database-editor td .object-view-content {\n    font-weight: normal;\n}\n\n.pages .btn-container {\n    margin-right: 8px;\n}\n\n.database-editor table td, .database-editor table td .view-text-value {\n    max-width: 150px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\n\n\n.database-editor .object-view-parameter  {\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\n.j-editor .database-editor table.table td {\n    padding-top: 3px;\n    padding-bottom: 3px;\n}\n\n.form-button.highlighted {\n    background: white;\n    color: black;\n}","javascript":"class DatabaseTableEditor extends Tag {\n    setup() {\n        this.main_server = resource.getData().main_server\n        this.show_description = false\n    }\n    init() {\n        this.page = 1\n    }\n    set title(t) {\n        this._title = t\n    }\n    get title() {\n        return this._title\n    }\n    set table(t) {\n        this._table = t\n        this.update('this.table')\n        this.reloadData()\n    }\n    get table() {\n        return this._table\n    }\n\n    getSortIndicator(parameter) {\n        if (this.sort == parameter && this.order != undefined) {\n            if (this.order == 'ASC') {\n                return '\u2193';\n            } else {\n                return '\u2191';\n            }\n        }\n        return '';\n    }\n    countItems() {\n        resource.call({table:this.table,resourcetype:this.resourcetype,count:true,search:this.search}).then(result => {\n            this.setAttribute('count', result)\n            this.setAttribute('number_of_pages', Math.ceil(result\/15))\n        })\n    }\n    pageChanged(page) {\n        this.setAttribute('page', page)\n        this.reloadData()\n    }\n    sortBy(attribute) {\n        if (attribute != this.sort) {\n            this.setAttribute('order','ASC')\n        } else {\n            if (this.order == 'DESC') {\n                this.setAttribute('order','ASC')\n            } else {\n                this.setAttribute('order','DESC')\n            }\n        }\n        \n        this.setAttribute('sort',attribute)\n        this.reloadData()\n        this.update('this.getSortIndicator')\n    }\n    searchChanged(query) {\n        this.search = query\n        this.reloadData()\n    }\n    reloadData() {\n        if (this.table != undefined) {\n            resource.call({table:this.table,resourcetype:this.resourcetype,page:this.page,sort:this.sort,order:this.order,search:this.search}).then(result => {\n                if (result.length == 0 && this.page > 1) {\n                    this.setAttribute('page',this.page-1);\n                    this.reloadData()\n                    return\n                }\n                this.objs = result \n                this.update('this.objs')\n            })\n            this.countItems()\n        }\n    }\n    set resourcetype(r) {\n        if (r != undefined && this._resourcetype !== r) {\n            \n            this._resourcetype = r\n            \n            Resource.loaded(this.getServerPrefix()+r).then( resource => {\n                this.setAttribute('resource',resource)\n                this.update('this.resourcetype')\n                this.update('this.objs')\n                this.update('this.resource')\n            });\n        }\n    }\n    get resourcetype() {\n        if (this._resourcetype == undefined) {\n            return this._table\n        }\n        return this._resourcetype\n    }\n    deleteRow(rowid) {\n        if (confirm('Are you sure you want to delete this row?')) {\n            resource.action('delete', {table:this._resourcetype, row_id:rowid}).then(result => {\n                this.reloadData();\n            })\n        }\n    }\n    editRow(rowid) {\n        let value = this.objs.filter( obj => obj.id == rowid)[0]\n        DialogForm.createDialogWithData(this.getServerPrefix()+this.resourcetype,value,{'show_description':this.show_description}).then(resourceData => {\n            resource.action('update', {'table':this.table,'rowid':rowid, 'data':resourceData}).then( result => {\n                this.reloadData();\n            }) \n        })\n    }\n    getServerPrefix() {\n        debugger\n        if (this.main_server) {\n            return 'server:'\n        } else {\n            return '';\n        }\n    }\n    showAddDialog() {\n        DialogForm.createDialogWithData(this.getServerPrefix()+this.resourcetype, {}, {'show_description':this.show_description}).then( resourceData => {\n            resource.action('insert', {'table':this.table, 'resourceData':resourceData}).then(result => {\n                this.reloadData()\n            })\n        })\n    }\n}"},"data":{"main_server":false},"name":"database.table.editor","title":"Editor de tablas de bases de datos","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"db.row.editor"},{"version":"1.0.0","type":"tag","name":"db.table"},{"version":"1.0.0","type":"tag","name":"dialog"},{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"form.resource"},{"name":"form.text","type":"tag","version":"1.1.0"},{"name":"object.viewparameter","type":"tag","version":"1.1.0"},{"version":"1.0.0","type":"tag","name":"resource"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"name":"paginator","type":"tag","version":"1.0.0"}],"extends_resource":null},"designer":{"id":29,"parameters":[],"implementation":{"html":"<div class=\"designer\">\n\t<div class=\"left-pane\">\n\t\t<div class=\"item-tree\">\n\t\t\t<design.item element=\"designItem\" value=\"{this.value}\" selecteditem=\"{this.selectedItem}\" (selected)=\"this.didSelectItem(event)\"\n\t\t\t (change)=\"this.designChanged(event)\" tags=\"{this.tags}\"><\/design.item>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"content-pane\">\n\t\t<div if=\"this.selectedElement != undefined\">\n\t\t\t<form.text label=\"Nombre\" value=\"{(this.selectedItem && this.selectedItem.value != null ) then this.selectedItem.value.name}\" (change)=\"this.changedElementName(event)\"><\/form.text>\n\t\t\t<dropdown label=\"Etiqueta\" options=\"{this.allowedResourceOptions ? this.allowedResourceOptions : this.tagOptions}\" value=\"{this.selectedElement.value.tag}\"\n\t\t\t (change)=\"this.changedItemTag(event)\"><\/dropdown>\n\t\t\t<form.resource (change)=\"this.parameterChanged(event)\" resourcetype=\"server:{this.selectedElement.value.tag}\" value=\"{this.currentValue}\"><\/form.resource>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"right-pane\" if=\"this.active == true && this.tag != null\">\n        <iframe element=\"iframe\" style=\"width:100%;height:100%;\" src=\"{ (editor$.currentServer && editor$.currentServer.http_host ? editor$.currentServer.http_host : 'https:\/\/www.metayota.com\/') +'call\/index?tag='+this.tag.name}\"><\/iframe>\n\t<\/div>\n<\/div>","css":".designer {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n}\n\n.designer .dropdown {\n  width: auto;\n}\n\n.designer .left-pane {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    bottom: 60%;\n    width: 320px;\n    padding-top: 48px;\n    padding-bottom: 32px;\n    overflow-y: scroll;\n    background: #bfc6cd;\n    color: black;\n    border-right: 1px solid black;\n}\n\n.designer .content-pane {\n    position: absolute;\n    left: 0px;\n    width: 256px;\n    top: 40%;\n    bottom: 0px;\n    padding: 32px;\n    overflow-y: scroll;\n    color: black;\n    border-top: 1px solid black;\n    border-right: 1px solid black;\n    background: #bec6cc;\n}\n\n.designer .right-pane {\n    position: absolute;\n    left: 321px;\n    right: 0px;\n    border: 0px;\n    top: 0px;\n    bottom: 0px;\n    background: white;\n    overflow-y: scroll;\n}\n\n.designer .right-pane iframe {\n\tborder:none;\n    background: white;\n}\n\ntable.designer-options td {\n    vertical-align: top;\n}","javascript":"class Designer extends Tag {\n    init() {\n        this.designstr = ''\n        this.active = true\n    }\n    set value(v) {\n        this._value = v;\n        this.update('this.value')\n    }\n    get value() {\n        return this._value;\n    }\n    set tags(tags) { \n        if (!tags) return\n        this._tags = tags\n        this.tagOptions = tags.filter(tag => (tag.type == 'tag') || (tag.type == 'html') ).map( v => {\n            v['name'] = v['title'];\n            return v;\n        })\n        this.update('this.tags')\n        this.update('this.tagOptions')\n    }\n    get tags() {\n        return this._tags;\n    }\n    set tag(t) {\n        this._tag = t\n        this.update('this.tag')\n    }\n    get tag() {\n        return this._tag\n    }\n    designChanged(value) {\n        this.value = value\n        let html = this.tagToHtml(value)\n        let designParsed = JSON.stringify(value)\n        let updatedValues = {design:designParsed,html:html}\n        this.fire('change', updatedValues)\n    }\n    refreshPreview() {\n\tlet iFrameURL = this.iframe.src\n\tthis.iframe.src = ''\n\tthis.iframe.src = iFrameURL\n    }\n    searchParentType(parentItem, searchFor) {\n        let tagName = parentItem.tag\n        if (parentItem.items != undefined && parentItem.items.length > 0) {\n            for (let subItem of parentItem.items) {\n                if (subItem === searchFor) {\n                    return tagName\n                } else {\n                    let subitemResult = this.searchParentType(subItem, searchFor)\n                    if (subitemResult !== null) {\n                        return subitemResult\n                    } \n                }\n            }\n        }\n        return null\n    }\n\n    getCurrentParentType(searchItem) {\n        return this.searchParentType(this.designItem.value,searchItem)\n    }\n\n    tagToHtml(tag,level=0) {\n        if (!tag) return ''\n        let space = '    '.repeat(level)\n        let html = space + '<' + tag.tag;\n        let content = null\n        if (tag.parameters) {\n            let paramArr = []\n            for (let tagKey in tag.parameters) {\n                let tagVal = tag.parameters[tagKey]\n                if (typeof tagVal == 'boolean') {\n                    tagVal = '{'+tagVal+'}'\n                } else if (typeof tagVal == 'string') {\n                  \/\/  tagVal = tagVal.replace(\/\"\/g, '&quot;')\n                } else if (typeof tagVal == 'object') {\n                    tagVal = '{'+JSON.stringify(tagVal).replace(\/\"\/g, \"'\")+'}';\/\/.replace(\"'{\",\"\").replace(\"'}\",'') \/\/ not good replace\n                }\n                if (tagKey != 'content') {\n                    paramArr.push(tagKey + '=\"' + tagVal + '\"')\n                } else {\n                    content = tagVal\n                }\n            }\n\n            html += ' ' + paramArr.join(' ')\n        }\n        html += '>'\n        if (content) {\n            html += content\n        }\n        if (tag.items) {\n            for (let item of tag.items) {\n                html += space + this.tagToHtml(item,level+1)\n            }\n        }\n        html += space + '<\/' + tag.tag + '>'\n        return html\n    }\n\n    changedItemTag(value) {\n        if (this.selectedElement) {\n            this.selectedElement.setTagName(value)\n            this.updateParameters()\n        }\n        this.update('this.selectedElement')\n    }\n    changedElementName(value) {\n        if (this.selectedElement) {\n            this.selectedElement.setItemName(value)\n        }\n    }\n    parameterChanged(value) {\n        if (this.selectedElement) {\n            this.selectedElement.setParameters(value)\n        }\n    }\n    updateParameters() {\n        let selectedTag = this.selectedElement.value.tag\n        this.selectedTag = selectedTag\n        if (!selectedTag || Object.keys(selectedTag).length == 0) {\n            this.parameters = []\n            this.update('this.parameters')\n        } else {\n            let parentType = this.getCurrentParentType( this.selectedItem.value )\n            this.allowedResourceOptions = null\n            this.update('this.allowedResourceOptions')\n            Resource.loaded('server:'+parentType).then( resource => {\n                this.allowedSubelements = resource.allowed_subelements\n                if (this.allowedSubelements && this.allowedSubelements.length > 0) {\n                    this.allowedResourceOptions = this.allowedSubelements.map( v => {  return {name:v.resourcetype, value:v.resourcetype} })\n                } else {\n                    this.allowedResourceOptions = null\n                }\n                this.update('this.allowedResourceOptions')\n            })\n            \n            let tagIndex = this.tags.findIndex((t) => { return t.value == selectedTag })\n            if (this.tags[tagIndex]) {\n                \n                \n                \/\/this.callJson('editor',{action:'load-resource',name:selectedTag})\n                Resource.loaded('server:'+selectedTag).then( resource => {\n                    this.parameters = resource.parameters ? resource.parameters : []\n                    this.currentValue = this.selectedElement.value.parameters\n                    this.update('this.parameters')\n                    this.update('this.currentValue')\n                });\n            }\n        }\n\n        this.update('this.selectedTag')\n        this.update('this.selectedElement')\n        \n    }\n    didSelectItem(event) {\n        this.selectedItem = event.item\n        this.selectedElement = event.element\n        this.updateParameters()\n        this.update('this.selectedItem')\n        this.update('this.selectedElement')\n    }\n}"},"name":"designer","title":"Dise\u00f1ador","type":"tag","dependencies":[{"name":"design.item","version":"1.0","type":"tag"},{"name":"dropdown","version":"1.0","type":"tag"},{"name":"form.button","type":"tag","version":"1.0"},{"name":"form.element","version":"1.0","type":"tag"},{"name":"form.text","version":"1.0","type":"tag"},{"name":"form.resource","version":"1.0","type":"tag"}],"extends_resource":null},"dialog":{"id":969,"parameters":[{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":"\u00bfQu\u00e9 recurso debe mostrarse?","required":null,"options":[],"title_translated":"Resource Type","documentation_translated":"Which resource should be displayed?"},{"name":"visible","title":"Visible","type":"boolean","documentation":"Si el di\u00e1logo es visible (por defecto false).","required":null,"title_translated":"Visible","documentation_translated":"Is the dialog visible (default false)."},{"name":"title","title":"T\u00edtulo","type":"string","documentation":"El t\u00edtulo del di\u00e1logo.","required":null,"title_translated":"Title","documentation_translated":"The title of the dialog."},{"name":"tag","title":"Etiqueta","type":"tagtype","documentation":"En lugar de obtener los datos de un tipo de recurso, tambi\u00e9n puede mostrar una etiqueta.","required":null,"title_translated":"Tag","documentation_translated":"Instead of getting the data for a resource type, you can also display a tag."}],"implementation":{"html":"<div class=\"dialog {this.class} {this.visible then 'visible'}\" (keydown)=\"this.keyPressed(event)\">\n    <div class=\"dialog-bg\" if=\"this.visible == true\" ><\/div>\n\t<div tabindex=\"1\" (keydown)=\"this.keyPressed(event)\"  class=\"modal-window\" element=\"dialogModal\" if=\"this.visible == true\" (keypress)=\"this.keyPressed(event)\">\n\t\t<div class=\"modal-header\">\n            <div (click)=\"this.hide()\" class=\"modal-close\"><img src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/close.svg\" width=\"21\" height=\"21\"\/><\/div>\n        <\/div>\n\t\t<div if=\"this.resourcetype != undefined || this.display_tag != undefined\" class=\"modal-content\">\n            <div if=\"this.title != undefined\">\n                <h2>{this.title}<\/h2>\n            <\/div>\n            <div if=\"this.display_tag === undefined\">\n                <form.resource showdocumentation=\"{this.show_description}\" element=\"form\" (submit)=\"this.submit(event)\" value=\"{this.tagdata}\" label=\"{this.label}\" resourcetype=\"{this.resourcetype}\" submitlabel=\"{this.submitlabel != null ? this.submitlabel : 'OK'}\"><\/form.resource>\n            <\/div>\n            <div if=\"this.display_tag != undefined\">\n                <include (submit)=\" this.submit(event)\" element=\"includedTag\" tag=\"{this.display_tag}\" attributes=\"{this.tagdata}\"><\/include>\n            <\/div>\n\t\t<\/div>\n    <\/div>\n<\/div>","css":".dialog .visible {\n    display: block;\n}\n\n.dialog .form-button, .dialog .form-button:hover {\n    background-color: #5883a4;\n    color: white;\n    border-radius: 30px;\n    font-size: 120%;\n    font-weight: bold;\n    border: none;\n}\n\n.dialog .dialog-bg {\n    background: rgba(0, 0, 0, 0.45);\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    z-index: 10000;\n}\n\n.dialog.visible .modal-window {\n\tdisplay: block;\n}\n\n.dialog .modal-window {\n    max-height: 500px;\n    overflow-y: scroll;\n}\n\n.dialog h2 {\n    margin-top:0px;\n}\n\n\n.modal-header {\n    position:relative;\n    width: 100%;\n}\n\n.modal-title {\n    padding: 16px;\n    padding-left: 32px;\n    padding-right: 32px;\n    font-weight: bold;\n    color: black;\n}\n\n\n.modal-window {\n  \tbox-shadow: 0px 0px 15px rgba(0,0,0,0.5);\n    background-color: #F7F9F9;\n    z-index: 10000;\n    position: fixed;\n    left: 50%;\n    margin-left: -360px;\n    width: 720px;\n    top: 132px;\n    border-radius: 12px;\n    \/*background: #0e75b7;*\/\n    \/*color: white;*\/\n    border: 5px solid white;\n}\n@media only screen and (max-width: 600px) {\n    .modal-window {\n        margin-left: 0px;\n        width: 100%;       \n        left: 0px;\n        right:0px;\n        top: 100px;\n    }\n}\n.modal-content {\n    padding: 16px;\n    color: black;\n}\n\n.modal-content .dropdown-form-element {\n    color: black;\n    border-color: black;\n}\n\n.modal-window.active {\n    display: block;\n}\n\n.modal-close {\n    position: absolute;\n    right: 24px;\n    font-family: Arial;\n    cursor: pointer;\n    top: 24px;\n}\n.modal-close img {\n\twidth: 14px;\n\theight: 14px;\n}\n\n.modal-content {\n    padding: 64px;\n}\n\n.modal {\n    box-shadow: 2px 2px 3px rgba(0, 25, 50, 0.15);\n    border-top: 1px solid #eaeaea;\n    border-right: none;\n    border-bottom: none;\n    border-left: 1px solid #eaeaea;\n    background-color: #F7F9F9;\n}\n\n","javascript":"class DialogForm extends Tag {\n\n    keyPressed(e) {\n        if (e.keyCode == 27) {\n            this.hide()\n        }\n        \/\/alert(e.which);\n    }\n\n    static displayTagInDialog(tag,data=null) {\n        return Tag.ready(tag).then(ready=> {\n            let dialog = Tag.render('dialog',{display_tag:tag,tagdata:data,visible:true});\n            document.body.appendChild(dialog.node)\n            \n            return new Promise(function (resolve) {\n                dialog.tag.resolve = resolve\n            })\n        })\n\t}\n\n\tstatic createDialogWithTag(tag,data=null) {\n\t\tlet dialog = Tag.render('dialog',{tag:tag,tagdata:data,visible:true});\n\t\tdocument.body.appendChild(dialog.node)\n\n        \/*return new Promise(function (resolve) {\n            dialog.tag.onsubmit = resolve\n            \/\/Object.assign(dialog.tag,data)\n        })*\/\n        return Tag.ready(tag);\n\t}\n\n    static createDialogWithData(resourcetype, data = {}, options={}) {\n        let mainResolve = null;\n        let promise = new Promise(function (resolve) {\n            mainResolve = resolve\n        })\n\n        Tag.ready('dialog').then(result => {\n            let dialog = Tag.render('dialog');\n            dialog.tag.resourcetype = resourcetype\n            dialog.tag.tagdata = data\n            dialog.tag.onsubmit = mainResolve\n            dialog.tag.show_description = options.show_description\n            dialog.tag.resource_form_options = options\n            document.body.appendChild(dialog.node)\n\n            Resource.loaded(resourcetype).then( resource => {\n                dialog.tag.visible = true\n            })\n        })\n\n\n        return promise\n    }\n\n    static createDialog(resourcetype, parameters = {}) {\n        let mainResolve = null\n        let promise = new Promise(function (resolve) {\n            mainResolve = resolve\n        })\n\n        Tag.ready('dialog').then( result => {\n                let dialog = Tag.render('dialog');        \n                dialog.tag.resourcetype = resourcetype\n                \/\/dialog.tag.visible = true\n                dialog.tag.tagdata = parameters\n                document.body.appendChild(dialog.node)\n                \n                Resource.loaded(resourcetype).then( resource => {\n                    dialog.tag.visible = true\n                })\n                return new Promise(function (resolve) {\n                    dialog.tag.onsubmit = mainResolve\n                })\n\n        })\n        return promise\n        \n    }\n\n    set tagdata(t) {\n        this._tagdata = t \n        this.update('this.tagdata')\n    }\n\n    get tagdata() {\n        return this._tagdata\n    }\n\n    submit(data) {\n        if (this.form != undefined) {\n            if (this.form.isValid()) {\n                this.fire('submit',data)\n            }\n        } else {\n            this.fire('submit',data)\n        }\n        this.hide()\n    }\n\n    fire(eventname, event) {\n        super.fire(eventname, event)\n        if (eventname == 'submit' && this.onsubmit) {\n            this.onsubmit(event);\n            this.hide()\n        }\n    }\n\n    render() {\n        \/\/this.dialogModal.focus()\n    }\n\n    set resourcetype(rt) {\n        this._resourcetype = rt\n        this.update('this.resourcetype')\n    }\n\n    get resourcetype() {\n        return this._resourcetype\n    }\n\n    show() {\n        this.visible = true\n        this.dialogModal.focus()\n    }\n\n    hide() {\n        this.visible = false\n        \/\/ TODO: Should be removed from DOM\n    }\n\n    set visible(v) {\n        this._visible = v\n        this.update('this.visible')\n    }\n\n    get visible() {\n        return this._visible\n    }\n\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n\n    get label() {\n        return this._label\n    }\n}"},"name":"dialog","title":"Di\u00e1logo modal","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.button"},{"name":"form.resource","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"html","name":"include"}],"extends_resource":null},"dropdown":{"id":966,"parameters":[{"name":"displaytext","title":"Mostrar texto","type":"string","documentation":null,"required":null,"options":[],"title_translated":"Anzeigetext","documentation_translated":""},{"name":"label","title":"Etiqueta","type":"string","documentation":null,"required":null,"title_translated":"Feldbeschriftung","documentation_translated":""},{"name":"options","title":"Opciones","type":"array","options":{"suffix":"USD","resourcetype":"namevalue"},"title_translated":"Optionen","documentation_translated":""},{"name":"multiple","title":"M\u00faltiples","type":"boolean","documentation":"Si es verdadero, el usuario puede seleccionar varios elementos.","required":null,"title_translated":"Mehrere","documentation_translated":"Wenn wahr, kann der Benutzer mehrere Elemente ausw\u00e4hlen."},{"name":"default","title":"Por defecto","type":"boolean","documentation":"Tiene una opci\u00f3n por defecto (Por favor, seleccione...).","required":null,"title_translated":"Standard oder Standardwert","documentation_translated":"Hat eine Standardoption (Bitte ausw\u00e4hlen...)."},{"name":"datasource","title":"Fuente de datos","type":"tagtype","documentation":null,"readonly":false,"required":false,"title_translated":"Datenquelle","documentation_translated":""},{"name":"translate_options","title":"Traducir las opciones","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Optionen \u00fcbersetzen","documentation_translated":""},{"name":"sort","title":"Opciones de clasificaci\u00f3n","type":"boolean","documentation":"","readonly":false,"required":false,"title_translated":"Sortieroptionen","documentation_translated":""}],"implementation":{"html":"<div class=\"form-element-container {this.class}\">\r\n    <div class=\"dropdown \">\r\n        <label class=\"form-label\" if=\"this.label !== undefined\">{translate(this.label)}<\/label>\r\n        <div element=\"dropdownform\" (blur)=\"tag.handleBlur(event)\" (focus)=\"tag.handleFocus(event)\"\r\n            class=\"form-element dropdown-form-element {tag.itemListVisible ? 'focus' : ''} {tag.chosenItems.length == 0 ? 'default-option' : ''}\"\r\n            tabindex=\"0\" (click)=\"tag.toggleOptions()\" (keydown)=\"tag.elementKeydown(event)\">\r\n            <span class=\"dropdown-down\">\u25be<\/span> {tag.getChosenItems()}\r\n        <\/div>\r\n        <div class=\"itemlist-container\">\r\n            <div (mousedown)=\"tag.handleMousedown(event)\" element=\"itemlist\"\r\n                class=\"{tag.itemListVisible ? 'dropdown-options dropdown-options-visible' : 'dropdown-options '}\"\r\n                for=\"opt of this.options\">\r\n                \r\n                <div (click)=\"this.clickedOption(opt)\"\r\n                    class=\"dropdown-option {opt.isPlaceholder then 'dropdown-placeholder'}\">{opt.name}<\/div>\r\n            <\/div>\r\n        <\/div>\r\n\r\n        <input type=\"hidden\" value=\"{this.chosenItems.length > 0 then this.chosenItems[0].value}\" name=\"{this.name}\" \/>\r\n        <div class=\"clear\"><\/div>\r\n        <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\r\n    <\/div>\r\n<\/div>","css":".form-element-container {\r\n    margin-top: 16px;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.dropdown {\r\n\twidth: auto;\r\n\t\r\n\t-webkit-user-select: none;\r\n    display: inline-block;\r\n}\r\n\r\n.dropdown label {\r\n    margin-bottom: 4px;\r\n    display: block;\r\n}\r\n\r\n.clear {\r\n\tclear: both;\r\n}\r\n\r\n.default-option {\r\n\tcolor: #A9A9A9;\r\n}\r\n\r\n\r\n\r\n.itemlist-container {\r\n\tposition: relative\r\n}\r\n\r\n.dropdown-form-element {\r\n\twidth: auto;\r\n\tborder: 1.6px solid black;\r\n\theight: auto;\r\n\tborder-radius: 6px;\r\n\tpadding-left: 16px;\r\n\tpadding-right: 10px;\r\n\tpadding-top: 9px;\r\n\tpadding-bottom: 8px;\r\n\toutline: 0;\r\n\tcursor: pointer;\r\n    background: #f3f3f3;\r\n}\r\n\r\n.dropdown-form-element.focus {\r\n    border-bottom-right-radius: 0px;\r\n    border-bottom-left-radius: 0px;\r\n    border-bottom: 0px;\r\n}\r\n\r\n.dropdown-placeholder {\r\n\tcolor: gray;\r\n}\r\n\r\n.dropdown-options {\r\n\tz-index: 1010;\r\n\tdisplay: none;\r\n    width: auto;\r\n\ttop: 0px;\r\n\tmax-height: 250px;\r\n\tposition: relative;\r\n\tbackground: white;\r\n\tborder: 1.6px solid black;\r\n\tpadding-top: 5px;\r\n\tpadding-bottom: 5px;\r\n\toverflow-y: scroll;\r\n\tcursor: pointer;\r\n    border-bottom-left-radius: 8px;\r\n    border-bottom-right-radius: 8px;\r\n    min-width: calc(100% - 3px);\r\n}\r\n\r\n.dropdown-options-visible {\r\n\tdisplay: block;\r\n}\r\n\r\n.dropdown-option {\r\n\twidth: auto;\r\n\tpadding: 8px;\r\n\tpadding-left: 10px;\r\n\tpadding-right: 10px;\r\n    border: 1px solid transparent;\r\n    color: black;\r\n}\r\n\r\n.dropdown .dropdown-option:hover {\r\n\tbackground: #f0f0f0;\r\n}\r\n\r\n.dropdown .dropdown-option.focus {\r\n\tbackground: #2e88ce;\r\n\tcolor: white;\r\n    \r\n}\r\n\r\n.dropdown-down {\r\n\tfloat: right;\r\n\tcolor: black;\r\n\tmargin-left: 16px;\r\n    position: relative;\r\n    top: -2px;\r\n}\r\n\r\n.dropdown-option.selected::before {\r\n\tcontent: \"\u2713 \";\r\n\tcolor: #499BE7;\r\n}\r\n\r\n.dropdown-option.selected.focus::before {\r\n\tcontent: \"\u2713 \";\r\n\tcolor: white;\r\n}\r\n\r\n.option-info {\r\n    color: #777;\r\n}","javascript":"class Dropdown extends RCBaseFormElement {\r\n    setup() {\r\n        this.default = true\r\n        this.itemtag = 'rc.dropdown.text'\r\n        this.sort = true\r\n    }\r\n\tinit() {\r\n\t\tthis.searchOptionText = '';\r\n\t\tif (!this.chosenItems)\r\n\t\t\tthis.chosenItems = []\r\n\t\tif (!this.stdtext)\r\n\t\t\tthis.stdtext = translate('please_select')\r\n\t}\r\n\tsetValues(values) {\r\n\t\tif (values.options !== undefined) {\r\n\t\t\tthis._options = values.options;\r\n\t\t}\r\n\t\tif (values.value != undefined) {\r\n\t\t\tthis._value = values.value;\r\n\t\t}\r\n\t}\r\n\tset stdtext(s) {\r\n\t\tthis._stdtext = s\r\n\t\tthis.update('this.getChosenItems')\r\n\t}\r\n\tget stdtext() {\r\n\t\treturn this._stdtext\r\n\t}\r\n\tset name(n) {\r\n\t\tthis._name = n\r\n\t\tthis.update('this.name')\r\n\t}\r\n\tget name() {\r\n\t\treturn this._name\r\n\t}\r\n\tset class(value) {\r\n\r\n\t\tthis._class = value;\r\n\t\tthis.update('this.class');\r\n\t}\r\n\tget class() {\r\n\t\treturn this._class;\r\n\t}\r\n    set itemtag(it) {\r\n        this._itemtag = it\r\n        this.update('this.itemtag')\r\n    }\r\n    get itemtag() {\r\n        return this._itemtag\r\n    }\r\n\tset value(value) {\r\n\t\tif (value === null || value === undefined) {\r\n\t\t\tthis._value = null;\r\n\r\n\t\t\tthis.chosenItems = []\r\n\t\t\tthis.update('tag.getChosenItems')\r\n\t\t\tthis.update('tag.chosenItems')\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\/\/this._value = value;\r\n\t\tif (!this.options && !this.tempValue) {\r\n\t\t\tthis.tempValue = value;\r\n\t\t\treturn;\r\n\t\t} if (!this.options) return;\r\n\t\tthis.tempValue = undefined;\r\n\t\tif (this.multiple || Array.isArray(value)) {\r\n\t\t\tthis.chosenItems = [];\r\n\t\t\tfor (let valueItem of value) {\r\n\t\t\t\tlet foundItem = this.options.findIndex(option => option.value == valueItem);\r\n\t\t\t\tthis.chosenItems.push(this.options[foundItem]);\r\n\t\t\t}\r\n\t\t\tthis._value = this.chosenItems.map((option) => option.value);\r\n\t\t} else {\r\n\t\t\tlet foundItem = this.options.findIndex(option => option.value == value);\r\n\t\t\tif (foundItem == -1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.chosenItems = [this.options[foundItem]]\r\n\t\t\tlet foundItems = this.chosenItems.map((option) => option && option.value);\r\n\t\t\tif (foundItems)\r\n\t\t\t\tthis._value = foundItems[0];\r\n\t\t}\r\n\t\tthis.update('tag.getChosenItems')\r\n\t\tthis.update('tag.chosenItems')\r\n\t}\r\n\tget value() {\r\n\t\treturn this._value;\r\n\t}\r\n\tset options(options) {\r\n        if (options && this.translate_options) {\r\n            options = options.map( option => Object.assign({},option,{name:translate(option.name)}))\r\n            let translatedOptions = Object.assign({},options)\r\n\r\n        }\r\n        this._sorted = false\r\n\t\tthis._options = options;\r\n\t\tif (this.tempValue !== undefined) {\r\n\t\t\tthis.value = this.tempValue;\r\n\t\t} else {\r\n            this.value = this._value\r\n        }\r\n\t\tthis.update('this.options')\r\n\t}\r\n\tget options() {\r\n        this.sortOptions()\r\n\t\tif (this.default && this._options) {\r\n\t\t\treturn [{ name: this.stdtext, value: null, isPlaceholder: true }, ...this._options]\r\n\t\t}\r\n\t\treturn this._options;\r\n\t}\r\n    set datasource(ds) {\r\n        if (this._datasource != ds) {\r\n            this._datasource = ds \r\n            GlobalResource.call(ds).then(result=> {\r\n                this.options = result\r\n            })\r\n        }\r\n        \r\n    }\r\n    get datasource() {\r\n        return this._datasource\r\n    }\r\n\tgetChildIdx(option) {\r\n\t\treturn this.options.findIndex((o) => o == option)\r\n\t}\r\n\tgetOptionElement(option) {\r\n\t\tlet childIdx = this.getChildIdx(option);\r\n\t\tvar children = this.itemlist.children\r\n\t\treturn children[childIdx];\r\n\t}\r\n\trender(browserElement) {\r\n\t\tif (this.multiple) {\r\n\t\t\tfor (let selectedOption of this.chosenItems) {\r\n\t\t\t\tthis.getOptionElement(selectedOption).classList.add('selected');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn browserElement;\r\n\t}\r\n\tchooseOption(option) {\r\n\t\tthis.focusOption(option, false)\r\n\t\tif (this.multiple) {\r\n            if (!option.isPlaceholder) {\r\n                let alreadySelectedItem = this.chosenItems.some((selOption) => selOption.value === option.value);\r\n                if (alreadySelectedItem) {\r\n                    this.getOptionElement(option).classList.remove('selected');\r\n                    this.chosenItems = this.chosenItems.filter((selOption) => selOption.value !== option.value);\r\n                } else {\r\n                    this.chosenItems.push(option);\r\n                    var childEl = this.getOptionElement(option).classList.add('selected');\r\n                }\r\n                this._value = this.chosenItems.map((option) => option.value);\r\n            }\r\n\t\t} else {\r\n            if (option.isPlaceholder) {\r\n                this.value = null;\r\n                this.chosenItems = []\r\n            } else {\r\n                this._value = option.value;\r\n                this.chosenItems = [option];\r\n            }\r\n            this.hideOptions();\r\n            this.focusOption(null)\r\n\t\t}\r\n\t\tthis.unsetSearch()\r\n\t\tthis.touched();\r\n\t\tthis.update('tag.getChosenItems')\r\n\t\tthis.update('tag.chosenItems')\r\n\t\tthis.fire('change', this.value)\r\n\t}\r\n\telementKeydown(event) {\r\n\t\tif (this.readonly) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (event.metaKey  || event.ctrlKey) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (event.code == \"Enter\") {\r\n\t\t\tif (!this.itemListVisible) {\r\n\t\t\t\tthis.showOptions();\r\n\t\t\t} else if (!this.chooseFocusedOption()) {\r\n\t\t\t\tthis.toggleOptions();\r\n\t\t\t}\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t}\r\n\t\tthis.handleNavKeys(event);\r\n\t\tif (event.key.length === 1 &&\r\n\t\t\t(event.key != ' ' || this.searchOptionText.length > 0)) {\r\n\t\t\tthis.performSearch(event);\r\n\t\t}\r\n\t\tif (event.code == \"Space\") {\r\n\t\t\tif (this.searchTimer == null) {\r\n\t\t\t\tthis.toggleOptions();\r\n\t\t\t}\r\n\t\t\tthis.avoidScrollEvent(event);\r\n\t\t}\r\n\t\tif (event.code == \"Escape\") {\r\n\t\t\tthis.hideOptions();\r\n\t\t}\r\n\t\tif (event.code == \"Tab\") {\r\n\t\t\tthis.chooseFocusedOption();\r\n\t\t\tthis.hideOptions();\r\n\t\t}\r\n\t}\r\n    set sort(s) {\r\n        this._sort = s\r\n        this.sortOptions()\r\n    }\r\n    get sort() {\r\n        return this._sort\r\n    }\r\n    sortOptions() {\r\n        if (this.sort && this._options && !this._sorted) {\r\n            this._options.sort((a, b) => a.name?.localeCompare(b.name));\r\n            this._sorted = true\r\n        }\r\n    }\r\n\tremoveFocusedElement() {\r\n\t\tif (this.focusedElement) {\r\n\t\t\tthis.focusedElement.classList.remove('focus')\r\n\t\t\tthis.focusedElement.innerHTML = this.focusedOption.name\r\n\t\t\tthis.focusedElement = null;\r\n\t\t}\r\n\t}\r\n\tfocusOption(option, scrollToTop = true) {\r\n\t\tthis.removeFocusedElement();\r\n\t\tif (this.itemlist != null && option != null) {\r\n\t\t\tvar childEl = this.getOptionElement(option);\r\n\t\t\tif (!childEl) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (scrollToTop) {\r\n\t\t\t\tthis.itemlist.scrollTop = childEl.offsetTop\r\n\t\t\t} else {\r\n\t\t\t\tthis.scrollElementVisible(childEl)\r\n\t\t\t}\r\n\t\t\tchildEl.classList.add('focus');\r\n\t\t\tif (this.multiple && this.multipleEl) {\r\n\t\t\t\tthis.multipleEl.nativeElement.focus();\r\n\t\t\t}\r\n\t\t\tthis.focusedElement = childEl\r\n\r\n\t\t\tlet idx = option.name.toLowerCase().indexOf(this.searchOptionText)\r\n\t\t\tlet boldStr = '';\r\n\t\t\tboldStr += option.name.substr(0, idx);\r\n\t\t\tboldStr += '<b>'\r\n\t\t\tboldStr += option.name.substr(idx, this.searchOptionText.length)\r\n\t\t\tboldStr += '<\/b>'\r\n\t\t\tboldStr += option.name.substr(idx + this.searchOptionText.length)\r\n\t\t\tthis.focusedElement.innerHTML = boldStr\r\n\t\t}\r\n\t\tthis.focusedOption = option;\r\n\t}\r\n\ttouched() {\r\n\t\tthis._touched = true;\r\n\t}\r\n\tgetOptionFromTextSearch() {\r\n\t\tvar foundItem = null;\r\n\t\tif (this.searchOptionText.length > 0) {\r\n\t\t\tif (this.multiple) {\r\n\t\t\t\tthis.showOptions();\r\n\t\t\t}\r\n\t\t\tthis.options.forEach((option) => {\r\n\t\t\t\tif (foundItem == null) {\r\n\t\t\t\t\tif (option.name.toLowerCase().startsWith(this.searchOptionText) && !option.isPlaceholder) {\r\n\t\t\t\t\t\tfoundItem = option;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (foundItem == null) {\r\n\t\t\t\tthis.options.forEach((option) => {\r\n\t\t\t\t\tif (foundItem == null) {\r\n\t\t\t\t\t\tif (option.name.toLowerCase().includes(this.searchOptionText) && !option.isPlaceholder) {\r\n\t\t\t\t\t\t\tfoundItem = option;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn foundItem;\r\n\t}\r\n\tunsetSearch() {\r\n\t\tthis.cancelTimer()\r\n\t\tthis.searchOptionText = ''\r\n\t\tthis.searchTimer = undefined\r\n        \r\n\t\tif (this.focusedElement && this.focusedOption)\r\n\t\t\tthis.focusedElement.innerHTML = this.focusedOption.name\r\n\t}\r\n\tcancelTimer() {\r\n\t\tif (this.searchTimer !== undefined) {\r\n\t\t\twindow.clearTimeout(this.searchTimer)\r\n\t\t\tthis.searchTimer = undefined\r\n\t\t}\r\n\t}\r\n\thideOptions() {\r\n\t\tthis.itemListVisible = false;\r\n\t\tthis.update('tag.itemListVisible')\r\n\t}\r\n\tshowOptions() {\r\n\t\tif (!this.itemListVisible) {\r\n\t\t\tthis.itemListVisible = true;\r\n\t\t\tthis.update('tag.itemListVisible');\r\n\t\t\tthis.removeFocusedElement();\r\n\t\t\tif (this.chosenItems[0])\r\n\t\t\t\tthis.focusOption(this.chosenItems[0]);\r\n\t\t\telse\r\n\t\t\t\tthis.itemlist.scrollTop = 0;\r\n\t\t}\r\n\t}\r\n\tperformSearch(event) {\r\n\t\tthis.searchOptionText += event.key.toLowerCase();\r\n\t\tthis.cancelTimer();\r\n\t\tlet foundItem = null;\r\n\t\twhile (this.searchOptionText.length > 0 && foundItem === null) {\r\n\t\t\tfoundItem = this.getOptionFromTextSearch();\r\n\t\t\tif (foundItem === null) {\r\n\t\t\t\tthis.searchOptionText = this.searchOptionText.substr(1)\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (foundItem !== null) {\r\n\t\t\tif (!this.itemListVisible) {\r\n                \r\n\t\t\t\tthis.chosenItems = [foundItem];\r\n                \r\n\t\t\t\tthis.value = foundItem.value;\r\n\t\t\t\tthis.touched();\r\n\t\t\t\tthis.update('tag.getChosenItems')\r\n\t\t\t\tthis.update('tag.chosenItems')\r\n\t\t\t\tthis.fire('change', this.value)\r\n\t\t\t} else {\r\n\t\t\t\tthis.searchTimer = window.setTimeout(function () {\r\n\t\t\t\t\tthis.unsetSearch();\r\n\t\t\t\t\tif (!this.multiple && (this.chosenItems.length == 1) && !this.itemListVisible) {\r\n\t\t\t\t\t\tthis.chooseOption(this.chosenItems[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this), 2000);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.focusOption(foundItem);\r\n\t}\r\n\tgetChosenItems() {\r\n        if (this.displaytext) {\r\n            return this.displaytext\r\n        }\r\n\t\tif (this.multiple) {\r\n\t\t\treturn this.chosenItems && this.chosenItems.length > 0 ? this.chosenItems.map((option) => option.name).join(', ') : this.stdtext;\r\n\t\t} else {\r\n\t\t\treturn this.chosenItems && this.chosenItems.length > 0 ? (this.chosenItems[0].name) : this.stdtext;\r\n\t\t}\r\n\t}\r\n\tchooseFocusedOption() {\r\n\t\tif (this.itemlist != null) {\r\n\t\t\tif (this.focusedOption) {\r\n\t\t\t\tthis.chooseOption(this.focusedOption)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\thandleBlur(event) {\r\n\t\tthis.touched();\r\n\t\tthis.hasfocus = false\r\n\t\twindow.setTimeout(function () {\r\n\t\t\tif (!this.hasfocus) {\r\n\t\t\t\tthis.hideOptions();\r\n\t\t\t}\r\n\t\t}.bind(this), 300)\r\n\t}\r\n\thandleFocus(event) {\r\n\t\tthis.hasfocus = true;\r\n\t\tthis.update('tag.hasfocus')\r\n\t}\r\n\tavoidScrollEvent(event) {\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\t}\r\n\ttoggleOptions() {\r\n\t\tif (this.itemListVisible !== true) {\r\n\t\t\tthis.showOptions()\r\n\t\t\tthis.dropdownform.focus()\r\n\t\t} else {\r\n\t\t\tthis.hideOptions();\r\n\t\t}\r\n\t}\r\n    focus() {\r\n        this.dropdownform.focus()\r\n    }\r\n\tscrollElementVisible(element) {\r\n\t\tif (this.itemlist.scrollTop > element.offsetTop) {\r\n\t\t\tthis.itemlist.scrollTop = element.offsetTop;\r\n\t\t}\r\n\t\tlet selectedElementVisibleTop = element.offsetTop - this.itemlist.offsetHeight + element.offsetHeight;\r\n\t\tif (this.itemlist.scrollTop < selectedElementVisibleTop) {\r\n\t\t\tthis.itemlist.scrollTop = selectedElementVisibleTop;\r\n\t\t}\r\n\t}\r\n\thandleNavKeys(event) {\r\n\t\tif (event.code == \"ArrowUp\" || event.code == \"ArrowDown\") {\r\n\t\t\tthis.unsetSearch();\r\n\t\t\tif (this.itemlist != null) {\r\n\t\t\t\tvar children = this.itemlist.children;\r\n\t\t\t\tlet selectedChildIdx = -1;\r\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t\tvar childEl = children[i];\r\n\t\t\t\t\tif (childEl.classList.contains('focus')) {\r\n\t\t\t\t\t\tselectedChildIdx = i;\r\n\t\t\t\t\t\tchildEl.classList.remove('focus')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t\tvar childEl = children[i];\r\n\t\t\t\t\tif (((event.code == \"ArrowDown\") && ((selectedChildIdx + 1) == i)) || ((event.code == \"ArrowUp\") && ((selectedChildIdx - 1) == i))) {\r\n                        \/\/if (i != children.length-1) {\r\n\t\t\t\t\t\tthis.focusOption(this.options[i], false)\r\n                        \/\/}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n                if ((selectedChildIdx == children.length-1) && (event.code == \"ArrowDown\")) {\r\n                    this.focusOption(this.options[children.length-1], false);\r\n                }\r\n                var upperIdx = this.default ? 1 : 0;\r\n                if ((selectedChildIdx <= upperIdx) && (event.code == \"ArrowUp\") || (this.default == true && selectedChildIdx == 0) || selectedChildIdx == -1) {\r\n                    this.focusOption(this.options[this.default ? 1 : 0], false);\r\n                }\r\n\t\t\t\tthis.avoidScrollEvent(event);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.update('tag.searchOptionText')\r\n\t}\r\n\tclickedOption(option) {\r\n\t\tthis.unsetSearch();\r\n\t\tthis.chooseOption(option)\r\n\t\tthis.dropdownform.focus();\r\n\t\tthis.hasfocus = true;\r\n        if (option.fn) {\r\n            option.fn(option)\r\n        }\r\n\t}\r\n\thandleMousedown(event) {\r\n\t\tthis.dropdownform.focus();\r\n\t\tthis.hasfocus = true;\r\n\t\tevent.stopPropagation();\r\n\t\tevent.preventDefault();\r\n\t}\r\n}"},"name":"dropdown","title":"Elemento de formulario desplegable","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"},{"version":"1.0.0","type":"tag","name":"translate"}],"extends_resource":null},"editor.call":{"id":331,"parameters":[],"implementation":{"html":"<div>\n\t<h1>Webservice {this.resource}<\/h1>\n\t<pre>\n\t\t{this.result}\n\t<\/pre>\n<\/div>","javascript":"class CallPreview extends Tag {\n\tset resource(r) {\n\t\tthis._resource = r\n\t}\n\tget resource() {\n\t\treturn this._resource\n\t}\n\tset parameters(p) {\n\t\tthis._parameters = p\n\t}\n\tget parameters() {\n\t\treturn this._parameters\n\t}\n\tcall() {\n\t\tGlobalResource.call(this.resource,this.parameters).then(result => {\n\t\t\tthis.result = JSON.stringify(result, null, 4)\n\t\t\tthis.update('this.result')\n\t\t})\n\t}\n}"},"name":"editor.call","title":"Llamar al servicio web","type":"tag","extends_resource":""},"editor.css":{"id":735,"parameters":[],"implementation":{"css":""},"name":"editor.css","title":"Editor CSS","type":"tag","extends_resource":null},"editor.defaults":{"id":662,"parameters":[{"name":"resourcename","title":"Nombre del recurso","type":"tagtype","documentation":null,"readonly":false,"required":false}],"implementation":{"html":"<h1>Por defecto<\/h1>\n\n<div if=\"!!this.resourcename\">\n    <form.resource showdocumentation=\"{window.helpMode$ && helpMode$}\" (submit)=\"this.saveDefaults(event)\" submitlabel=\"Guardar\" resourcetype=\"server:{this.resourcename}\" value=\"{this.defaults}\"><\/form.resource>\n<\/div>","javascript":"class EditorDefaults extends Tag {\n    set resourcename(r) {\n        this._resourcename = r\n        this.update('this.resourcename')\n        if (r) {\n            resource.action('get_defaults',  {resourcename:r} ).then(configuration => {\n                this.setAttribute('defaults', configuration)\n            })\n        }\n    }\n    get resourcename() {\n        return this._resourcename\n    }\n    saveDefaults(data) {\n        resource.action('save_defaults', { resourcename: this.resourcename, defaults: data })\n    }\n}"},"name":"editor.defaults","title":"Valores por defecto del editor","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.resource"}],"extends_resource":null},"editor.dependencies":{"id":62,"parameters":[{"name":"dependencies","type":"array","documentation":"El array con las dependencias...","title":"Dependencias","title_translated":"Dependencies","documentation_translated":"The array with the dependencies..."}],"implementation":{"html":"<div class=\"editor-dependencies\">\n    <h1>Dependencias<\/h1>\n\t<p if=\"this.dependencies.length == 0\">A\u00fan no ha a\u00f1adido ninguna dependencia.<\/p>\n\t<table class=\"table\" if=\"this.dependencies.length > 0\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Recursos<\/th>\n\t\t\t\t<th>Versi\u00f3n<\/th>\n\t\t\t\t<th>tipolog\u00eda<\/th>\n\t\t\t\t<th>Acciones<\/th>\n\t\t\t<\/tr>\n\t\t<\/thead>\n\t\t<tbody for=\"dependency of this.dependencies\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<dropdown (change)=\"this.updateResource(dependency,element.value)\" options=\"{this.options}\" value=\"{dependency.name}\"><\/dropdown>\n\t\t\t\t<\/td>\n\t\t\t\t<td>\n\t\t\t\t\t<form.text (change)=\"this.updateVersion(dependency,element.value)\" value=\"{dependency.version}\"><\/form.text>\n\t\t\t\t<\/td>\n\t\t\t\t<td>\n\t\t\t\t\t{dependency.type ?  translate('type_'+dependency.type.replaceAll('-','_')) : ''}\n\t\t\t\t<\/td>\n\t\t\t\t<td>\n                    <a (click)=\"this.deleteDependency( dependency_index )\" ><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\"\/><\/a> \n\t\t\t\t<\/td>\n\t\t\t<\/tr>\n\t\t<\/tbody>\n\t<\/table>\n\n\t<form.button (click)=\"this.addDependency()\" label=\"A\u00f1adir dependencia\"><\/form.button>\n<\/div>","css":".editor-dependencies .dropdown {\n    display: inline-block;\n    margin-bottom: 0px;\n\tmargin-top:0px;\n    width: 100%;\n}\n\n.editor-dependencies .form-element-container {\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\n.editor-dependencies .dropdown-form-element {\n    padding-left: 0px;\n}\n\n.editor-dependencies table.table input {\n    background: transparent;\n    color: white;\n}\n\n.editor-dependencies .form-text {\n    display: inline-block;\n    width: 150px;\n    margin-left: 16px;\n\tmargin: 0px;\t\n}\n\n.editor-dependencies .form-element {\n\tbackground: #bfc6ce;\n\tborder-color: #bfc6ce;\n}\n\n.editor-dependencies .table .td {\n\tpadding: 0px;\n}\n\n.editor-dependencies .form-element {\n\tborder:none;\n    background: transparent;\n    color: white;\n}\n.editor-dependencies .dropdown-options {\n\ttop: 5px;\n    left: -8px;\n    max-width: 383px;\n    width: calc( 100% + 9px );\n\tborder:4px outset;\n\tbackground: #efefef;\n    position: absolute;\n}\n\n.editor-dependencies .focus {\n\t\n}\n\n.editor-dependencies .dropdown-option.focus {\n\tbackground: #4682e2;\n\tcolor: white;\n}\n\n.editor-dependencies .dropdown-down {\n    color: white;\n}","javascript":"class EditorDependencies extends Tag {\n    setup() {\n        this._dependencies = []\n    }\n    set tags(tags) {\n        this._tags = tags\n        if (tags) this.options = tags.map((v, i) => { return { name: v.title + ' ('+v.name+')', info: '(' + v.type + ')', value: v.name } });\n        this.update('this.options')\n    }\n\n    get tags() {\n        return this._tags\n    }\n\n    set dependencies(d) {\n        if (d === null || d === undefined || d == '') {\n            d = []\n        }\n        try {\n            let dependencies = d.map(v => { return Object.assign(v,{'name':v.name }) })\n\t\t\tthis.sortDependencies(dependencies)\n            this._dependencies = dependencies\n        } catch(error) {\n            console.error('editor:dependencies',error)\n        }\n        this.update('this.dependencies')\n    }\n\n    get dependencies() {\n        return this._dependencies\n    }\n\n\tsortDependencies(d) {\n\t\td.sort(function(a, b){ \n\t\t\tif(a.name < b.name) return -1;\n\t\t\tif(a.name > b.name) return 1;\n\t\t\treturn 0;\n\t\t});\n\t}\n\n    deleteDependency(idx) {\n        this.dependencies.splice(idx,1)\n        this.update('this.dependencies')\n        this.resourceChanged()\n    } \n\n    resourceChanged() {\n        this.fire('change',JSON.stringify(this.dependencies))\n    }\n\n    addDependency() {\n        if (!this.dependencies) {\n            this._dependencies = []\n        }\n        this.dependencies.push({version:'1.0.0'})\n        this.updateAppended('this.dependencies')\n        this.resourceChanged();\n    }\n\n\n    getDependencyType(resName) {\n        let idx = this.tags.findIndex((t) => { return t.name == resName })\n        if (idx > -1 && this.tags[idx]) {\n            return this.tags[idx].type\n        }\n        return ''\n    }\n\n    updateResource(dependency,newResource) {\n        dependency.type = this.getDependencyType(newResource)\n\t\tdependency.name = newResource\n        let idx = this.dependencies.findIndex((t) => { return t.name == newResource })\n        this.resourceChanged();\n        this.updateItem('this.dependencies',idx)\n    }\n\n    updateVersion(dependency,newVersion) {\n        dependency.version = newVersion\n        this.resourceChanged();\n    }\n}"},"name":"editor.dependencies","title":"Dependencias del editor","type":"tag","dependencies":[{"name":"dialog","type":"tag","version":"1.0.0"},{"name":"editor.addresource","type":"tag","version":"1.0.0"},{"name":"user","type":"object","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"login"}],"extends_resource":null},"form.livesearch":{"id":127,"parameters":[],"implementation":{"html":"<div class=\"dropdown form-element-container {this.class} livesearch\" >\n\t<label if=\"this.label !== undefined\">{this.label}<\/label>\n\t<div \telement=\"dropdownform\" \n\t\t\t(blur)=\"tag.handleBlur(event);this.hideOptions()\" \n\t\t\t(focus)=\"tag.handleFocus(event);\" \n\t\t\tclass=\"form-element dropdown-form-element {tag.itemListVisible ? 'focus' : ''} {tag.chosenItems.length == 0 ? 'default-option' : ''}\"\n\t \t\ttabindex=\"0\"\n\t\t\t(keydown)=\"this.doKeypress(event);this.handleNavKeys(event);\"\n\t\t\t(keypress)=\"this.doKeyHandle(event)\"\n\t\t\t(click)=\"this.clickedElement(event)\">\n\t\t<span class=\"dropdown-down\">\u25be<\/span> \n\t\t<div \telement=\"searchElement\" \n\t\t\t\tclass=\"search\" \n\t\t\t\tspellcheck=\"false\" \n                placeholder=\"Search...\"\n\t\t\t\tcontenteditable=\"true\" \n                tabindex=\"-1\"\n\t\t\t\t(blur)=\"this.hideOptionsSoon()\" \n\t\t\t\t(focus)=\"this.searchFocus()\" \n\t\t\t\t(keyup)=\"this.doKeyHandle(event)\"\n\t\t\t\t(keypress)=\"this.doKeypress(event)\"\n\t\t\t\t(keydown)=\"this.handleNavKeys(event);\"\n\t\t\t\t(input)=\"this.inputChanged(node.innerHTML)\" \n\t\t\t\tclass=\"filter\" \n\t\t\t\ttype=\"text\" \n\t\t\t\tautocomplete=\"off\">&nbsp;<\/div><span style=\"{!!this.searchInput then 'visibility:hidden'}\" class=\"doppelpunkt\">:<\/span> \n                <span for=\"item of this.chosenItems\"><b> {item.title}<\/b><\/span>\n                \n                <\/div>\n\t<div class=\"itemlist-container\">\n\t\t<div \telement=\"itemlist\"\n\t\t\t\t(mousedown)=\"tag.handleMousedown(event)\"\n\t\t\t\telement=\"itemlist\"\n\t\t\t\tclass=\"{tag.itemListVisible ? 'dropdown-options dropdown-options-visible' : 'dropdown-options '}\"\n\t\t\t\tfor=\"option of this.filteredOptions\">\n\t\t\t<div class=\"dropdown-option {option.isPlaceholder then 'dropdown-placeholder'}\" (click)=\"this.clickedOption(option)\">\n\t\t\t\t<img class=\"type-icon\" if=\"!option.isPlaceholder && !!option.type\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/{option.type}.svg\"\/> <b>{option.title}<\/b> <span class=\"option-description-description\"> {option.name} {option.documentation ? option.documentation : ''}<\/span><br\/>\n\t\t\t<\/div>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"clear\"><\/div>\n<\/div>","css":".dropdown {\n\n\t-webkit-user-select: none;\n}\n\n.livesearch .dropdown-option {\n\twhite-space: nowrap;\n}\n\n.option-description {\n\tcolor: gray;\n}\n.dropdown-option.focus img.type-icon{\n    filter: invert(1);\n}\nimg.type-icon {\n        width: 15px;\n    margin-right: 12px;\n    position: relative;\n    top: 2px;\n}\n.livesearch .search {\n\tcolor: gray;\n\tdisplay: inline-block;\n\twidth: fit-content;\n    outline: none;\n\t-webkit-user-select: text;\n    user-select: text;\n}\n\n.option-description-description {\n\tcolor: gray;\n}\n\n.dropdown-placeholder .option-description-description {\n    display: none;\n}\n\n.dropdown-option.focus .option-description-description {\n    color: #ccc;\n}\n\n.livesearch .filter {\n\toutline: none;\n\tborder: none;\n\tbackground: none;\n}\n\n.clear {\n\tclear: both;\n}\n\n.default-option {\n\tcolor: #A9A9A9;\n}\n\n.doppelpunkt {\n\tcolor: gray;\n\tpadding-right: 16px;\n}\n\n.itemlist-container {\n\tposition: relative\n}\n\n.dropdown-form-element {\n\twidth: auto;\n\tborder: 2px solid white;\n\theight: auto;\n\tborder-radius: 8px;\n\tpadding-left: 16px;\n\tpadding-right: 10px;\n\tpadding-top: 8px;\n\tpadding-bottom: 8px;\n\toutline: 0;\n\tcursor: pointer;\n\tbackground:white;\n}\n\n.dropdown-form-element:focus {\n\tborder-color:#4682e2;\n}\n\n.dropdown-placeholder {\n\tcolor: gray;\n}\n\n.livesearch .dropdown-options {\n\tz-index: 1010;\n\tdisplay: none;\n\tmax-width: 100%;\n\twidth: 100%;\n\twidth: calc(100% - 2px);\n\ttop: 0px;\n\tmax-height: 250px;\n\tposition: absolute;\n\tbackground: white;\n\tborder: 1px solid #ccc;\n\tpadding-top: 5px;\n\tpadding-bottom: 5px;\n\toverflow-y: scroll;\n\tcursor: pointer;\n}\n\n.livesearch .dropdown-options-visible {\n\tdisplay: block;\n}\n\n.dropdown-option {\n\twidth: auto;\n\tpadding: 8px;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n}\n\n.dropdown-option:hover {\n\tbackground: #F5F5F5;\n}\n\n.dropdown-down {\n\tfloat: right;\n\tcolor: #555;\n}\n\n.dropdown-option.selected::before {\n\tcontent: \"\u2713\";\n\tcolor: #499BE7;\n}\n\n.option-info {\n    color: #777;\n}","javascript":"class FormLiveSearch extends Tag {\n\tsetup() {\n\t\tthis.valueattribute = 'name'\n        let recentlyViewed = sessionStorage.getItem('recentlyviewed')\n        if (recentlyViewed) {\n            this.recentlyViewed = JSON.parse(recentlyViewed)\n        } else {\n\t\t    this.recentlyViewed = []\n        }\n\t\tthis.options = []\n\t\tthis.filteredOptions = []\n\t}\n\tinit() {\n\t\tthis.default = true\n\t\tthis.searchOptionText = ''\n\t\tif (!this.chosenItems)\n\t\t\tthis.chosenItems = []\n\t\tif (!this.defaulttext)\n\t\t\tthis.defaulttext = '...'\n\t\tthis.updateFilteredOptions()\n\t}\n    clickedElement() {\n        if (document.activeElement != this.searchElement && document.activeElement != this.dropdownform) {\n                this.searchElement.focus();\n        }  else {\n            if (!this.itemListVisible) {\n                this.showOptions()\n            } else {\n                this.hideOptions()\n            }\n        }\n    }\n\tsetValues(values) {\n\t\tif (values.options !== undefined) {\n\t\t\tthis._options = values.options\n\t\t}\n\t\tif (values.value != undefined) {\n\t\t\tthis._value = values.value;\n\t\t}\n\t}\n\tclearRecentlyViewed() {\n\t\tthis.recentlyViewed = []\n\t}\n\tset class(value) {\n\t\tthis._class = value\n\t\tthis.update('this.class')\n\t}\n\tget class() {\n\t\treturn this._class;\n\t}\n\tset valueattribute(v) {\n\t\tthis._valueattribute = v\n\t}\n\tget valueattribute() {\n\t\treturn this._valueattribute\n\t}\n\tset defaultfilter(v) {\n\t\tthis._defaultfilter = v\n\t}\n\tget defaultfilter() {\n\t\treturn this._defaultfilter\n\t}\n    resetSearch() {\n        this.searchElement.innerHTML = ''\n    }\n    deleteRecentlyViewed(name) {\n         this.recentlyViewed = this.recentlyViewed.filter( v => v.name !== name )\n    }\n\taddRecentlyViewed(option) {\n\t\tlet idx = this.recentlyViewed.findIndex( v => v.name == option.name )\n        this.recentlyViewed = this.recentlyViewed.filter( v => v.name != option.name )\n\t\tif (!option.isPlaceholder) {\n\t\t\tthis.recentlyViewed.unshift(option)\n\t\t\tif (this.recentlyViewed.length > 5) {\n\t\t\t\tthis.recentlyViewed.pop()\n\t\t\t}\n            sessionStorage.setItem('recentlyviewed',JSON.stringify(this.recentlyViewed))\n\t\t}\n\t\tthis.updateFilteredOptions()\n\t}\n\tselectSearchElement() {\n\t\tvar doc = document;\n\t\tvar element = this.searchElement\n\t\tif (doc.body.createTextRange) {\n\t\t\tvar range = document.body.createTextRange();\n\t\t\trange.moveToElementText(element);\n\t\t\trange.select();\n\t\t} else if (window.getSelection) {\n\t\t\tvar selection = window.getSelection();\n\t\t\tvar range = document.createRange();\n\t\t\trange.selectNodeContents(element);\n\t\t\tselection.removeAllRanges();\n\t\t\tselection.addRange(range);\n\t\t}\n\t}\n\tsearchFocus() {\n        this.searchElement.focus()\n\t\tthis.showOptions()\n\t\tthis.selectSearchElement()\n\t}\n\tplaceCaretAtEnd(el) {\n\t\tel.focus();\n\t\tif (typeof window.getSelection != \"undefined\"\n\t\t\t&& typeof document.createRange != \"undefined\") {\n\t\t\tvar range = document.createRange();\n\t\t\trange.selectNodeContents(el);\n\t\t\trange.collapse(false);\n\t\t\tvar sel = window.getSelection();\n\t\t\tsel.removeAllRanges();\n\t\t\tsel.addRange(range);\n\t\t} else if (typeof document.body.createTextRange != \"undefined\") {\n\t\t\tvar textRange = document.body.createTextRange();\n\t\t\ttextRange.moveToElementText(el);\n\t\t\ttextRange.collapse(false);\n\t\t\ttextRange.select();\n\t\t}\n\t}\n\n\tinputChanged(value) {\n\t\tthis.searchResults = this.getOptionsFromTextSearch(value)\n\t\tthis.searchInput = value\n\t\tthis.update('this.searchInput')\n\t}\n\tset searchResults(r) {\n\t\tthis._searchResults = r\n\t\tthis.updateFilteredOptions()\n\t}\n\tget searchResults() {\n\t\treturn this._searchResults\n\t}\n\tupdateFilteredOptions() {\n\t\tif (!this.searchResults || this.searchResults.length == 0) {\n\t\t\tthis.filteredOptions = this.getDefaultOptions()\n\t\t} else {\n\t\t\tthis.filteredOptions = this.searchResults\n\t\t}\n\t\tthis.update('this.filteredOptions')\n\t}\n\tset value(value) {\n\t\tif (value === null || value === undefined) {\n\t\t\tthis._value = null;\n\t\t\tthis.chosenItems = []\n\t\t\tthis.update('tag.getChosenItems')\n\t\t\tthis.update('tag.chosenItems.length')\n\t\t\treturn;\n\t\t}\n\n\t\tthis._value = value;\n\t\tif (!this.options && this.tempValue === undefined) {\n\t\t\tthis.tempValue = value;\n\t\t\treturn;\n\t\t} if (!this.options) return;\n\t\tthis.tempValue = undefined;\n\t\tif (this.multiple || Array.isArray(value)) {\n\t\t\tthis.chosenItems = [];\n\t\t\tfor (let valueItem of value) {\n\t\t\t\tlet foundItem = this.options.findIndex(option => option[this.valueattribute] == valueItem);\n\t\t\t\tthis.chosenItems.push(this.options[foundItem]);\n\t\t\t}\n\t\t\tthis._value = this.chosenItems.map((option) => option[this.valueattribute]);\n\t\t} else {\n\t\t\tlet foundItem = this.options.findIndex(option => option[this.valueattribute] == value);\n\t\t\tif (foundItem == -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.chosenItems = [this.options[foundItem]]\n\t\t\tlet foundItems = this.chosenItems.map((option) => option && option[this.valueattribute]);\n\t\t\tif (foundItems)\n\t\t\t\tthis._value = foundItems[0];\n\t\t}\n\t\tthis.update('tag.getChosenItems')\n\t\tthis.update('tag.chosenItems.length')\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset options(options) {\n\t\tthis._options = options;\n\t\tif (this.tempValue !== undefined) {\n\t\t\tthis.value = this.tempValue;\n\t\t}\n\t\tthis.update('this.options')\n\t\tthis.updateFilteredOptions()\n\t}\n\tget options() {\n\t\tif (this.default && this._options) {\n\t\t\treturn [{ name:this.defaulttext, title: this.defaulttext, value: null, isPlaceholder: true }, ...this._options]\n\t\t}\n\t\treturn this._options;\n\t}\n\tfocusSearchEl() {\n\t\tthis.searchElement.focus();\n\n\t}\n\tdoKeyHandle(event) {\n\t\tif (event.code == 'Backspace') {\n\t\t\tthis.focusSearchEl()\n\t\t\tif (document.activeElement !== this.searchElement) {\n\n\t\t\t\t\/\/.selectionStart = this.searchElement.innerHTML.length-1;\n\t\t\t}\n\t\t}\n\t}\n\tdoKeypress(event) {\n\t\tif (this.readonly) {\n\t\t\treturn;\n\t\t}\n\t\tif (event.metaKey) {\n\t\t\/\/\treturn;\n\t\t}\n\n\t\tif (event.code == \"Enter\") {\n\t\t\tif (!this.itemListVisible) {\n\t\t\t\tthis.showOptions();\n\t\t\t} else if (!this.chooseFocusedOption()) {\n\t\t\t\tthis.toggleOptions();\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t} else if (event.code == \"Enter\") {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tthis.chooseFocusedOption()\n\t\t\tthis.hideOptions();\n\t\t\tthis.searchElement.blur();\n\n\t\t\tthis.update('this.getChosenItems')\n        } \/*else if (event.code == \"Space\") {\n\t\t\tif (this.searchTimer == null) {\n\t\t\t\/\/\tthis.toggleOptions();\n\t\t\t}\n\t\t\tthis.avoidScrollEvent(event);\n\t\t}*\/ else if (event.code == \"Escape\") {\n\t\t\tthis.hideOptions();\n\t\t} else if (event.code == \"Tab\") {\n\t\t\tthis.chooseFocusedOption();\n\t\t\tthis.hideOptions();\n\t\t} else if (event.code != 'ArrowDown' && event.code != 'ArrowUp') {\n\t\t\tthis.focusSearchEl()\n\t\t}\n\t}\n\thideOptionsSoon() {\n\t\twindow.setTimeout(function () {\n\t\t\tthis.hideOptions()\n\t\t}.bind(this), 300);\n\t}\n\tgetChildIdx(option) {\n\t\treturn this.filteredOptions.findIndex((o) => o == option)\n\t}\n\tgetOptionElement(option) {\n\t\tlet childIdx = this.getChildIdx(option);\n\t\tvar children = this.itemlist.children\n\t\treturn children[childIdx];\n\t}\n\trender(browserElement) {\n\t\tif (this.multiple) {\n\t\t\tfor (let selectedOption of this.chosenItems) {\n\t\t\t\tthis.getOptionElement(selectedOption).classList.add('selected');\n\t\t\t}\n\t\t}\n\t\tthis.searchResults = this.getOptionsFromTextSearch(this.value)\n\t\tthis.updateFilteredOptions()\n\t\t\/\/return browserElement;\n\t}\n\tchooseOption(option) {\n\t\t\n\t\tthis.focusOption(option, false)\n\t\tif (this.multiple) {\n\t\t\tlet alreadySelectedItem = this.chosenItems.some((selOption) => selOption[this.valueattribute] === option[this.valueattribute]);\n\t\t\tif (alreadySelectedItem) {\n\t\t\t\tthis.getOptionElement(option).classList.remove('selected');\n\t\t\t\tthis.chosenItems = this.chosenItems.filter((selOption) => selOption[this.valueattribute] !== option[this.valueattribute]);\n\t\t\t} else {\n\t\t\t\tthis.chosenItems.push(option);\n\t\t\t\tvar childEl = this.getOptionElement(option).classList.add('selected');\n\t\t\t}\n\t\t\tthis._value = this.chosenItems.map((option) => option[this.valueattribute]);\n\t\t} else {\n\t\t\tthis._value = option[this.valueattribute];\n\t\t\tthis.chosenItems = [option];\n\t\t\tthis.hideOptions();\n\t\t\tthis.focusOption(null)\n\t\t}\n\t\tthis.unsetSearch()\n\t\tthis.touched();\n\t\tthis.update('tag.getChosenItems')\n\t\tthis.update('tag.chosenItems.length')\n\t\tthis.fire('change', this.value)\n\t\tthis.addRecentlyViewed(option)\n\t}\n\telementKeydown(event) {\n\n\n\t\tif (event.key.length === 1 &&\n\t\t\t(event.key == ' ' || this.searchOptionText.length > 0)) {\n\t\t\t\/\/this.performSearch(event);\n\t\t}\n\n\t}\n\tremoveFocusedElement() {\n\t\tif (this.focusedElement) {\n\t\t\tthis.focusedElement.classList.remove('focus')\n\t\t\t\/\/this.focusedElement.innerHTML = this.focusedOption.name\n\t\t\tthis.focusedElement = null;\n\t\t}\n\t}\n\tfocusOption(option, scrollToTop = false) {\n        \n\t\tthis.removeFocusedElement();\n\t\tif (this.itemlist != null && option != null) {\n\t\t\tvar childEl = this.getOptionElement(option);\n\t\t\tif (!childEl) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (scrollToTop) {\n\t\t\t\tthis.itemlist.scrollTop = childEl.offsetTop\n\t\t\t} else {\n\t\t\t\tthis.scrollElementVisible(childEl)\n\t\t\t}\n\t\t\tchildEl.classList.add('focus');\n\t\t\tif (this.multiple && this.multipleEl) {\n\t\t\t\tthis.multipleEl.nativeElement.focus(); \/\/keep the focus on the itemlist, after clicking\n\t\t\t}\n\t\t\tthis.focusedElement = childEl\n\n\t\t\tlet idx = option.name.toLowerCase().indexOf(this.searchOptionText)\n\t\t}\n\t\tthis.focusedOption = option;\n\t}\n\ttouched() {\n\t\tthis._touched = true;\n\t}\n\tgetDefaultOptions() {\n\t\tif (!this.options) {\n\t\t\treturn []\n\t\t}\n\t\tlet matchingItems = this.options.filter( v => {\n\t\t\treturn (v[this.defaultfilter.name] == this.defaultfilter.value);\n\t\t})\n        if (!this.projectresources) {\n            this.projectresources = []\n        }\n\t\treturn [{ name:'recent', title: translate('recently_viewed'), value: null, isPlaceholder: true },...this.recentlyViewed, { name:'project', title: translate('project_files'), value: null, isPlaceholder: true },  ...this.projectresources]\n\t}\n\tgetOptionsFromTextSearch(qry) {\n\t\tif (!this.options) {\n\t\t\treturn []\n\t\t}\n\t\tvar foundItems = [];\n\t\tqry = qry.toLowerCase()\n\t\tif (qry.length > 0) {\n\t\t\tif (this.multiple) {\n\t\t\t\tthis.showOptions();\n\t\t\t}\n\t\t\tthis.options.forEach((option) => {\n\t\t\t\tif ( !option.isPlaceholder  && ((option.type != undefined && option.type.toLowerCase().startsWith(qry)) || (option.name != undefined && option.name.toLowerCase().startsWith(qry))) ) {\n\t\t\t\t\tfoundItems.push(option);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.options.forEach((option) => {\n                if (!option.isPlaceholder) {\n                    if ((option.type != undefined && option.type.toLowerCase().includes(qry)) || (option.name != undefined && option.name.toLowerCase().includes(qry)) || option.title.toLowerCase().includes(qry)) {\n                        if (foundItems.findIndex(v => v === option) == -1) {\n                            foundItems.push(option);\n                        }\n                    }\n                }\n\t\t\t});\n\t\t}\n\t\treturn foundItems;\n\t}\n\tunsetSearch() {\n\t\tthis.cancelTimer()\n\t\tthis.searchOptionText = ''\n\t\tthis.searchTimer = undefined\n\t}\n\tcancelTimer() {\n\t\tif (this.searchTimer !== undefined) {\n\t\t\twindow.clearTimeout(this.searchTimer)\n\t\t\tthis.searchTimer = undefined\n\t\t}\n\t}\n\thideOptions() {\n\t\tthis.itemListVisible = false;\n\t\tthis.update('tag.itemListVisible')\n\t}\n\tshowOptions() {\n\t\tif (!this.itemListVisible) {\n\t\t\tthis.itemListVisible = true;\n\t\t\tthis.update('tag.itemListVisible');\n\t\t\tthis.removeFocusedElement();\n\t\t\tif (this.chosenItems[0])\n\t\t\t\tthis.focusOption(this.chosenItems[0]);\n\t\t\telse\n\t\t\t\tthis.itemlist.scrollTop = 0;\n\t\t}\n\t}\n\t\n\tgetChosenItems() {\n\t\tif (!this.searchElement) {\n\t\t\treturn []\n\t\t}\n\t\tlet prefix = this.searchElement.innerHTML\n\t\tif (this.multiple) {\n\t\t\treturn this.chosenItems && this.chosenItems.length > 0 ? this.chosenItems.map((option) => option.name.replace(prefix, '')).join(', ') : this.defaulttext;\n\t\t} else {\n\t\t\treturn this.chosenItems && this.chosenItems.length > 0 ? this.chosenItems[0].name : this.defaulttext;\n\t\t}\n\t}\n\tchooseFocusedOption() {\n\t\tif (this.itemlist != null) {\n\t\t\tif (this.focusedOption) {\n\t\t\t\tthis.chooseOption(this.focusedOption)\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\thideSoon() {\n\n\n\t}\n\n\thandleBlur(event) {\n\t\tthis.touched()\n\t\tthis.hasfocus = false\n\n\t}\n\thandleFocus(event) {\n\t\tthis.hasfocus = true\n\t\tthis.update('tag.hasfocus')\n\t\t\/\/this.showOptions()\n\t}\n\tavoidScrollEvent(event) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n\ttoggleOptions() {\n\t\tif (this.itemListVisible !== true) {\n\t\t\tif (document.activeElement == this.dropdownform || document.activeElement == this.searchElement) {\n\t\t\t\tthis.showOptions()\n\t\t\t} else {\n\t\t\t\tthis.dropdownform.focus()\n                this.showOptions()\n\t\t\t}\n\t\t} else {\n\t\t\tthis.hideOptions()\n\t\t}\n\t}\n\tscrollElementVisible(element) {\n\t\tif (this.itemlist.scrollTop > element.offsetTop) {\n\t\t\tthis.itemlist.scrollTop = element.offsetTop;\n\t\t}\n\t\tlet selectedElementVisibleTop = element.offsetTop - this.itemlist.offsetHeight + element.offsetHeight;\n\t\tif (this.itemlist.scrollTop < selectedElementVisibleTop) {\n\t\t\tthis.itemlist.scrollTop = selectedElementVisibleTop;\n\t\t}\n\t}\n\thandleNavKeys(event) {\n\t\tif (event.code == \"ArrowUp\" || event.code == \"ArrowDown\") {\n\t\t\tthis.unsetSearch();\n\t\t\tif (this.itemlist != null) {\n\t\t\t\tvar children = this.itemlist.children;\n\t\t\t\tlet selectedChildIdx = -1;\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar childEl = children[i];\n\t\t\t\t\tif (childEl.classList.contains('focus')) {\n\t\t\t\t\t\tselectedChildIdx = i;\n\t\t\t\t\t\tchildEl.classList.remove('focus')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar childEl = children[i];\n\t\t\t\t\tif (((event.code == \"ArrowDown\") && ((selectedChildIdx + 1) == i)) || ((event.code == \"ArrowUp\") && ((selectedChildIdx - 1) == i))) {\n\t\t\t\t\t\tthis.focusOption(this.filteredOptions[i], false)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.avoidScrollEvent(event);\n\t\t}\n\t\tthis.update('tag.searchOptionText')\n\t}\n\tclickedOption(option) {\n        if (option) {\n            this.unsetSearch();\n            this.chooseOption(option)\n            this.dropdownform.focus();\n            this.hasfocus = true;\n            this.hideOptions();\n        }\n\t}\n\thandleMousedown(event) {\n\t\tthis.dropdownform.focus();\n\t\tthis.hasfocus = true;\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\t}\n}"},"name":"form.livesearch","title":"B\u00fasqueda en directo","type":"tag","extends_resource":null},"overview":{"id":47,"parameters":[],"implementation":{"html":"<div if=\"this.tag != undefined\" class=\"overview\">\n    \n    <h1>{this.tag.title_translated}<\/h1>\n    <p>\n        <innerhtml value=\"{this.tag.documentation_translated}\"><\/innerhtml>\n    <\/p>\n    <dt>Nombre<\/dt>\n    <dd><a href=\"\/editor\/resource\/{this.tag.name}\/vscode\">{this.tag.name}<\/a><\/dd>\n    <dt>Vendedor<\/dt>\n    <dd>{this.tag.vendor}<\/dd>\n    <dt>Versi\u00f3n<\/dt>\n    <dd>{this.tag.version}<\/dd>\n    <dt>tipolog\u00eda<\/dt>\n    <dd>{translate('type_'+this.tag.type)}<\/dd>\n    <dt if=\"this.tag.project\">Proyecto<\/dt>\n    <dd if=\"this.tag.project\">{this.tag.project}<\/dd>\n    <dt if=\"this.tag.license\">Licencia<\/dt>\n    <dd if=\"this.tag.license\"><a href=\"https:\/\/www.metayota.com\/page\/rc.license.view\/Metayota-OSS\" target=\"_BLANK\">{this.tag.license}<\/a><\/dd><!-- todo bug with link= -->\n\n    <div if=\"this.implementationTabs != null and this.implementationTabs.length > 0\">\n        <h4>Aplicaci\u00f3n<\/h4>\n        <ul class=\"list\" for=\"implementation of this.implementationTabs\">\n            <li><a link=\"\/editor\/resource\/{this.tag.name}\/vscode#tab={implementation}\"><b>{this.replaceNames(implementation)}<\/b><\/a><\/li>\n        <\/ul>\n    <\/div>\n\n    <testcases tag=\"{this.tag}\"><\/testcases>\n    \n    <div if=\"this.todos && this.todos.length > 0\">\n        <h4>Lista de tareas<\/h4>\n        <p>\n            <ul class=\"list\" for=\"todo of this.todos\">\n                <li><b>{todo.title} <\/b><\/li>\n            <\/ul>\n        <\/p>   \n    <\/div> \n    \n    <div>\n        <div if=\"this.parameters && this.parameters.length > 0\">\n            <h4>Par\u00e1metros<\/h4>\n            <ul class=\"list\" for=\"parameter of this.parameters\">\n                <li><b>{parameter.title_translated} <\/b>({parameter.name}, {parameter.type})\n                <div if=\"parameter.documentation != null\">{parameter.documentation_translated}<\/div><\/li>\n            <\/ul>\n        <\/div>\n    <\/div>\n    \n\n    <div if=\"this.dependencies and this.dependencies.length > 0\">   \n        <rc.dependencies.view dependencies=\"{this.dependencies}\"><\/rc.dependencies.view>\n    <\/div>\n\n<\/div>","css":".overview dt {\n    width: 20%;\n    display: inline-block;\n    margin-top: 8px;\n    margin-bottom: 8px;\n}\n\n.overview dd {\n    width: 65%;\n    display: inline-block;\n    font-weight: bold;\n}","javascript":"class Overview extends Tag {\n\n    set resource(r) {\n        GlobalResource.action('editor','load-resource',{name:r}).then(r=> {\n            this.tag = r\n            this.update('this.tag')\n        })\n    }\n\n    set tag(tag) {\n        this._tag = tag\n        if (tag) {\n            if (typeof tag.parameters == 'object') {\n                this.parameters = tag.parameters\n            }  else if (tag.parameters && tag.parameters != '') {\n                this.parameters = JSON.parse(tag.parameters)\n            } else {\n                this.parameters = null\n            }\n            if (tag.todos && tag.todos != '') {\n                this.todos = JSON.parse(tag.todos)\n            } else {\n                this.todos = []\n            }\n        }\n        this.update('this.parameters');\n        this.update('this.todos');\n\n        if (tag) {\n            resource.action('get_dependencies', tag.name).then(result=> {\n                this.setAttribute('dependencies', result)\n            })\n           \/* Resource.loaded('server:' + tag.name).then(resource => {\n                this.resource = resource\n                this.update('this.resource')\n            })*\/\n        }\n\n        this.updateElementType()\n        this.updateImplementationTabs()\n    }\n    get tag() {\n        return this._tag\n    }\n    set tags(tags) {\n        if (!tags) {\n            return\n        }\n        this._tags = tags\n        this.options = tags.map((v, i) => { return { name: v.name, value: i } });\n        this.update('this.options')\n        this.updateElementType()\n    }\n    get tags() {\n        return this._tags\n    }\n    replaceNames(technologyName) {\n        if (technologyName == 'php') {\n            return 'PHP'; \n        }\n        if (technologyName == 'javascript') {\n            return 'JavaScript';\n        }\n        if (technologyName == 'css') {\n            return 'CSS';\n        }\n        if (technologyName == 'html') {\n            return 'HTML';\n        }\n        if (technologyName == 'design') {\n            return 'Design';\n        }\n        return technologyName;\n    }\n    updateElementType() {\n        if (this.tags && this.tag && this.tags[this.tag.extends_id]) {\n            this.elementType = this.tags[this.tag.extends_id].name\n        } else {\n            this.elementType = '(source)'\n        }\n        this.update('this.elementType')\n    }\n    updateImplementationTabs() {\n        if (this.tag) {\n            if (typeof this.tag.implementation == 'string') {\n                let implementation = JSON.parse(this.tag.implementation)\n                if (implementation) {\n                    this.implementationTabs = Object.keys(implementation)\n                } else {\n                    this.implementationTabs = null\n                }\n            }\n            this.update('this.implementationTabs')\n        }\n    }\n}"},"name":"overview","title":"Recursos","type":"tag","dependencies":[{"version":"1.0.0","name":"object.view","type":"tag"},{"version":"1.0.0","type":"tag","name":"ratings"},{"version":"1.0.0","type":"tag","name":"rc.dependencies.view"},{"version":"1.0.0","type":"tag","name":"rc.parameters.view"},{"name":"vs.codeeditor","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"innerhtml"}],"extends_resource":""},"play":{"id":58,"parameters":[{"name":"resourcename","title":"Nombre del recurso","type":"tagtype","documentation":null,"required":null,"title_translated":"Ressourcenname","documentation_translated":""}],"implementation":{"html":"<div class=\"jj-play\">\n    <h1>Depurar<\/h1>\n    <div if=\"!this.fullscreen\">\n\t    <form.resource showdocumentation=\"{true}\" (submit)=\"this.paramsChanged(event)\"  resourcetype=\"server:{this.rname}\" label=\"Par\u00e1metros\" submitlabel=\"Avance de la actualizaci\u00f3n\" value=\"{this.params}\"><\/form.resource>\n    <\/div>\n\n    <div if=\"this.resource != null\" class=\"jj-play-preview {this.fullscreen !== false ? 'jj-play-preview-fullscreen' : ''}\">\n\t\t<div style=\"height:100%\" if=\"this.resource && this.resource.type == 'tag' && this.rname != 'editor' && this.rname != undefined && this.active\">\n            <iframe style=\"width:100%;height:100%;\" src=\"{editor$.currentServer.http_host != undefined ? editor$.currentServer.http_host : 'https:\/\/www.metayota.com\/'}call\/index?&tag={this.rname}&params={JSON.stringify(this.params)}&language=es\"><\/iframe>\n\t\t<\/div>\n        <div class=\"webservice-result\" if=\"this.webserviceResult != null\">{this.webserviceResult}<\/div>\n    <\/div>\n\n    <div if=\"!this.fullscreen && this.moreinfo === true\">\n        <h2>Actividades recientes<\/h2>\n\n        <div class=\"last-events\">\n            <rc.table columns=\"{[{name:'eventname', width:20, title:'Nombre del evento'},{name:'event',width:80,title:'Datos del evento'}]}\" data=\"{this.lastEvents}\"><\/rc.table>\n        <\/div>\n\n        <h2>Definici\u00f3n de par\u00e1metros<\/h2>\n        <pre>{JSON.stringify(this.parameters, null, 4)}<\/pre>\n        <h2>par\u00e1metro actual<\/h2>\n        <pre>{JSON.stringify(this.params, null, 4)}<\/pre>\n    <\/div>\n    \n<\/div>","css":".jj-play {\n    padding: 64px;\n}\n\n.jj-play-preview {\n    background: white;\n    height: 500px;\n    border: 1px dashed gray;\n}\n\n.jj-play .last-events {\n    max-height: 200px;\n    overflow: scroll;\n}\n\n.jj-play-preview iframe {\n    border: none;\n}\n\n.jj-play-preview-fullscreen {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    overflow: scroll;\n    border: none;\n}\n\n.toggle-fullscreen {\n    position: absolute;\n    right: 16px;\n    top: 16px;\n}\n\n.webservice-result {\n    white-space: pre;\n}","javascript":"class JJPlay extends Tag {\n    setup() {\n        this.active = true\n        this.lastEvents = []\n    }\n    init() {\n        if (window.play_mode) {\n            this.playMode = true\n        }\n        window.play_mode = true\n        window.addEventListener('message', function(e) {\n            if (e.type != 'toast') {\n                this.lastEvents.push( e.data )\n                this.update('this.lastEvents')\n            }\n        }.bind(this))\n    }\n    destroy() {\n        window.play_mode = false\n    }\n\n    eventFired(event) {\n        this.lastEvents.push( event )\n        this.update('this.lastEvents')\n    }\n\n    set parameters(p) {\n        this._parameters = p\n        this.update('this.parameters')\n    }\n\n    get parameters() {\n        return this._parameters\n    }\n\n    set resourcename(r) {\n        if (r) {\n            this.tname = r\n            Tag.registerAndLoad(r)\n        }\n        this.update('this.tname')\n    }\n\n    set resource(r) {\n        this._resource = r\n        if (r) {\n            this.rname = r.name\n            Tag.registerAndLoad(r.name)\n        }\n\n        this.update('this.resource')\n        this.update('this.rname')\n    }\n\n    get resource() {\n        return this._resource\n    }\n\n    submit(p) {\n        return this.submitWithParameters(p)\n    }\n    submitWithParameters(p) {\n        if (this.resource) {\n            if (this.resource.type == 'webservice') {\n\n                return Resource.callText('server:'.this.resource.name, null, p).then(result => {\n                    this.webserviceResult = result\n                    this.update('this.webserviceResult')                    \n                })\n            } else if (this.resource.type == 'tag') {\n                this.params = p\n                this.update('this.params')\n                this.webserviceResult = ''\n                this.update('this.webserviceResult')\n                return Promise.resolve(true)\n            } else if (this.resource.type == 'object') {\n                this.webserviceResult = JSON.stringify(p)\n                this.update('this.webserviceResult')                    \n                return Promise.resolve(true)\n            }\n        }\n    }\n\n\n    saveAsTestCase() {\n        let title = prompt('Title')\n        let parameters = JSON.stringify(this.parameters)\n        resource.call({ action: 'save_as_testcase', title: title, resource_id: this.tag.id, parameters: parameters })\n    }\n\n    paramsChanged(value) {\n        this.params = value\n        this.update('this.params')\n        this.fire('change', value)\n    }\n\n    firedEvent(event) {\n        this.lastEvent = event\n        this.update('this.lastEvent')\n    }\n\n    refresh() {\n        Tag.tags[this.tname] = undefined\n        Resource.resources[name] = undefined\n        this.update('this.parameters')\n        this.reloadPreview()\n    }\n\n    reloadPreview() {\n        this.active = false\n        this.update('this.active')\n        this.active = true\n        this.update('this.active')\n    }\n}"},"name":"play","title":"Previsualizar e inspeccionar etiquetas","type":"tag","dependencies":[{"name":"form.resource","type":"tag","version":"1.0"},{"version":"1.0.0","type":"tag","name":"rc.table"}],"extends_resource":null},"ratings":{"id":59,"parameters":[{"name":"resourcename","title":"Nombre del recurso","type":"tagtype","documentation":null,"required":null}],"implementation":{"html":"<div>\n    <div if=\"this.add\">\n\t    <title title=\"Ratings\"><\/title>\n    <\/div>\n    <div for=\"rating of this.ratings\">\n        <div class=\"rating\">\n            <h3>{rating.title} <stars.rating stars=\"{rating.rating}\"><\/stars.rating> <img src=\"\/resource\/rc.icon\/delete.svg\" (click)=\"this.deleteRating(this.resourcename)\" if=\"rating.user_id == loggedInUser$.id\" class=\"icon\"\/><\/h3>\n            <div>Rating from {this.formatTime( rating.date )} by {rating.username}:<\/div>\n            <p>{rating.description}<\/p>\n        <\/div>\n    <\/div>\n     <div if=\"this.add\">\n        <form.resource element=\"addRatingForm\" resourcetype=\"rating\" label=\"Your Rating\" submitlabel=\"Rate Resource\" (submit)=\"this.addRating(event)\">\n        <\/form.resource>\n    <\/div>\n<\/div>","css":".rating {\n    margin-top: 32px;\n    margin-bottom: 32px;\n}\n\n.rating img.icon {\n    position: relative;\n    top: 4px;\n}","javascript":"class JRatings extends Tag {\n    setup() {\n        this.add = true\n    }\n    set resourcename(r) {\n        if (r != this._resourcename) {\n            this._resourcename = r\n            this.update('this.resourcename') \/\/ @TODO: Change color\n            this.updateRatings()\n        }\n    }\n    get resourcename() {\n        return this._resourcename\n    }\n    addRating(rating) {\n        rating.resource_name = this.resourcename\n        rating.save().then( saved => {\n            this.updateRatings(this.resourcename)\n            this.addRatingForm.reset()\n        })\n    }\n    updateRatings() {\n        resource.action('get-ratings',{'resource_name':this.resourcename}).then( ratings => {\n            this.setAttribute('ratings', ratings)\n        });\n    }\n    deleteRating(resourcename) {\n        resource.action('delete_rating',{resourcename}).then(result=> {\n            this.updateRatings()\n        })\n    }\n    formatTime(t) {\n        let d = new Date(Date.parse(t));\n        return d.getDate()+\".\"+d.getMonth()+\".\"+d.getFullYear() + \" at \" + d.getHours() + ':' + d.getMinutes();\n    }\n}"},"name":"ratings","title":"Clasificaciones","type":"tag","dependencies":[{"version":"1.0.0","name":"form.resource","type":"tag"},{"version":"1.0.0","type":"tag","name":"db.list"},{"version":"1.0.0","type":"tag","name":"db.table"},{"version":"1.0.0","type":"tag","name":"stars.rating"}],"extends_resource":null},"rc.accesscontrol":{"id":168,"parameters":[],"implementation":{"html":"<div class=\"editor-plugin-accesscontrol\">\n    <h1>Control de acceso<\/h1>\n    <div for=\"accessRight of this.accessRights\">\n        <div style=\"{accessRight.name == this.getHighlight() then 'background:rgba(255,0,0,0.3);'}\">\n            <h3>{accessRight.title_translated}<\/h3>\n            <p>{accessRight.description_translated}<\/p>\n            <div for=\"usergroup of this.usergroups\">\n                <div class=\"usergroup\">\n                    <form.checkbox (change)=\"this.accessChanged( accessRight.access_right, usergroup.id, event )\" value=\"{this.hasAccess( accessRight.access_right, usergroup.id )}\" label=\"{usergroup.title_translated}\"><\/form.checkbox>\n                <\/div>\n            <\/div>\n        <\/div>\n    <\/div>\n<\/div>\n","css":".editor-plugin-accesscontrol .usergroup {\n    display:inline-block;\n    margin-right: 21px;\n}\n\n.editor-plugin-accesscontrol table {\n    width: 100%;\n}\n\n.editor-plugin-accesscontrol table td {\n    width: 50%;\n}\n\n.tab.tab-access {\n    padding-top: 42px;\n    padding-left: 64px;\n    padding-right: 64px;\n    padding-bottom: 64px;\n}","javascript":"class EditorPluginAccessControl extends Tag {\n\n    setup() {\n        GlobalResource.call('db.fetchall',{table:'usergroup',translate_columns:['title'],'serverdb':true}).then( usergroups => {\n            this.usergroups = usergroups\n            this.updateWhenReady()\n        })\n    }\n\n    getHighlight() {\n        if (window.location.hash) {\n            let params = window.location.hash.substring(1).split(',')\n            let line = 0;\n            let tab = ''\n            for(let param of params) {\n                let paramDetail = param.split('=')\n                let paramName = paramDetail[0]\n                let paramValue = paramDetail[1]\n    \n                if (paramName == 'highlight') {\n                    window.history.replaceState({}, \"\", '\/editor\/resource\/'+this.resource.name+'\/access');\n                    return paramValue;\n                }\n            }\n            return undefined\n        }\n    }\n\n    updateWhenReady() {\n        if (this.usergroups && this.accessRights && this.resourceAccessRights) {\n            this.update('this.usergroups')\n            this.update('this.accessRights')\n        }\n    }\n\n    accessChanged(accessRight, usergroupId, event) {\n        resource.action('change-access',{'access_right':accessRight, 'usergroup_id': usergroupId, 'access': event, 'resource' : this.resource.name})\n    }\n\n    set resource(r) {\n        this._resource = r\n        this.update('this.resource')\n        if (r) {\n            resource.action('list-access-rights', {resource:r.name}).then( accessRights => {\n                this.resourceAccessRights = accessRights\n                this.updateWhenReady()\n            })\n            \/\/ , where:{\"type\":this.resource.type}\n            let accessDownloaded = GlobalResource.call('db.fetchall',{table:'access_rights',translate_columns:['title','description']}).then(accessRights => {\n                this.accessRights = accessRights\n                this.updateWhenReady()\n            })\n        }\n    }\n    get resource() {\n        return this._resource\n    }\n\n    hasAccess(accessRight, usergroup) {\n        if (usergroup == \"3\" && !editor$.isWP) {\n            return true;\n        }\n        if (!this.resourceAccessRights) {\n            return false \n        } \n        let idx = this.resourceAccessRights.findIndex( v => { \n            return (v.access_right == accessRight && v.usergroup_id == usergroup) \n        })\n        return idx != -1\n    }\n}"},"name":"rc.accesscontrol","title":"Control de acceso","type":"tag","extends_resource":null},"rc.account":{"id":245,"parameters":[{"name":"user_id","title":"Usuario","type":"db_row","documentation":null,"options":{"dbtable":"user","titlefield":"username","idfield":"id"},"title_translated":"User","documentation_translated":""},{"name":"value","title":"Valor","type":"number","options":{"suffix":"RC","value":"","label":"Account balance"},"title_translated":"Value","documentation_translated":""}],"implementation":{"javascript":"class RCAccount {\n\n    update() {\n        if (!Resource.wp) {\n            return resource.action('load').then( account => {\n                Object.assign(this,account)\n                notify('account$')\n                return account\n            });\n        }\n    }\n\n\tstatic getInstance() {\n\t\tif (RCAccount.instance) {\n\t\t\treturn RCAccount.instance\n\t\t} else {\n\t\t\treturn new RCAccount();\n\t\t}\n\t}\n\n\tstatic initialize() {\n        if (!Resource.wp) {\n            return resource.action('load').then( accountData => {\n                let account = RCAccount.getInstance()\n                Object.assign(account,accountData)\n                Tag.publish('account$',account)\n                return true;\n            });\n        }\n\t}\n\n\tget valueFormatted() {\n\t\tif (this.value) {\n\t\t\treturn this.value.toString().replace(\/(\\d)(?=(\\d{3})+(?!\\d))\/g, \"$1\u00e2\u20ac\u2030\")\n\t\t}\n\t}\n}"},"name":"rc.account","title":"Cuenta RC","type":"tag","extends_resource":null},"rc.change":{"id":350,"parameters":[],"implementation":{"html":"<div if=\"!!this.repository\">\n    <a link=\"\/editor\/view\/rc.sync\/{this.repository}\">Repositories<\/a> &raquo; Compare\n<\/div>\n<div>\n    <h1>Changes for resource \"{this.resourcename}\"<\/h1>\n    <!--p>Compare version {this.versiona} to {this.versionb}<\/p-->\n    \n    <div if=\"!!this.recentResource and !!this.newResource\">\n        <div if=\"this.recentResource.hash == this.newResource.hash\">\n            <h2>The resources did not change.<\/h2>\n        <\/div>\n\n        <div if=\"this.recentResource.title != this.newResource.title\">\n            <h2>Title changed from \"{this.recentResource.title}\" to \"{this.newResource.title}\"<\/h2>\n        <\/div>\n\n        <div if=\"this.recentResource.vendor != this.newResource.vendor\">\n            <h2>Vendor changed from \"{this.recentResource.vendor}\" to \"{this.newResource.vendor}\"<\/h2>\n        <\/div>\n\n        <div if=\"this.recentResource.license != this.newResource.license\">\n            <h2>License changed from \"{this.recentResource.license}\" to \"{this.newResource.license}\"<\/h2>\n        <\/div>\n\n        <div if=\"this.recentResource.version != this.newResource.version\">\n            <h2>Version changed from \"{this.recentResource.version}\" to \"{this.newResource.version}\"<\/h2>\n        <\/div>\n\n        <div if=\"!!this.recentImplementation && !!this.newImplementation\">\n            <h2>Implementation<\/h2>\n            <tabs (change)=\"this.changeTab(event)\" tabs=\"{this.implementationKeys}\" active=\"{this.currentTab}\"><\/tabs>\n            <rc.diff original=\"{this.recentImplementation[ this.currentTab ] ? this.recentImplementation[ this.currentTab ] : ''}\" updated=\"{this.newImplementation[ this.currentTab ] ? this.newImplementation[ this.currentTab ] : ''}\"><\/rc.diff>\n        <\/div>\n\n        <div if=\"this.recentResource.documentation != this.newResource.documentation\">\n            <h2>Documentation<\/h2>\n            <h3>Recent documentation<\/h3>\n            <p>{this.recentResource.documentation ? this.recentResource.documentation : '(No documentation)'}<\/p>\n            <h3>New documentation<\/h3>\n            <p>{this.newResource.documentation ? this.newResource.documentation : '(No documentation)'}<\/p>\n        <\/div>\n\n        <div if=\"!!this.recentParams\">\n            <h2>Parameters<\/h2>\n            <rc.parameters.view label=\"Recent parameters\" parameters=\"{this.recentParams}\"><\/rc.parameters.view>\n            <rc.parameters.view label=\"New parameters\" parameters=\"{this.newParams}\"><\/rc.parameters.view>\n        <\/div>\n\n        <div if=\"!!this.recentDependencies\">\n            <h2>Dependencies<\/h2>\n            <rc.dependencies.view label=\"Recent dependencies\" dependencies=\"{this.recentDependencies}\"><\/rc.dependencies.view>\n            <rc.dependencies.view label=\"New dependencies\" dependencies=\"{this.newDependencies}\"><\/rc.dependencies.view>\n        <\/div>\n\n        <div if=\"!this.repository\"> \n            <form.button (click)=\"this.toTask()\" label=\"Go to task\"><\/form.button>\n            <form.button (click)=\"this.seeChanges()\" label=\"See changes\"><\/form.button>\n        <\/div>\n    <\/div>\n<\/div>","javascript":"class RCChange extends Tag {\n\n    init() {\n        if (this.repository != undefined) {\n            resource.action('compare_to_repository',{'repository':this.repository,'resourcename':this.resourcename}).then(result=> {\n                this.displayDiff(result)\n            })\n        }\n    }\n\n    setup() {\n        this.recentResource = {}\n        this.newResource = {}\n    }\n\n    set repository(r) {\n        this._repository = r\n    }\n\n    get repository() {\n        return this._repository\n    }\n\n    set versiona(v) {\n        if (v != this._versiona) {\n            this._versiona = v\n            this.clearRecent()\n            this.updateCompare()\n        }\n    }\n\n    get versiona() {\n        return this._versiona\n    }\n\n    set versionb(v) {\n        if (this._versionb != v) {\n            this._versionb = v\n            this.clearNew()\n            this.updateCompare()\n        }\n    }\n\n    get versionb() {\n        return this._versionb\n    }\n\n    changeTab(tab) {\n        this.setAttribute('currentTab', tab)\n    }\n\n    set resourcename(r) {\n        if (r != this._resourcename) {\n            this._resourcename = r\n            this.update('this.resourcename')\n            this.updateCompare()\n        }\n    }\n\n    get resourcename() {\n        return this._resourcename\n    }\n\n    clearRecent() {\n        this.setAttribute('recentParams', null)\n        this.setAttribute('recentDependencies', null)\n        this.setAttribute('recentImplementation', null)\n        this.setAttribute('recentResource', null)\n    }\n\n    clearNew() {\n        this.setAttribute('newParams', null)\n        this.setAttribute('newDependencies', null)\n        this.setAttribute('newImplementation', null)\n        this.setAttribute('newResource', null)\n    }\n\n    displayDiff(result) {\n        if (!result.recentResource || !result.newResource) {\n            console.log('returned result', result)\n            return\n        }\n\n        if (result.recentResource.parameters != result.newResource.parameters) {\n            this.setAttribute('recentParams', JSON.parse(result.recentResource.parameters))\n            this.setAttribute('newParams', JSON.parse(result.newResource.parameters))\n        }\n        if (result.recentResource.dependencies != result.newResource.dependencies) {\n            this.setAttribute('recentDependencies', JSON.parse(result.recentResource.dependencies))\n            this.setAttribute('newDependencies', JSON.parse(result.newResource.dependencies))\n        }\n        if (result.recentResource.implementation != result.newResource.implementation) {\n            let recentImpl = JSON.parse(result.recentResource.implementation)\n            let newImpl = JSON.parse(result.newResource.implementation)\n            let recentKeys = Object.keys(recentImpl)\n            let newKeys = Object.keys(newImpl)\n            let allKeys = recentKeys.concat(newKeys)\n            function onlyUnique(value, index, self) {\n                return self.indexOf(value) === index;\n            }\n            var unique = allKeys.filter(onlyUnique);\n            this.setAttribute('implementationKeys', unique)\n            this.setAttribute('currentTab', unique[0])\n            this.setAttribute('recentImplementation', recentImpl)\n            this.setAttribute('newImplementation', newImpl)\n        }\n\n        this.setAttribute('recentResource', result.recentResource)\n        this.setAttribute('newResource', result.newResource)\n    }\n\n    updateCompare() {\n        if (editor$.currentTask == undefined) {\n            if (!this.resourcename || !this.versiona || !this.versionb) {\n                return;\n            }\n        }\n        resource.call({ 'resourcename': this.resourcename, 'version_a': this.versiona, 'version_b': this.versionb }).then(result => {\n            this.displayDiff(result)\n        })\n    }\n\n    toTask() {\n        router$.goto('\/tasks\/' + editor$.currentTask.id)\n    }\n\n    seeChanges() {\n        router$.goto('\/editor\/view\/rc.changes')\n    }\n}"},"name":"rc.change","title":"Cambia","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"rc.dependencies.view"},{"version":"1.0.0","type":"tag","name":"rc.diff"},{"version":"1.0.0","type":"tag","name":"rc.parameters.view"},{"version":"1.0.0","type":"tag","name":"tabs"},{"version":"1.0.0","type":"tag","name":"form.button"}],"extends_resource":""},"rc.db.table":{"id":406,"parameters":[{"name":"table","title":"Cuadro","type":"string","documentation":"El nombre de la tabla en la base de datos.","required":true}],"implementation":{"html":"<h1>Table <\/h1>\n<div class=\"rc-db-table\">\n    <table class=\"table\" if=\"!!this.data\">\n        <thead>\n            <tr for=\"key of this.keys\">\n                <th>{key}<\/th>\n            <\/tr>\n        <\/thead>\n        <tbody for=\"item of this.data\">\n            <tr for=\"key of this.keys\">\n                <td>{item[key]}<\/td>\n            <\/tr>\n        <\/tbody>\n    <\/table>\n<\/div>","css":"","javascript":"class RCDBTable extends Tag {\n    init() {\n        this.updateData()\n    }\n    set table(t) {\n        this._table = t\n    }\n    get table() {\n        return this._table\n    }\n    updateData() {\n        resource.call({table:this.table}).then( data => {\n            this.setAttribute('data',data)\n            if (data.length > 0) {\n                let item = data[0]\n                let keys = Object.keys(item)\n                this.setAttribute('keys', keys)\n            }\n        })\n    }\n}"},"name":"rc.db.table","title":"Tabla DB","type":"tag","extends_resource":null},"rc.editor.tasks":{"id":42,"parameters":[],"implementation":{"html":"<div>\n    <h1>Tareas<\/h1>\n    <task.list tasks=\"{this.tasks}\"><\/task.list>\n    <form.resource showdocumentation=\"{ window.helpMode$ && helpMode$ }\" element=\"form\" (submit)=\"this.taskCreated(event)\" resourcetype=\"task.create\" submitlabel=\"Crear tarea\">\n    <\/form.resource>\n<\/div>","javascript":"class JJDevelopment extends Tag {\n\n    set resource(r) {\n        this._resource = r\n        this.update('this.resource')\n        this.updateTasks()\n    }\n\n    get resource() {\n        return this._resource\n    }\n\n    updateTasks() {\n        if (this.resource) {\n            resource.action('tasks',{resource:this.resource.name}).then( tasks => {\n                this.tasks = tasks\n                this.update('this.tasks')\n            })\n        }\n    }\n\n    taskCreated(task) {\n        \/* 2 -> verification *\/\n        let taskData = Object.assign({},task,{resource:this.resource.name})\n        resource.action('create_task', taskData).then(result => {\n            if (result.error) {\n                alert(result.error)\n            } else {\n                this.updateTasks()\n                this.form.reset()\n\t\t\t\taccount$.update()\n            }\n        });\n    }\n}"},"name":"rc.editor.tasks","title":"Tareas - editor","type":"tag","dependencies":[{"name":"form.resource","type":"tag","version":"1.0.0"},{"name":"task","type":"object","version":"1.0.0"},{"version":"1.0.0","name":"task.list","type":"tag"},{"name":"title","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"rc.project":{"id":196,"parameters":[{"name":"title","title":"T\u00edtulo","type":"string","documentation":"El t\u00edtulo del proyecto.","required":null},{"name":"description","title":"Descripci\u00f3n","type":"text","documentation":null,"readonly":false,"required":false},{"name":"name","title":"Nombre","type":"string","readonly":false,"required":false}],"implementation":[],"name":"rc.project","title":"Proyecto","type":"object","extends_resource":null},"rc.spider":{"id":339,"parameters":[],"implementation":{"html":"<div>\n    <div if=\"this.visible == true && window.location.pathname == '\/page\/rc.spider'\">\n        <form.button label=\"Spider\" (click)=\"this.spider()\"><\/form.button> \n    <\/div>\n<\/div>","javascript":"class RCSpider extends Tag {\n    init() {\n        \n        this.indexPage(document.location.pathname)\n        this.setAttribute('visible', location.pathname == '\/page\/rc.spider')\n    }\n\n    visible() {\n        return localStorage.getItem('pages') == undefined;\n    }\n\n    spider() {\n        localStorage.setItem('spider', 'true')\n        GlobalResource.action('editor', 'clear_cache').then( result => {\n            this.processNext()    \n        })\n    }\n\n    indexPage(page) {\n        if (localStorage.getItem('spider') == \"true\") {\n         \n           \/\/ if (location.pathname == page) {\n\n            \n            window.setTimeout(function() {\n                Tag.publish('loggedInUser$', {})\n            }.bind(this), 3000)\n            window.setTimeout(function() {\n                Tag.publish('loggedInUser$', {})\n                resource.call( {url:location.pathname,html:document.body.parentElement.innerHTML} ).then( result => {\n                    this.processNext()\n\n                })\n            }.bind(this), 5000)\n           \/* } else {\n                if (page != undefined) {\n                    window.setTimeout(function() {\n                    location.pathname = page\n                    },1000);\n                }\n            }*\/\n        }\n    }\n\n    processNext() {\n        if (localStorage.getItem('spider') == 'true') {\n            resource.action('get_pages').then(page => {\n                location.pathname = page.path\n            })\n        }\n    }\n}"},"name":"rc.spider","title":"Obtener URL","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"php-library","name":"google.ads"}],"extends_resource":null},"router":{"id":1083,"parameters":null,"implementation":{"javascript":"class RouterTag extends Tag {static initialize() { window.router$ =  {} }\n    init() {\n        if (!this.base)\n            this.base = ''\n        this.publish('router$', this);\n        this.matchAndUpdate(window.location.pathname ) \/\/window.location.hash\n        window.onpopstate = function(event) {\n            this.matchAndUpdate(document.location.pathname, false )\/\/document.location.hash\n        }.bind(this)\n    }\n    goto(page) {\n        this.matchAndUpdate(this.base + page);\n    }\n    go(pageName, params = {}) {\n        let route = this.routeByName(pageName);\n        this.gotoRoute(route, params);\n    }\n    routeByName(name) {\n        return this.routes.find(v => v.name == name);\n    }\n    gotoRoute(route, vars, pushState=true,hash=\"\") {\n        this.active = route;\n        this.params = vars;\n        this.attributes = Object.assign({},route,vars)\n        this.activeUrl = route.url;\n        this.activeRoute = route.name;\n        let url = route.url\n        for (let varName in vars) {\n            let varValue = vars[varName]\n            url = url.split('[' + varName + ']').join(varValue)\n        }\n        if (pushState) {\n            window.history.pushState({}, \"\", this.base + url + hash); \n        }\n        this.fire('change');\n        this.update('router$');\n        this.fire('changed');\n        document.scrollingElement.scrollTop = 0\n        if (route.title != undefined) {\n            document.title = route.title;\n        }\n\n\n    }\n\n    extractHash(url) {\n        const hashIndex = url.indexOf('#');\n        return hashIndex !== -1 ? url.substring(hashIndex) : '';\n    }\n    matchAndUpdate(page,pushState=true) {\n        for (let route of this.routes) {\n            let vars = null;\n            if (vars = this.matches(this.base + route.url, page)) {\n                this.gotoRoute(route, vars, pushState, this.extractHash(page));\n                return;\n            }\n        }\n        this.active = null;\n        this.update('router$');\n    }\n\n    matches(path, url) {\n        url = url.split('#')[0]\n        let pathElements = path.split('\/')\/\/ path.split(\/[\/\\.]\/);\n        let urlElements = url.split('\/')\/\/url.split(\/[\/\\.]\/);\n        \n        let variables = {};\n        for (let pathElementIdx in pathElements) {\n            let pathElement = pathElements[pathElementIdx];\n            let urlElement = urlElements[pathElementIdx];\n            if (urlElement == undefined) {\n                return false;\n            }\n            if (pathElement.startsWith('[')) {\n                let varName = pathElement.substr(1, pathElement.length - 2);\n                variables[varName] = urlElement;\n            } else {\n                if (pathElement != urlElement) {\n                    return false;\n                }\n            }\n        }\n        if (variables.length == 0) {\n            return true;\n        }\n        return variables;\n    }\n}"},"name":"router","title":"Router","type":"tag","extends_resource":null},"search":{"id":73,"parameters":[{"name":"visible","title":"Visible","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Visible","documentation_translated":""}],"implementation":{"html":"<div class=\"editor-search {this.visible then 'visible'}\">\n    <form.text (enter)=\"this.performSearch()\" element=\"formSearchText\" label=\"Buscar texto\"><\/form.text>\n    \n    <img (click)=\"this.close()\" class=\"close-btn\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/close_white.svg\" \/>\n    <div class=\"search-results\" for=\"searchResult of this.searchResults\">\n        <h3>{searchResult.name} ({searchResult.language ? searchResult.language : searchResult.type})<\/h3>  \n        \n        <div if=\"!!searchResult.lines\">\n            <div for=\"line of searchResult.lines\"> \n                <div (click)=\"this.goTo(searchResult.name,searchResult.language,line.line)\">\n                    <rc.code content=\"{line.code}\" language=\"{searchResult.language}\"><\/rc.code>\n                <\/div>\n            <\/div>\n         <\/div>\n\n        <div if=\"!!searchResult.parameters\">\n            <div for=\"parameter of searchResult.parameters\"> \n                <div (click)=\"router$.goto('\/editor\/resource\/'+searchResult.name+'\/parameters')\">\n                    Par\u00e1metros: {parameter.name}\n                <\/div>\n            <\/div>\n        <\/div>\n    <\/div>\n<\/div>","css":".editor-search {\n    display: none;\n}\n\n.editor-search .close-btn {\n    width: 18px;\n    position: absolute;\n    top: 24px;\n    right: 24px;\n    cursor: pointer;\n}\n\n.search-results {\n    position: absolute;\n    top: 148px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    overflow: scroll;\n    padding: 20px;\n    \n}\n\n.search-results code {\n    color: white;\n}\n.editor-search.visible {\n    display: block;\n    box-shadow: 0px 0px 50px black;\n}\n.editor-search { \n    position: fixed;\n    left: 0px;\n    width: 300px;\n    top: 0px;\n    bottom: 0px;\n    background: #1f1f1f;\n    color: white;\n    border: none;\n    border-right: 1px solid #555;\n    margin-left: 0px;\n    max-height: none;\n    padding: 32px;\n    \n}\n","javascript":"class Search extends Tag {\n    performSearch() {\n        this.call('search',{'search':this.formSearchText.value}).then( (result) => {\n            this.searchResults = result\n            this.update('this.searchResults')\n        } ).catch(error => {\n\t\t\tconsole.error(error) \n\t\t});\n        \n    }\n    goTo(resource,tab,line) {\n        editor$.goto(resource,tab,line)\n    }\n\n    toggle() {\n        if (this.visible) {\n            this.close()\n        } else {\n            this.show()\n            this.focus();\n        }\n    }\n\n    focus() {\n\n        this.formSearchText.input.focus();\n     \n    }\n\n    show() {\n        this.setAttribute('visible',true)\n        document.getElementById('rc-editor').style.left = '364px'\n        this.focus();\n    }\n\n    close() {\n        this.setAttribute('visible',false)\n        document.getElementById('rc-editor').style.left = '0px'\n    }\n}"},"name":"search","title":"B\u00fasqueda de recursos (HTML, CSS, JavaScript, ...)","type":"tag","dependencies":[{"name":"rc.code","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"form.text"}],"extends_resource":null},"settings":{"id":240,"parameters":[{"name":"domain","title":"Nombre de dominio","type":"string","documentation":"El nombre de dominio para este servidor.","readonly":false,"required":true,"title_translated":"\u57df\u540d","documentation_translated":"\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u57df\u540d\u3002"}],"implementation":{"html":"<div class=\"j-settings\">\n    <div if=\"!!this.resource\">\n        <h2>{this.resource then this.resource.title_translated}<\/h2>\n        <innerhtml value=\"{this.resource then this.resource.documentation_translated}\"><\/innerhtml>\n\n        <div if=\"this.resource.type == 'webservice'\">\n            <form.resource showdocumentation=\"{window.helpMode$ && helpMode$}\" target=\"webservice\" method=\"POST\" action=\"{editor$.currentServer ? editor$.currentServer.http_host : ''}resource-manager\/call.php?function={this.resource.name}\" submitlabel=\"Enviar\" (submit)=\"this.fire('webservice',event);element.form.submit()\" resourcetype=\"server:{this.resource then this.resource.name}\"><\/form.resource>\n        <\/div>\n        <div if=\"this.resource.type != 'webservice'\">\n            <form.resource showdocumentation=\"{window.helpMode$ && helpMode$}\" submitlabel=\"comprobar\" (submit)=\"this.fire('view',event)\" resourcetype=\"server:{this.resource then this.resource.name}\"><\/form.resource>\n        <\/div>\n    <\/div>\n<\/div>","css":".j-settings {\n    position: absolute;\n    right: 49px;\n    top: 86px;\n    background: #555e68;\n    max-height: calc( 100% - 182px );\n    width: 300px;\n    z-index: 1000;\n    background: white;\n    padding: 32px;\n    overflow: scroll;\n    border-radius: 8px;\n    border-top: 1px solid rgba(0, 25, 50, 0.15);\n    border-left: 1px solid rgba(0, 25, 50, 0.15);\n    box-shadow: 2px 2px 3px rgba(0, 25, 50, 0.15);\n}\n\n.j-settings h2 {\n    margin-top: 0px;\n}\n\n@media only screen and (max-width: 600px) { \n    .j-settings {\n        width: 80%;\n        right: 0px;\n        left: 0px;\n        padding: 10%;\n    }\n}","javascript":"class JSettings extends Tag {\n    set resource(r) {\n        this._resource = r\n        this.update('this.resource')\n    }\n    get resource() {\n        return this._resource\n    }\n    set server(s) {\n        this._server = s\n        this.update('this.server')\n    }\n    get server() {\n        return this._server\n    }\n}"},"name":"settings","title":"Ajustes","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"innerhtml"}],"extends_resource":null},"tabs":{"id":9,"parameters":[{"name":"active","type":"string","title":"Activo","documentation":"La pesta\u00f1a activa."},{"name":"tabs","title":"Fichas","type":"array","documentation":null,"options":{"resourcetype":"namevalue"}}],"implementation":{"html":"<div class=\"tab-container\">\r\n\t<div for=\"tab of this.tabs\" class=\"tabs-box\">\r\n\t\t<div (click)=\"this.activateTab(node,tab)\" class=\"tab-item { (tab.name == this.active) or (tab.value == this.active) ? 'active' : ''}\">{tab.title ? tab.title : tab.name}<\/div>\r\n\t<\/div>\r\n\t<div if=\"!this.tabs || this.tabs.length == 0\"><div class=\"tab-item no-tabs\">No tabs<\/div><\/div>\r\n<\/div>","css":".tab-container {\r\n\tpadding-top: 8px;\r\n\tmargin-bottom:0px;\r\n    \r\n}\r\n\r\n.tabs-box::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.tabs-box {\r\n\twhite-space: nowrap;\r\n\toverflow-x: scroll;\r\n    min-height: 3px;\r\n}\r\n\r\n.no-tabs {\r\n\tvisibility: hidden;\r\n}\r\n\r\n.tab-item {\r\n\tdisplay: inline-block;\r\n\tpadding-left:16px;\r\n\tpadding-right:16px;\r\n\tpadding-top:8px;\r\n\tpadding-bottom: 11px;\r\n\tcursor:pointer;\r\n}\r\n\r\n.tab-item.active {\r\n\tborder-bottom: 3px solid #4682e2;\r\n\tpadding-bottom:8px;\r\n    border-bottom: 5px solid black;\r\n    padding-bottom: 8px;\r\n    font-weight: bold;\r\n}","javascript":"class Tabs extends Tag {\n\n\tset tabs(t) {\n\t\tif (t && t.length > 0) {\n\t\t\tif ((typeof t[0]) == 'string') {\n\t\t\t\tlet tabs = []\n\t\t\t\tfor (let variable of t) {\n\t\t\t\t\ttabs.push({name:variable,value:variable})\n\t\t\t\t}\n\t\t\t\tt = tabs\n\t\t\t}\n\t\t}\n\t\tthis._tabs = t\n\t\tthis.update('this.tabs')\n\t}\n\n\tget tabs() {\n\t\treturn this._tabs\n\t}\n\n    set active(activeTab) {\n        this._activeTab = activeTab;\n        this.update('this.active');\n    }\n\n    get active() {\n        return this._activeTab;\n    }\n\n    activateTab(node, tab) {\n        this.active = tab.name;\n        this.update('this.active')\n        this.fire('change', tab.value ? tab.value : tab.name)\n    }\n}"},"name":"tabs","title":"Fichas","allowed_subelements":[],"type":"tag","dependencies":[],"extends_resource":""},"toast":{"id":1036,"parameters":[],"implementation":{"html":"<div class=\"toast-container\">\n  <div for=\"message of this.messages\">\n    <div class=\"toast-message {message.cssClass}\">\n      <span><innerhtml value=\"{translate(message.message)}\"><\/innerhtml><\/span>\n      <span class=\"toast-button\" if=\"message.link != undefined && message.link != ''\"><a element=\"confirm\" (click)=\"this.gotoLink(message)\">{translate(message.buttonName)}<\/a><\/span>\n      <span class=\"toast-button\" if=\"message.isConfirm && (message.link == undefined || message.link == '')\">\n        <a element=\"confirm\" (click)=\"this.hide(message)\">{this.getButtonName(message)}<\/a>\n      <\/span>\n    <\/div>\n  <\/div>\n<\/div>","css":".toast-container {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  max-width: 430px;\n  z-index: 10000;\n}\n\n.toast-message {\n  background-color: #d1434d;\n  color: #fff;\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n    background: linear-gradient(176deg, #e6747c 0%, #d1434d 35%, rgb(209 67 77) 100%);\n    border: 1px solid #a82931;\n    box-shadow: 0px 0px 10px rgba(0,0,0,0.3);\n    text-shadow: 1px 1px 2px #450f13;\n}\n\nspan.toast-button {\n    margin: 10px;\n}\n\n.toast-message a, .toast-message a:link, .toast-message a:visited, .toast-message a:hover {\n  background-color: #213e5c;\ncolor: white;\n  text-decoration: none;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-left: 10px;\n  white-space: nowrap;\n  cursor: pointer;\n  font-weight: normal;\n    background: linear-gradient(2deg, rgb(52 77 106) 0%, rgb(64 91 119) 100%);\n    border: 1px solid rgb(39 62 88);\n    padding-left: 15px;\n    padding-right: 15px;\n    transition-property: top, left;\n    transition-duration: 0.3s;\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n\n.toast-message a:hover {\n  background-color: #c2a201;\n  background: linear-gradient(2deg, rgb(59, 86, 117) 0%, rgb(69, 102, 137) 100%);\n  cursor: pointer;\n  font-weight: normal;\n}\n\n.toast-message a:active {\n    position: relative;\n    top: 2px;\n    left: 2px;\n    background: linear-gradient(2deg, rgb(77, 107, 141) 0%, rgb(85, 122, 162) 100%);\n}\n\n.toast-message span {\n  flex-grow: 1;\n  \n  margin-right: 10px;\n}\n\n.toast-message.success {\n    background-color: #15a84b;\n    background: linear-gradient(178deg, #17be54 0%, #15a84b 100%);\n    border: 1px solid #109240;\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);\n    text-shadow: 1px 1px 2px #033e18;\n}","javascript":"class Toast extends Tag {\n    init() {\n        this.messages = [];\n        Tag.publish('toast$', this)\n        window.addEventListener('message', function (e) {\n            if (e.data.type == 'toast') {\n                toast$.show(e.data.message, e.data.sticky, e.data.type, e.data.link, e.data.button)\n            }\n        }.bind(this))\n    }\n\n    gotoLink(message) {\n        if (message.callback != undefined) {\n            message.callback();\n        } else if (message.link.startsWith('http:\/\/') || message.link.startsWith('https:\/\/')) {\n            window.location = message.link;\n        } else {\n            router$.goto(message.link)\n            this.hide(message)\n        }\n    }\n\n    addMessage(newMessage, isConfirm) {\n        for (let msg of this.messages) {\n            if (msg.message == newMessage.message && msg.link == newMessage.link) {\n                return true\n            }\n        }\n\n\n        this.messages.push(newMessage);\n        this.update('this.messages');\n        if (!isConfirm) {\n            setTimeout(() => {\n                this.hide(newMessage);\n            }, 3500 + newMessage.message.length * 150);\n        }\n    }\n\n    getButtonName(message) {\n        return translate(message.buttonName ? message.buttonName : 'ok_btn')\n    }\n\n    showCallback(message, callback, buttonName = \"\", cssClass = \"\") {\n        const newMessage = {\n            message: message,\n            isConfirm: true,\n            link: \"\",\n            buttonName: buttonName,\n            cssClass: cssClass,\n            callback: callback\n        };\n\n        this.addMessage(newMessage, true)\n    }\n\n    display(msg) {\n        if (msg.message != undefined) {\n            let confirm = msg.confirm;\n            if (msg.confirm == undefined) {\n                confirm = msg.type == undefined || msg.type == 'error'\n            }\n            let link = msg.link == undefined ? '' : msg.link\n            let btnName = msg.button_name == undefined ? '' : msg.button_name\n            this.show(translate(msg.message), confirm, msg.type, link)\n        }\n    }\n\n    show(message, isConfirm = false, cssClass = \"\", link = \"\", buttonName = \"\") {\n        const newMessage = {\n            message: message,\n            isConfirm: isConfirm,\n            link: link,\n            buttonName: buttonName,\n            cssClass: cssClass\n        };\n\n        this.addMessage(newMessage, isConfirm)\n    }\n\n    hide(message) {\n        if (message.callback != undefined) {\n            message.callback()\n        }\n        const index = this.messages.indexOf(message);\n        if (index !== -1) {\n            this.messages.splice(index, 1);\n            this.update('this.messages');\n        }\n    }\n}"},"name":"toast","title":"Toast","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"innerhtml"},{"version":"1.0.0","type":"tag","name":"translate"}],"extends_resource":null},"todo":{"id":43,"parameters":[{"name":"resourcename","title":"Recursos","type":"tagtype","documentation":null,"title_translated":"Resource","documentation_translated":""},{"name":"listall","title":"Lista completa","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"List all","documentation_translated":""},{"name":"showadd","title":"Mostrar \"A\u00f1adir formulario de tareas pendientes","type":"boolean","readonly":false,"required":false,"title_translated":"Show \"Add to-do form\"","documentation_translated":""}],"implementation":{"html":"<div class=\"todo\">\n    \n\t<div class=\"todo-card\">\n        <div class=\"filter-todo\" if=\"this.viewaction != 'add'\">\n\n                    <form.radio label=\"Prioridad\" (change)=\"this.filterPriority(event)\" options=\"{this.priorityOptions}\"><\/form.radio>\n                    <form.radio value=\"open\" label=\"Estado\" (change)=\"this.filterStatus(event)\" options=\"{this.statusOptions}\"><\/form.radio>\n                    <dropdown label=\"tipolog\u00eda\" (change)=\"this.filterType(event)\" options=\"{this.typeOptions}\" translate_options=\"{true}\"><\/dropdown>\n                    <dropdown label=\"Versi\u00f3n\" (change)=\"this.filterVersion(event)\" options=\"{this.versionOptions}\" translate_options=\"{true}\"><\/dropdown>\n        <\/div>\n        \n        \n\n\t\t<div if=\"(this.todos &&\u00a0this.todos.length > 0) && this.viewaction != 'add'\" class=\"todo-content\">\n\t\t\t<table class=\"table colored todo-list\">\n                <thead>\n                    <tr>\n                        <th style=\"width:21px\"><\/th>\n                        <th>T\u00edtulo<\/th>\n                        <th>tipolog\u00eda<\/th>\n                        <th>Versi\u00f3n<\/th>\n                        <th>Tiempo<\/th>\n                        <th>Prioridad<\/th>\n                        <th>Acciones<\/th>\n                    <\/tr>\n                <\/thead>\n\t\t\t\t<tbody class=\"todo-item\" for=\"todo of this.todos\">\n\t\t\t\t\t<tr>\n                        <td>\n                            <span if=\"todo.status=='done'\">\u2713<\/span>\n                        <\/td>\n                        <td>\n                            \n                            <div><b style=\"font-size:120%;\">{todo.title} <\/b><\/div>\n                            <b if=\"this.listall\">{todo.resource}<\/b>\n                            <!--p if=\"!this.listall && todo.description && todo.description != ''\">{todo.description}<\/p-->\n                        <\/td>\n                        <td>\n                            <text name=\"to_do_type_{todo.type}\"><\/text>\n                        <\/td>\n                        <td>\n                            {todo.version}\n                        <\/td>\n                        <td>\n                            {translate('to_do_minutes',todo.time)}\n                        <\/td>\n                        <td style=\"white-space:nowrap;\">\n                            {translate('priority_'+todo.priority)}\n                        <\/td>\n                        <td style=\"white-space:nowrap;\">\n                            <i if=\"todo.status != 'done'\" (click)=\"this.checkTodo( todo )\" class=\"action\"><img style=\"filter:none\" class=\"icon\" src=\"\/resource\/rc.icon\/check.svg\"\/><\/i>\n                            <i (click)=\"this.todoEditor( todo )\" class=\"action\"><img class=\"icon\" src=\"\/resource\/rc.icon\/edit.svg\"\/><\/i>\n                            <i (click)=\"this.removeElement( todo )\" class=\"action\"><img class=\"icon\" src=\"\/resource\/rc.icon\/delete.svg\"\/><\/i>\n                        <\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t<\/tbody>\n\t\t\t<\/table>\n            <a name=\"edit-todo\"><\/a>\n\t\t<\/div>\n        <p if=\"this.viewaction != 'add'\" style=\"margin-left:-18px\">{translate('to_do_work_left',this.time)}<\/p>\n        <div class=\"todo-content-add\">\n            \n            <p if=\"(!this.todos ||\u00a0this.todos.length == 0) && this.viewaction != 'add'\">\n                No has a\u00f1adido ninguna tarea pendiente.            <\/p>\n\n            <p if=\"this.viewaction != 'add' && this.addform\">\n                <form.button (click)=\"this.setAttribute('viewaction','add')\" label=\"A\u00f1adir tareas pendientes\"><\/form.button>\n            <\/p>\n\n            <div if=\"this.viewaction == 'add' && this.addform\" >\n                <form.resource showdocumentation=\"window.helpMode$ && helpMode$\" element=\"addtodo\" (submit)=\"this.addToDo(event)\" label=\"A\u00f1adir tareas pendientes\" resourcetype=\"todo.item\" submitLabel=\"A\u00f1adir tareas pendientes\"><\/form.resource>\n            <\/div>\n\t\t<\/div>\n\t<\/div>\n<\/div>","css":"\n.filter-todo {\n    margin-left:30px;\n    margin-left: -18px;\n    width: calc(100% + 36px);\n    display: flex;\n    gap: 32px;\n    \n}\n.filter-todo .dropdown-options {\n    position: absolute;\n}\n\n.todo .icon {\n    position: relative;\n    top: 2px;\n}\n\n.j-editor .tab-todo table.table {\n    margin-left: -61px;\n    width: calc(100% + 122px);\n}\n\n.tab-todo {\n    padding-left: 0px;\n    padding-right: 0px;\n}\n\n.todo-content-add {\n    margin-left: -18px;\n    width: calc(100% + 36px);\n}\n\n.todo table.table td, .todo table.table th {\n\tborder: none;\n}\n\n\n\n.todo-card {\n    width: 100%;\n    height: 100%;\n}\n\n\n.todo-footer {\n    padding:24px;\n}\n\n.todo-delete {\n    display: none;\n}\n\n.todo-item {\n\tposition: relative;\n    margin-bottom: 16px;\n}\n\n.todo-item:hover .todo-delete {\n    visibility: visible;\n}\n\n.todo-item-title {\n    display: inline-block;\n}\n\n.todo-checkbox.done label {\n    color: green;\n}\n\n.todo-delete {\n\tdisplay: inline-block;\n    visibility: hidden;\n    position: relative;\n    top: 8px;\n    margin-left: 8px;\n    cursor: pointer;\n    opacity: 0.5;\n}\n\n.todo ul {\n    list-style-type: none;\n    padding: 0px;\n}\n\n.todo .checkbox {\n    display: inline-block;\n}\n\n.todo .todo-description textarea {\n    height: 120px;\n}","javascript":"class TodoApp extends Tag {\n    setup() {\n        this.todos = []\n        this.statusOptions = [{\n            name: 'to_do_open',\n            value: 'open'\n        },{\n            name: 'to_do_done',\n            value: 'done'\n        }]\n        this.typeOptions = [{\n                name: 'to_do_type_bug',\n                value: 'bug'\n            },\n            {\n                name: 'to_do_type_feature',\n                value: 'feature'\n            },\n            {\n                name: 'to_do_type_improvement',\n                value: 'improvement'\n            },\n            {\n                name: 'to_do_type_idea',\n                value: 'idea'\n            }\n        ];\n        this.priorityOptions = [\n            {\n                name: 'priority_1',\n                value: '1'\n            },\n            {\n                name: 'priority_2',\n                value: '2'\n            },\n            {\n                name: 'priority_3',\n                value: '3'\n            }\n        ];\n    }\n    init() {\n        this.updateList()\n    }\n\n    set listall(l) {\n        this._listall = l\n        this.update('this.listall')\n    }\n\n    get listall() {\n        return this._listall\n    }\n\n    set resourcename(resourcename) {\n        this._resourcename = resourcename\n        if (resourcename) {\n            this.updateList()\n        }\n    }\n\n\n    cmpVersions(a, b) {\n        var i, diff;\n        var regExStrip0 = \/(\\.0+)+$\/;\n        var segmentsA = a.replace(regExStrip0, '').split('.');\n        var segmentsB = b.replace(regExStrip0, '').split('.');\n        var l = Math.min(segmentsA.length, segmentsB.length);\n\n        for (i = 0; i < l; i++) {\n            diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);\n            if (diff) {\n                return diff;\n            }\n        }\n        return segmentsA.length - segmentsB.length;\n    }\n\n\n    filterVersion(v) {\n        this.version = v\n        this.updateList()\n    }\n\n    filterType(t) {\n        this.todoType = t\n        this.updateList()\n    }\n\n    filterPriority(p) {\n        this.priority = p\n        this.updateList()\n    }\n\n    filterStatus(s) {\n        this.status = s\n        this.updateList()\n    }\n\n    checkTodo(t) {\n        t.status = 'done'\n        this.update('this.todos')\n        resource.action('done', {\n            id: t.id\n        })\n        this.updateList()\n    }\n\n    updateList() {\n        let version = this.version\n        if (!this.resourcename && !this.listall) {\n            return\n        }\n        let listData = this.listall ? {\n            listall: true,\n            version: version,\n            todoType: this.todoType,\n            priority: this.priority,\n            status: this.status\n        } : {\n            resourcename: this.resourcename,\n            version: version,\n            todoType: this.todoType,\n            priority: this.priority,\n            status: this.status\n        }\n        resource.action('list', listData).then(result => {\n            this.todos = result\n            this.update('this.todos')\n            let versions = {}\n            let time = 0\n            for (let item of result) {\n                if (item.status == 'open' && item && Number.isInteger(item.time * 1)) {\n                    time += item.time * 1\n                }\n                versions[item.version] = item.version\n            }\n            if (!this.versionOptions) {\n                let versionKeys = Object.keys(versions)\n                versionKeys.sort(this.cmpVersions);\n\n                let versionOptions = versionKeys.map(v => {\n                    return {\n                        name: v,\n                        value: v\n                    }\n                })\n\n                this.setAttribute('versionOptions', versionOptions);\n            }\n\n            this.setAttribute('time', time)\n        });\n    }\n    get resourcename() {\n        return this._resourcename\n    }\n    addToDo(todo) {\n        let todoData = Object.assign({}, todo, {\n            resourcename: this.resourcename\n        });\n        resource.action('insert', todoData)\n        if (!this.todos) {\n            this.todos = []\n        }\n        this.todos.push(todo)\n        this.update('tag.todos.length');\n        this.addtodo.reset()\n        this.setAttribute('viewaction', 'none')\n    }\n    todoEdited(todo) {\n        resource.action('update', todo).then(result => {\n            this.setAttribute('viewaction', 'none')\n            this.updateList()\n            window.location.hash = ''\n        })\n    }\n    todoEditor(todo) {\n        DialogForm.createDialogWithData('todo.item', todo).then( todo => {\n            this.todoEdited(todo)\n        })\n        \/*\n        this.setAttribute('viewaction', 'edit')\n        this.setAttribute('editTodo', todo)\n        window.location.hash = 'edit-todo'\n        *\/\n    }\n    removeElement(todo) {\n        resource.action('delete', {\n            id: todo.id\n        });\n        this.todos.splice(this.todos.indexOf(todo), 1)\n        this.update('tag.todos');\n        this.resourceChanged()\n    }\n    resourceChanged() {\n        this.fire('change', this.todos)\n    }\n}"},"name":"todo","title":"Lista de tareas pendientes","type":"tag","dependencies":[{"name":"form.button","type":"tag","version":"1.0.0"},{"name":"form.checkbox","version":"1.0.0","type":"tag"},{"version":"1.0.0","name":"form.resource","type":"tag"},{"name":"form.text","type":"tag","version":"1.0.0"},{"name":"form.textarea","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"text"},{"version":"1.0.0","type":"tag","name":"dropdown"},{"name":"form.radio","type":"tag","version":"1.0.0"}],"extends_resource":null},"translate":{"id":1064,"parameters":[],"implementation":{"javascript":"class Translation extends Tag {\n    static initialize() {\n        window.translate = function (k, parameters = {}) {\n            if (Translation.translations == undefined) {\n                return k\n            }\n            let translation = Translation.translations[k]\n            if (translation == undefined) {\n                translation = k;\n            } else {\n                if (typeof translation === 'object') {\n\n                    let additionalGeneratedKeys = [];\n                    for(let dependsOn of translation.depends_on) {\n                        additionalGeneratedKeys.push(parameters[dependsOn]);\n                    }\n                    let realKey = k;\n                    if (additionalGeneratedKeys.length > 0) {\n                        realKey += '_' + additionalGeneratedKeys.join('_');\n                     }\n                    if (Translation.translations[realKey] !== undefined) {\n                        return translate(realKey, parameters)\n                    } else {\n                        translation = translation.translation\n                    }\n                }\n                translation = translation.replace(\/\\[\\[(\\w+)\\]\\]\/g, function(_, key) {\n                    return translate(key,parameters);\n                });\n                translation = translation.replace(\/\\[(\\w+)\\]\/g, function(_, key) {\n                    if (typeof parameters != 'object') {\n                        return translate(parameters);\n                    } else {\n                        if (parameters[key] !== undefined) {\n                            return translate(parameters[key]);\n                        } else {\n                            return translate(key);\n                        }\n                    }\n                });\n                \n                translation = translation.replace(\/\\{(\\w+)\\}\/g, function(_, key) {\n                    if (typeof parameters != 'object') {\n                        return parameters;\n                    } else {\n                        if (parameters[key] !== undefined) {\n                            return parameters[key];\n                        } else {\n                            return key;\n                        }\n                    }\n                });\n            }\n            return translation;\n        }\n        let usergroupId = window.loggedInUser$ != undefined ? loggedInUser$.usergroup_id : 0;\n        if (usergroupId == 3) { \/\/ is ADMIN\n            resource.action('load-translation').then(result=> {\n                Translation.translations = result\n                        \n            })\n        }\n        Translation.translations = resource.getData();\n    }\n}"},"data":{"please_select":"Por favor, seleccione...","choose_file":"Elija un archivo","add_translation":"A\u00f1adir traducci\u00f3n","cats":"Gatos","1_cats":"Gato","registration_firstname":"Nombre *","registration_lastname":"Apellido *","registration_country":"Pa\u00eds *","registration_password":"Contrase\u00f1a *","accept_hosting_toc_html":"\u00a1Acepto los <a href=\"\/hosting-terms-and-conditions\" target=\"_blank\" onclick=\"event.stopPropagation()\">t\u00e9rminos y condiciones de alojamiento<\/a>!","registration_mail":"Correo electr\u00f3nico *","accept_toc_html":"Acepto los <a target=\"_blank\" href=\"\/page\/terms-and-conditions\" onclick=\"event.stopPropagation()\">t\u00e9rminos y condiciones<\/a>.","company":"Empresa","username_or_mail":"Nombre de usuario o direcci\u00f3n de correo","remember_me":"Permanecer conectado","password":"Contrase\u00f1a","price_per_unit":"Precio por [unidad]","mail_address":"Correo electr\u00f3nico","website_links":"enlaces web","online_form":"formulario en l\u00ednea","company_website":"Sitio web de la empresa","android_app":"Aplicaci\u00f3n Android","linux_application":"Aplicaci\u00f3n Linux","iphone_app":"Aplicaci\u00f3n para iPhone","1usd_webspace":"1$ Espacio web","9usd_webspace":"9$ Espacio web","virtual_server":"servidor virtual","it_emergency":"Emergencia inform\u00e1tica","programming":"Programaci\u00f3n","content_creation":"Creaci\u00f3n de contenidos","logo_design":"Dise\u00f1o de logotipos","newsletter":"Bolet\u00edn","windows_app":"aplicaci\u00f3n para windows","corp_webdesign":"Corp. Dise\u00f1o web","25k_visitors":"25.000 visitantes","it_support":"Soporte inform\u00e1tico","web_app":"Aplicaci\u00f3n web","click_working":"Haga clic en Trabajar","3usd_webspace":"3$ Espacio web","contact_your_name":"Su nombre","contact_your_mail":"Su direcci\u00f3n postal","contact_subject":"Asunto","contact_message":"Mensaje","translation_key":"Clave de traducci\u00f3n","language":"Idioma","translation":"Traducci\u00f3n","waiting_for_verification":"A la espera de la verificaci\u00f3n","take_for_verification":"Iniciar verificaci\u00f3n","set_valid":"La tarea es v\u00e1lida","take_task":"Asumir la tarea \/ Trabajar en la tarea","take_for_review":"Iniciar la revisi\u00f3n","integrate_change":"Integrar el cambio","again_test":"prueba de nuevo","resource_add_translation_title_available_in_javascript":"Disponible en el navegador","autotranslate_label":"Traducir autom\u00e1ticamente","OK":"OK","editor_menu_add_resource":"A\u00f1adir recurso...","editor_menu_delete_resource":"Borrar recurso","editor_menu_create_project":"Crear proyecto...","editor_menu_open_project":"Proyecto abierto...","editor_menu_todos":"Tareas pendientes","editor_menu_search":"Buscar...","editor_menu_submit_work":"Archivo...","editor_menu_update":"Actualizaci\u00f3n...","editor_menu_translator":"Traducciones","editor_menu_overview":"Informaci\u00f3n","editor_menu_config":"Configuraci\u00f3n","editor_menu_defaults":"Por defecto","editor_menu_vscode":"Editor","editor_menu_parameters":"Par\u00e1metros","editor_menu_dependencies":"Dependencias","editor_menu_view":"comprobar","editor_menu_designer":"dise\u00f1o","editor_menu_development":"Tareas","editor_menu_todo":"Lista de tareas pendientes","editor_menu_debug":"Depurar","editor_menu_access":"Control de acceso","editor_menu_servers":"Servidores","editor_menu_current_task":"Tarea actual:","editor_menu_tasks":"Tareas","editor_menu_account":"Cuenta","editor_menu_your_skills":"Habilidades","editor_menu_render_html_tutorial":"Documentaci\u00f3n","editor_menu_support":"Ayuda","editor_menu_buy_coins":"Comprar monedas","editor_menu_help_mode_on":"\u2713 Modo Ayuda","editor_menu_help_mode_off":"Modo Ayuda","delete":"Borrar","ignore":"Ignore","auto_translate":"Traducci\u00f3n autom\u00e1tica","import_main_db":"Importar","language_code_long":"es-US","editor_menu_errors":"Errores","missing_dependencies":"Hemos detectado que est\u00e1 utilizando ciertos componentes sin las dependencias necesarias. \u00bfDesea que el editor las a\u00f1ada autom\u00e1ticamente?","add_dependencies":"A\u00f1adir dependencias","server_deletion_confirmation":"\u00bfEst\u00e1 seguro de que desea eliminar el servidor?","cache_cleared_success_message":"La cach\u00e9 se ha borrado correctamente.","server_addition_success_message":"El servidor se ha a\u00f1adido correctamente.","server_new_name_prompt":"Especifique el nuevo nombre de su servidor:","server_new_title_prompt":"Por favor, especifique el nuevo t\u00edtulo para su servidor:","fund_your_account":" Deposite {valor} USD en su cuenta","local_currency":"\u20ac","ok_btn":"OK","resource_deletion_confirmation":"\u00bfEst\u00e1s seguro de que quieres borrar el recurso titulado {title} con el nombre {name}?","fill_out_form_field":"Rellene este campo.","msg_entered_current_password_wrong":"La contrase\u00f1a introducida es incorrecta.","type_tag":"Tag (HTML, CSS, JavaScript y PHP)","type_webservice":"Servicio web","type_html":"Etiqueta HTML","type_object":"Objeto (Definici\u00f3n)","type_dbtable":"Tabla de base de datos","type_validator":"Validador","type_php_library":"Biblioteca PHP","to_do_type_improvement":"Mejora","to_do_type_feature":"Caracter\u00edstica","to_do_type_idea":"Idea","priority_1":"Bajo","priority_2":"Medio","priority_3":"Alta","help_mode_activation_message":"El modo de ayuda ya est\u00e1 activado. \u00a1Ver\u00e1s la documentaci\u00f3n debajo de los campos del formulario y otros textos \u00fatiles!","help_mode_deactivation_message":"Se ha desactivado el modo de ayuda, reanud\u00e1ndose la vista est\u00e1ndar de la interfaz.","rename_file":"Renombrar archivo...","delete_file":"Borrar archivo...","confirm_delete_file":"\u00bfEst\u00e1 seguro de que desea eliminar este archivo?","create_file":"Crear archivo...","format_source_code":"Formato","task_state_own":"Tareas propias","task_state_current_tasks":"Tareas actuales","task_state_waiting_for_verification":"A la espera de la verificaci\u00f3n","task_state_search_worker":"Se busca trabajador","task_state_waiting_for_review":"En espera de revisi\u00f3n","task_state_archived":"Archivado","task_environment_setup_failure":"Fall\u00f3 la configuraci\u00f3n del entorno de tareas.","task_environment_login_success":"El inicio de sesi\u00f3n en el entorno de tareas se ha realizado correctamente.","task_environment_logout_success":"El cierre de sesi\u00f3n se ha realizado correctamente.","to_do_type_bug":"Error","to_do_open":"Abrir","to_do_done":"Hecho","to_do_minutes":"{valor} min.","to_do_work_left":"S\u00f3lo quedan {tiempo} minutos de trabajo.","logout":"Cierre de sesi\u00f3n","admin":"Admin","parameter_type_text":"Texto grande","parameter_type_number":"N\u00famero","parameter_type_options":"Opciones","parameter_type_tagtype":"Tipo de etiqueta","parameter_type_boolean":"Booleano (S\u00ed \/ No)","parameter_type_array":"Lista con elementos de tipo...","parameter_type_string":"Texto","parameter_type_resource":"Instancia de recursos","parameter_type_color":"Color","parameter_type_password":"Contrase\u00f1a","parameter_type_date":"Fecha","parameter_type_db_row":"Fila de base de datos","parameter_type_datasource":"Fuente de datos","parameter_type_resource_params":"Recurso con par\u00e1metros","parameter_type_file":"Archivo","parameter_type_Resource of Type":"Recurso de tipo","parameter_type_radio":"Opciones de radio","parameter_type_translated_string":"Texto traducido","parameter_type_datetime":"Fecha y hora","recently_viewed":"Vistos recientemente","project_files":"Archivos de proyecto","suggest_translation":"Importar desde otra traducci\u00f3n","already_translated_other_key":"La palabra <b>{otra_traduccion}<\/b> en {otro_idioma} ya ha sido traducida con <b>{traduccion_sugerida}<\/b>, bajo la clave de traduccion <u>{otra_clave_traduccion}<\/u>.","sure_reset_all_resources":"\u00bfEst\u00e1 seguro de que desea REINICIAR TODOS LOS RECURSOS y descargar todos los recursos de este servidor?","reset_update_single_file":"\u00bfDesea sincronizar el recurso {resourcename}? \u00a1Esto RESTAURAR\u00c1 SUS CAMBIOS y lo reemplazar\u00e1 con la versi\u00f3n en el servidor!","new":"Nuevo","identical":"Id\u00e9ntico","login":"Inscribirse","task_state_work_in_progress":"En curso","i_agree_to_the_terms_and_conditions":"Acepto los t\u00e9rminos y condiciones *.","task_state_in_review":"En revisi\u00f3n","review_successful":"Revisi\u00f3n exitosa","servers":"Servidores","managed_server":"Servidor gestionado","root_server":"Servidor ra\u00edz dedicado","search_worker":"Se busca trabajador","work_in_progress":"Trabajo en curso","in_review":"En revisi\u00f3n","waiting_for_review":"En espera de revisi\u00f3n","review_rejected":"Trabajo rechazado","back_to_draft":"Restablecer a Borrador","task_state_verification":"Verificaci\u00f3n","finished":"Terminado","task_state_finished":"Terminado","event_variable_documentation":"Contiene los datos del evento, que fue enviado por la funci\u00f3n fire().","custom_function_documentation":"Llama a la funci\u00f3n {functionanme} , definida en el archivo JavaScript.","dont_translate":"No traducir","format_php_code":"Formato PHP","webspace_soon_ready":"Gracias por elegir Metayota. Estamos instalando el software que ha elegido. Su espacio web estar\u00e1 listo en aproximadamente 60 segundos\".","sure_create_webspace":"\u00bfEst\u00e1 seguro de que desea crear el espacio web con la configuraci\u00f3n seleccionada?","new_translation":"A\u00f1adir nuevo art\u00edculo...","translation_added":"Las traducciones se han a\u00f1adido correctamente.","number_format_decimal_separator":",","number_format_group_separator":".","database_table_creation_success_message":"La tabla de la base de datos se ha creado correctamente.","wp_admin_menus":"Men\u00fas de administraci\u00f3n de WordPress"},"name":"translate","title":"Translate Tag","type":"tag","dependencies":[],"extends_resource":null},"translator":{"id":1014,"parameters":[],"implementation":{"html":"<div class=\"translator\">\n    <h1>Traducciones<\/h1>\n\n    <div style=\"display:grid;grid-template-columns:1fr 1fr 1fr;align-items:end;gap:20px;\">\n        <div>\n            <form.text value=\"{this.search}\" (change)=\"this.updateSearch(event)\" label=\"Buscar en\"><\/form.text>\n        <\/div>\n        <div>\n            <form.button (click)=\"this.addNewTranslation(event)\" label=\"A\u00f1adir traducci\u00f3n\"><\/form.button>\n        <\/div>\n        <div>\n        \n            <form.button (click)=\"router$.goto('\/editor\/view\/complete-translations')\" label=\"Completar y limpiar textos\"><\/form.button>\n        \n        <\/div>\n    <\/div>\n\n    <div style=\"display:grid;grid-template-columns:1fr 1fr\">\n        <dropdown value=\"{translate('language_code')}\" (change)=\"this.updateLanguageA(event)\" label=\"Lengua 1\"\n            options=\"{ this.languages }\">\n        <\/dropdown>\n        <dropdown (change)=\"this.updateLanguageB(event)\" label=\"Lengua 2\"\n            options=\"{ this.languages }\">\n        <\/dropdown>\n    <\/div>\n\n\n    <div for=\"translation of this.translations\">\n        <h3 style=\"user-select:all;\">{translation.translation_key}<\/h3>\n        <div style=\"display:grid;grid-template-columns:1fr 1fr\" if=\"!this.displayTextarea(translation)\">\n            <div style=\"margin-right:20px\">\n                <form.text (enter)=\"this.pressedEnter(translation)\" (change)=\"this.changedTranslation(translation,event)\" value=\"{translation.translation}\"><\/form.text>\n            <\/div>\n            <div style=\"margin-left:20px\" if=\"this.language_b != undefined\">\n                <form.text (enter)=\"this.pressedEnterB(translation)\" (change)=\"this.changedTranslationB(translation,event)\" value=\"{translation.translation_b}\"><\/form.text>\n            <\/div>\n        <\/div>\n        <div style=\"display:grid;grid-template-columns:1fr 1fr\" if=\"this.displayTextarea(translation)\">\n            <div style=\"margin-right:20px\">\n                <form.textarea (change)=\"this.changedTranslation(translation,event)\" value=\"{translation.translation}\"><\/form.textarea>\n            <\/div>\n            <div style=\"margin-left:20px\" if=\"this.language_b != undefined\">\n                <form.textarea (change)=\"this.changedTranslationB(translation,event)\" value=\"{translation.translation_b}\"><\/form.textarea>\n            <\/div>\n        <\/div>\n    <\/div>\n\n    <form.button (click)=\"this.saveChanges()\" label=\"Guardar\"><\/form.button>\n\n    <paginator (change)=\"this.pageChanged(event)\" number_of_pages=\"{this.number_of_pages}\"><\/paginator>\n\n<\/div>","css":".pages .form-button {\n    border-radius: 30px;\n    padding:6px;\n    padding-top:2px;\n    padding-bottom: 2px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.pages .btn-container {\n    margin-right: 6px;\n    margin-left: 0px;\n}\n\n.form-button.highlighted {\n    background: blue;\n    color: white;\n}","javascript":"class Translator extends Tag {\n    setup() {\n        this.page = 0\n        this.search = ''\n        resource.action('get_languages').then(languages=> {\n            this.setAttribute('languages', languages.map(v => {\n                return {name:v.language_name,value:v.language_key}\n            }))\n        })\n    }\n    addNewTranslation() {\n        DialogForm.createDialogWithData('add-translation',{}).then(newTranslation=> {\n            resource.action('save',[newTranslation]).then(result=> {\n                toast$.show(result.message,false,result.type)\n            })\n        })\n    }\n    init() {\n        let hash = window.location.hash\n        if (hash != '' && hash != undefined) {\n            this.setAttribute('search',hash.substring(1))\n            history.pushState(\"\", document.title, window.location.pathname + window.location.search); \/\/ remove the #\n        }\n        this.updateLanguageA(translate('language_code'))\n    }\n    updateLanguageA(lang) {\n        this.language_a = lang\n        this.reload()\n    }\n    updateLanguageB(lang) {\n        this.language_b = lang\n        this.reload()\n    }\n    pressedEnter(translation) {\n        let text = translation.translation != undefined ? translation.translation : ''\n        translation.translation = text + \"\\n\"\n        this.update('this.translations')\n    }\n    pressedEnterB(translation) {\n        let text = translation.translation_b != undefined ? translation.translation_b : ''\n        translation.translation_b = text + \"\\n\"\n        this.update('this.translations')\n    }\n    reload() {\n        resource.call({'language_a':this.language_a,'language_b':this.language_b,'page':this.page,'search':this.search}).then(result => {\n            this.setAttribute('translations',result)\n        })\n        this.reloadCount()\n    }\n    updateSearch(search) {\n        this.setAttribute('search',search)\n        this.reload()\n    }\n    changedTranslation(translation,value) {\n        translation.changed = true\n        translation.translation = value\n    }\n    changedTranslationB(translation,value) {\n        translation.changed = true\n        translation.translation_b = value\n        translation.language_b = this.language_b\n    }\n    reloadCount() {\n        resource.call({'language_a':this.language_a,'language_b':this.language_b,'page':this.page,'search':this.search,'count':true}).then(result => {\n             \n            this.setAttribute('page',1)\n            this.setAttribute('number_of_pages',Math.ceil(result.count \/ 15))\n        })\n    }\n    saveChanges() {\n        resource.action('save',this.translations.filter(t => t.changed == true))\n    }\n    pageChanged(page) {\n        this.setAttribute('page',page)\n        this.reload()\n    }\n    displayTextarea(translation) {\n        if (translation.translation == undefined) {\n            return false;\n        }\n        if (translation.translation.length > 150 || (translation.translation_b != undefined && translation.translation_b.length > 150)) {\n            return true;\n        }\n        if (translation.translation.includes(\"\\n\")) {\n            return true;\n        }\n        return false;\n    }\n}"},"name":"translator","title":"Herramienta de traducci\u00f3n","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"dialog"},{"version":"1.0.0","type":"tag","name":"dropdown"},{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"form.text"},{"version":"1.0.0","type":"tag","name":"form.textarea"},{"version":"1.0.0","type":"tag","name":"toast"},{"version":"1.0.0","type":"tag","name":"translate"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"name":"paginator","type":"tag","version":"1.0.0"}],"extends_resource":null},"vs.codeeditor":{"id":57,"parameters":[{"name":"language","type":"string","documentation":"Lenguaje de programaci\u00f3n","title":"Lenguaje de programaci\u00f3n","title_translated":"Programmiersprache","documentation_translated":"Programmiersprache"}],"implementation":{"html":"<div id=\"vscodeeditor\"><\/div>","css":"#vscodeeditor {\n    width: 100%;\n    left: 0px; \n    right: 0px;\n    position: absolute;\n    top: 47px;\n    bottom: 0px;\n    min-height:300px;\n    background: white;\n}\n\n#vscodeeditor .highlight {\n    border-bottom: 2px dotted red;\n}\n\n.myInlineDecoration {\n\tcolor: red !important;\n\tcursor: pointer;\n\ttext-decoration: underline;\n\tfont-weight: bold;\n\tfont-style: oblique;\n}\n.myLineDecoration {\n\tbackground: red;\n\twidth: 5px !important;\n\tleft: 42px !important;\n}\n","javascript":"class VSCodeEditor extends Tag {\n\n    setup() {\n        resource.get({ server_id: editor$.currentServer?.id }).then(tags => {\n            this.tags = tags\n        });\n        if (Resource.wp) {\n            this.definedFunctions = []\n        } else {\n            resource.action('defined_fn', null, true).then(definedFunctions => {\n\n                this.definedFunctions = definedFunctions\n            })\n        }\n    }\n\n    set tab(t) {\n        if (t != this._tab) {\n            this._tab = t\n            this.getErrors()\n        }\n    }\n\n    get tab() {\n        return this._tab\n    }\n\n    set resource(r) {\n        if (r != this._resource) {\n            this._resource = r\n            this.getErrors()\n        }\n    }\n\n    get resource() {\n        return this._resource\n    }\n\n    findLineAndPosition(searchString, fullString) {\n        var position = fullString.indexOf(searchString);\n        var lineNumber = fullString.substr(0, position).split('\\n').length;\n        var linePosition = position - fullString.lastIndexOf('\\n', position - 1);\n        return { lineNumber: lineNumber, linePosition: linePosition };\n    }\n    updateLineNumberHash(modelMarkers) {\n        if (window.location.hash) {\n            let params = window.location.hash.substring(1).split(',')\n            let line = 0;\n            let tab = ''\n            let codepoint = undefined\n            let message = \"Error in your source code\"\n            for (let param of params) {\n                let paramDetail = param.split('=')\n                let paramName = paramDetail[0]\n                let paramValue = paramDetail[1]\n\n                if (paramName == 'line') {\n                    line = paramValue * 1;\n                }\n                if (paramName == 'tab') {\n                    tab = paramValue;\n                }\n                if (paramName == 'codepoint') {\n                    codepoint = decodeURIComponent(paramValue)\n                }\n                if (paramName == 'message') {\n                    message = decodeURIComponent(paramValue)\n                }\n\n            }\n            if (codepoint != undefined) {\n                let pos = this.findLineAndPosition(codepoint, monacoEditor$.getValue())\n                modelMarkers.push({ severity: monaco.MarkerSeverity.Error, startLineNumber: pos.lineNumber * 1, startColumn: pos.linePosition * 1, endLineNumber: pos.lineNumber * 1, endColumn: pos.linePosition + codepoint.length, message: message })\n                monaco.editor.setModelMarkers(monaco.editor.getModels()[0], '', modelMarkers)\n                monacoEditor$.revealLine(pos.lineNumber)\n                monacoEditor$.setPosition({ column: pos.linePosition, lineNumber: pos.lineNumber })\n\n            }\n\n            if (tab != '' || codepoint != undefined) {\n                history.pushState(\"\", document.title, window.location.pathname\n                    + window.location.search);\n            }\n\n        }\n    }\n\n    getLineInfo(textContent, lineNumber) {\n\n        \/\/ Split the text content into an array of lines\n        var lines = textContent.split('\\n');\n\n        \/\/ Get the line specified by the lineNumber argument\n        var line = lines[lineNumber - 1];\n\n        \/\/ Find the position of the first non-whitespace character on the line\n        var firstNonWhitespaceIndex = line.search(\/\\S\/);\n\n        \/\/ If there are no non-whitespace characters on the line, return null\n        if (firstNonWhitespaceIndex === -1) {\n            return {\n                position: 0,\n                length: 5\n            };\n        }\n\n        \/\/ Get the length of the content on the line, ignoring leading and trailing whitespace\n        var contentWithoutWhitespace = line.trim();\n        var contentLength = contentWithoutWhitespace.length;\n\n        \/\/ Return an object containing the position and length of the content on the line\n        return {\n            position: firstNonWhitespaceIndex,\n            length: contentLength\n        };\n    }\n\n    getErrors() {\n        if (!this.resource || !this.tab) {\n            return\n        }\n\n\n        resource.action('get_errors', { resource: this.resource, tab: this.tab }).then(result => {\n            let modelMarkers = []\n            for (let err of result) {\n\n                let lineInfo = this.getLineInfo(monacoEditor$.getValue(), err.line);\n                modelMarkers.push({ severity: monaco.MarkerSeverity.Error, startLineNumber: err.line * 1, startColumn: lineInfo.position + 1, endLineNumber: err.line * 1, endColumn: lineInfo.position + lineInfo.length, message: err.message })\n\n            }\n\n            monaco.editor.setModelMarkers(monaco.editor.getModels()[0], '', modelMarkers)\n            this.updateLineNumberHash(modelMarkers)\n        })\n\n    }\n\n    set language(l) {\n        this._language = l\n        if (this.editor)\n            monaco.editor.setModelLanguage(this.editor.getModel(), l)\n    }\n\n    get language() {\n        return this._language\n    }\n\n    set value(v) {\n        if (!v) {\n            v = ''\n        }\n        this._value = v\n        if (this.editor)\n            this.editor.setValue(v)\n    }\n\n    get value() {\n        if (this.editor) {\n            return this.editor.getValue()\n        }\n        return this._value\n    }\n\n    initToken() {\n        monaco.editor.setModelMarkers(monaco.editor.getModels()[0], '', [{ severity: monaco.Severity.Error, startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 21, message: 'This is just a test!!!' }])\n\n    }\n\n    render(browserElement) {\n\n        this.loadEditor(browserElement.node)\n    }\n\n    hasOpenedBrackets(str) {\n        const indexEqualsDoubleQuote = str.lastIndexOf('=\"');\n        const indexEqualsDoubleQuoteCurlyBrace = str.lastIndexOf('=\"{');\n\n        return indexEqualsDoubleQuoteCurlyBrace >= indexEqualsDoubleQuote;\n    }\n\n    getLastOpenedParameter(valueInRange) {\n        const paramRegex = \/\\s*([\\w-]+|\\([\\w-]+\\))\\s*=\\s*\"[^\"]*$\/;\n        const match = valueInRange.match(paramRegex);\n        return match ? match[1] : null;\n    }\n\n\n    loadEditor(element) {\n        \/\/    require.config({ paths: { 'vs': 'libs\/monaco-editor\/min\/vs' } });\n        \/\/    require(['vs\/editor\/editor.main'], function () {\n\n        \/\/ let element = document.getElementById('vscodeeditor')\/\/.attachShadow({mode: 'closed'})\n\n        this.editor = monaco.editor.create(element, {\n            value: this.value,\n            language: this.language,\n            wordBasedSuggestions: false,\n            theme: 'vs-dark',\n            automaticLayout: true,\n            minimap: {\n                enabled: false,\n                renderCharacters: false\n            }\n        });\n\n        this.publish('monacoEditor$', this.editor)\n        this.editor.onDidChangeModelContent(function (e) {\n            this.fire('change', this.value)\n\n        }.bind(this))\n\n        \/\/ Add a custom action\n        \n        \/\/if (this.editor.getModel().getLanguageId() === 'php') {\n            this.editor.addAction({\n                id: 'formatPHP',\n                label: translate('format_php_code'),\n                keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_F], \/\/ Optional: Set a keybinding\n                contextMenuGroupId: 'navigation', \/\/ Add to context menu\n                contextMenuOrder: 1.5, \/\/ Order in the context menu\n                run: function (ed) {\n                    const val = ed.getValue();\n\n                    GlobalResource.action('rc.formatter', 'format_php', { php: val }).then(result => {\n                        if (result.php) {\n                            ed.setValue(result.php);\n                        }\n                    });\n\n                    return null;\n                }\n            });\n       \/\/ }\n\n        let fn = function getXmlCompletionProvider(monaco) {\n            return {\n                triggerCharacters: ['<', ' ', '\"', '='],\n                provideCompletionItems: function (model, position) {\n                    let valueInRange = model.getValueInRange({ startLineNumber: 1, startColumn: 1, endLineNumber: position.lineNumber, endColumn: position.column });\n                    let language = this.language;\n\n                    if (language == 'html' || language == 'html.php') {\n                        let lastTag = this.getLastOpenedTag(valueInRange);\n                        if (lastTag && lastTag.tagName) {\n                            let tag = this.getTagByName(lastTag.tagName);\n                            if (tag && tag.parameters) {\n                                let completionItems = [];\n                                let lastOpenedParameter = this.getLastOpenedParameter(valueInRange);\n                                if (lastOpenedParameter) {\n                                    let parameterDefinition = tag.parameters.find(param => param.name === lastOpenedParameter)\n                                    let paramType = parameterDefinition ? parameterDefinition.type : 'unknown';\n                                    if (paramType === 'boolean') {\n                                        completionItems.push(\n                                            { label: 'true', insertText: '{true}', documentation: 'Sets the value to true.' },\n                                            { label: 'false', insertText: '{false}', documentation: 'Sets the value to false.' }\n                                        );\n                                    } else {\n                                        \/\/ Other parameter types can be handled here.\n                                    }\n                                    let needsBrackets = true\n                                    if (lastOpenedParameter.startsWith('(') || lastOpenedParameter == 'if' || lastOpenedParameter == 'for') {\n                                        needsBrackets = false\n                                    }\n                                    if (this.hasOpenedBrackets(valueInRange)) {\n                                        needsBrackets = false\n                                    }\n                                    let openBracket = needsBrackets ? '{' : '';\n                                    let closeBracket = needsBrackets ? '}' : '';\n                                    if (lastOpenedParameter.startsWith('(')) {\n                                        completionItems.push(\n                                            { label: 'event', insertText: 'event', documentation: translate('event_variable_documentation') }\n                                        );\n                                    }\n                                    if (editor$.implementation?.javascript != undefined) {\n                                        let jsCode = editor$.implementation?.javascript\n                                        const functionNames = jsCode.match(\/(\\w+)\\s*\\(\\s*(.*?)\\s*\\)\\s*{[\\s\\S]*?}\/g).map(func => func.match(\/(\\w+)\\s*\\(\/)[1]);\n                                        functionNames.forEach(functionName => {\n                                            completionItems.push(\n                                                { label: openBracket + 'this.' + functionName + '()' + closeBracket, insertText: openBracket + \"this.\" + functionName + \"()\" + closeBracket, documentation: translate('custom_function_documentation', functionName) }\n                                            );\n                                        });\n\n                                    }\n                                } else {\n                                    for (let param of tag.parameters) {\n                                        completionItems.push({\n                                            label: param.name,\n                                            kind: monaco.languages.CompletionItemKind.Keyword,\n                                            insertText: param.name + '=\"$0\"',\n                                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                                            documentation: param.documentation_translated,\n                                            detail: param.title_translated\n                                        });\n                                    }\n                                }\n\n                                return { suggestions: completionItems };\n                            }\n                            if (!tag) {\n                                let tags = this.getTagsStartByName(lastTag.tagName);\n\n                                let completionItems = [];\n                                for (let tag of tags) {\n                                    completionItems.push({\n                                        label: tag.name,\n                                        kind: monaco.languages.CompletionItemKind.Keyword,\n                                        insertText: `${tag.name}$0><\/${tag.name}>`,\n                                        insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                                        documentation: tag.documentation\n                                    });\n                                }\n\n                                return { suggestions: completionItems };\n                            }\n                        }\n                    }\n                }.bind(this)\n            };\n        }.bind(this);\n\n        \/\/ Here you'll need to implement 'getLastOpenedParameter' function that \n        \/\/ extracts the last parameter that user is typing from 'valueInRange'.\n\n\n\n        monaco.languages.registerCompletionItemProvider('html', fn(monaco));\n\n\n        \/*  var originalProvider = monaco.languages.getCompletionItemProvider('html');\n  \n          \/\/ Now, override the provider with a new one that filters out the unwanted items\n          monaco.languages.registerCompletionItemProvider('html', {\n              provideCompletionItems: function(model, position, context, token) {\n                  \/\/ First, get the default completions from the original provider\n                  return originalProvider.provideCompletionItems(model, position, context, token).then(function(completions) {\n                      \/\/ Next, filter out the unwanted completion items\n                      completions.suggestions = completions.suggestions.filter(function(item) {\n                          return item.label !== '<!DOCTYPE html>';\n                      });\n  \n                      \/\/ Finally, return the filtered list of completion items\n                      return completions;\n                  });\n              }\n          });*\/\n\n        let phpComplete = function getXmlCompletionProvider(monaco) {\n            return {\n                provideCompletionItems: function (model, position) {\n                    let thisLine = model.getValueInRange({ startLineNumber: position.lineNumber, startColumn: 0, endLineNumber: position.lineNumber, endColumn: position.column })\n                    \/\/var myRegexp = \/([_A-Za-z0-9]*)[\\$,\\' \"(a-zA-Z_]*$\/;\n                    var myRegexp = \/([_A-Za-z0-9.\\-]*)[\\$,\\' \"(a-zA-Z_]*$\/;\n                    var match = myRegexp.exec(thisLine);\n                    let results = []\n                    if (match && match.length > 0) {\n                        let functionName = (match[1]); \/\/ abc\n                        results = this.definedFunctions.filter(fn => fn.name.startsWith(functionName));\n\n                    }\n                    let completionItems = []\n                    for (let result of results) {\n                        completionItems.push({\n                            label: result.name,\n                            kind: monaco.languages.CompletionItemKind.Function,\n                            insertText: result.name + '()',\n                            documentation: result.description,\n                            detail: result.definition\n                        })\n                    }\n                    return { suggestions: completionItems }\n\n                    console.log(thisLine);\n                }.bind(this)\n\n            }\n        }.bind(this)\n\n\n\n\n        monaco.languages.registerCompletionItemProvider('php', phpComplete(monaco));\n        \/*            format: {\n                        autoClosingTags: true\n                    }*\/\n        monaco.languages.html.htmlDefaults.setOptions({\n            suggest: {\n                angular1: false,\n                html5: false,\n                ionic: false,\n            }\n        });\n\n    }\n\n    getTagByName(name) {\n        let tagIdx = this.tags.findIndex(t => { return t.name == name })\n        return this.tags[tagIdx]\n    }\n\n    getTagsStartByName(name) {\n        return this.tags.filter(t => { return t.name.startsWith(name) })\n    }\n\n    getLastOpenedTag(text) {\n        \/\/ get all tags inside of the content\n        var tags = text.match(\/<\\\/*(?=\\S*)([a-zA-Z-\\.]+)\/g);\n        if (!tags) {\n            return undefined;\n        }\n        \/\/ we need to know which tags are closed\n        var closingTags = [];\n        for (var i = tags.length - 1; i >= 0; i--) {\n            if (tags[i].indexOf('<\/') === 0) {\n                closingTags.push(tags[i].substring('<\/'.length));\n            }\n            else {\n                \/\/ get the last position of the tag\n                var tagPosition = text.lastIndexOf(tags[i]);\n                var tag = tags[i].substring('<'.length);\n                var closingBracketIdx = text.indexOf('\/>', tagPosition);\n                \/\/ if the tag wasn't closed\n                if (closingBracketIdx === -1) {\n                    \/\/ if there are no closing tags or the current tag wasn't closed\n                    if (!closingTags.length || closingTags[closingTags.length - 1] !== tag) {\n                        \/\/ we found our tag, but let's get the information if we are looking for\n                        \/\/ a child element or an attribute\n                        text = text.substring(tagPosition);\n                        return {\n                            tagName: tag,\n                            isAttributeSearch: text.indexOf('<') > text.indexOf('>')\n                        };\n                    }\n                    \/\/ remove the last closed tag\n                    closingTags.splice(closingTags.length - 1, 1);\n                }\n                \/\/ remove the last checked tag and continue processing the rest of the content\n                text = text.substring(0, tagPosition);\n            }\n        }\n    }\n\n}"},"name":"vs.codeeditor","title":"Editor de c\u00f3digo","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"vscode.inc"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":""},"db.row.editor":{"id":173,"parameters":[{"name":"table","title":"Cuadro","type":"string","documentation":"Especifique el nombre de la tabla de la base de datos.","required":true,"title_translated":"Table","documentation_translated":"Please specify the database table name."},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":null,"required":null,"title_translated":"Resource Type","documentation_translated":""},{"name":"rowid","title":"ID de fila","type":"number","documentation":"El campo id de la clave primaria.","title_translated":"Row ID","documentation_translated":"The primary key id-field."},{"name":"customer_db","title":"Cliente db","type":"boolean","documentation":"Est\u00e1 en db de clientes.","title_translated":"Customer db","documentation_translated":"Is on customer db."}],"implementation":{"html":"<div>\n    <form.resource showdocumentation=\"{this.showdocumentation}\" element=\"form\" (submit)=\"this.save(event)\" label=\"{this.label}\" submitlabel=\"Guardar\" resourcetype=\"{this.resourcetype}\" value=\"{this.value}\"><\/form.resource>\n<\/div>","javascript":"class JDBRowEditor extends Tag {\n    set table(t) {\n        this._table = t\n    }\n    get table() {\n        return this._table\n    }\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n    }\n    get value() {\n        return this._value\n    }\n    set rowid(rowid) {\n        this._rowid = rowid\n        this.value = null\n        resource.call({action:'load',table:this.table,rowid:this.rowid}).then( value => {\n            this.setAttribute('value',value)\n        })\n    }\n    get rowid() {\n        return this._rowid\n    }\n    set resourcetype(r) {\n        this._resourcetype = r\n        Resource.loaded(r).then( resource => {\n            this.resource = resource;\n            if (resource.parameters) {\n                this.fields = resource.parameters.map( p => p.name )\n            } else {\n                this.fields = []\n            }\n            this.update('this.resourcetype')\n            this.update('this.resource')\n        })\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n    get label() {\n        return this._label\n    }\n    save(data) {\n        let dataToSave = {}\n        for (let field of this.fields) {\n            dataToSave[field] = data[field]\n        }\n        resource.call({action:'save',data:dataToSave,table:this.table,rowid:this.rowid}).then(result=> {\n            if (window.toast$) {\n                toast$.display(result)\n            } else if (result.message != undefined) {\n                alert(result.message)\n            }\n        })\n        this.fire('save',dataToSave)\n    }\n}"},"name":"db.row.editor","title":"Editor de filas de BD","type":"tag","dependencies":[{"version":"1.0.0","name":"form.resource","type":"tag"},{"version":"1.0.0","type":"tag","name":"toast"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"db.table":{"id":172,"parameters":[{"name":"table","title":"Cuadro","type":"string","documentation":"Especifique el nombre de la tabla de la base de datos.","required":null},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":"Nombre del recurso","required":null},{"name":"where","title":"D\u00f3nde","type":"array","documentation":"Especifique qu\u00e9 filas deben mostrarse.","required":null,"options":{"resourcetype":"where"}},{"name":"label","title":"Etiqueta","type":"string","documentation":"El t\u00edtulo de la tabla.","required":null},{"name":"serverdb","title":"Servidor DB","type":"boolean","documentation":"Ejecutar la sentencia en la BD del servidor. \u00a1Opci\u00f3n para desarrolladores del editor METAYOTA!","readonly":false,"required":false}],"implementation":{"html":"<div class=\"j-db-table\">\n    <h3 if=\"this.label != undefined\">{this.label}<\/h3>\n    <table if=\"this.objs and this.objs.length > 0\" class=\"table\">\n        <thead>\n            <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                <th>{parameter.title}<\/th>\n            <\/tr>\n        <\/thead>\n        <tbody for=\"obj of this.objs\">\n            <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                <td><object.viewparameter showlabel=\"{false}\" parameter=\"{parameter}\" value=\"{obj[parameter.name]}\"><\/object.viewparameter><\/td>\n                <td last>Delete edit<\/td>\n            <\/tr>\n        <\/tbody>\n    <\/table>\n    \n<\/div>","css":"j-db-table td, .view-text-value {\n    user-select: text;\n}","javascript":"class JDBTable extends Tag {\n    set where(w) {\n        this._where = w\n        this.reloadData()\n    }\n    get where() {\n        if (!this._where) {\n            this._where = []\n        }\n        return this._where\n    }\n    set table(t) {\n        this._table = t\n        this.reloadData()\n    }\n    get table() {\n        return this._table\n    }\n    reloadData() {\n        if (this.table) {\n            let where = {}\n            for (let whereItem of this.where) {\n                where[whereItem.field] = whereItem.value\n            }\n            resource.call({table:this.table,where:where}).then(result => {\n                this.objs = result \n                this.update('this.objs')\n            })\n        }\n    }\n    set resourcetype(r) {\n        if (this._resourcetype !== r) {\n            this._resourcetype = r\n            Resource.loaded(r).then( resource => {\n                this.resource = resource\n                this.update('this.resource')\n                this.update('this.resourcetype')\n            })\n        }\n        this.reloadData()\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n\n}"},"name":"db.table","title":"Visor de tablas de bases de datos","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"object","name":"where"},{"version":"1.0.0","name":"object.viewparameter","type":"tag"},{"version":"1.0.0","type":"tag","name":"dialog"}],"extends_resource":null},"form.resource":{"id":805,"parameters":[{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":"tipo de recurso","required":false,"readonly":false,"title_translated":"Ressourcentyp","documentation_translated":"resourcentyp"},{"name":"label","title":"Etiqueta","type":"string","documentation":"El t\u00edtulo del formulario.","required":null,"title_translated":"Feldbeschriftung","documentation_translated":"Der Formulartitel."},{"name":"submitlabel","title":"Enviar etiqueta","type":"string","documentation":"El texto del bot\u00f3n a enviar (guardar, actualizar, etc.)","required":null,"title_translated":"Absenden Knopf Beschriftung","documentation_translated":"Der Text des Buttons zum Absenden (speichern, aktualisieren, etc.)"},{"name":"cancellabel","title":"Cancelar etiqueta","type":"string","documentation":"Cuando se establece la \"etiqueta de cancelaci\u00f3n\", el formulario muestra un m\u00e9todo de cancelaci\u00f3n y ejecuta el evento 'cancel'.","readonly":false,"required":false,"title_translated":"Etikett stornieren","documentation_translated":"Wenn das \"Abbruch-Etikett\" gesetzt ist, zeigt das Formular eine Abbruchmethode an und f\u00fchrt das 'Abbruch'-Ereignis aus."},{"name":"change","title":"Evento de cambio","type":"string","documentation":null,"event":true,"title_translated":"\u00c4nderungsereignis","documentation_translated":""},{"name":"(submit)","title":"Enviar evento","type":"string","documentation":null,"event":true,"title_translated":"Veranstaltung einreichen","documentation_translated":""},{"name":"subtitle","title":"Subt\u00edtulo","type":"string","documentation":null,"title_translated":"Untertitel","documentation_translated":""},{"name":"showdocumentation","title":"Mostrar documentaci\u00f3n","type":"boolean","documentation":"Muestre la documentaci\u00f3n (S\u00ed \/ No).","readonly":false,"required":false,"title_translated":"Dokumentation anzeigen","documentation_translated":"Zeige die Dokumentation (Ja \/ Nein)."},{"name":"element","title":"Elemento","type":"string","documentation":"El nombre del elemento, para acceder a \u00e9l con JavaScript.","title_translated":"Element","documentation_translated":"Der Name des Elements, um darauf mit JavaScript zuzugreifen."},{"name":"value","title":"Valor","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Wert","documentation_translated":""}],"implementation":{"html":"<div class=\"jj-form-resource\">\n    <h2 if=\"this.label != undefined\">{ this.label != undefined ? translate(this.label) : (this.resource ? this.resource.title : '') }<\/h2>\n    <p if=\"this.subtitle != null\">{this.subtitle}<\/p>\n    <form (submit)=\"this.saveClicked()\" autocomplete=\"{ this.autocomplete == true ? 'true' : 'false' }\" target=\"{this.target ? this.target : '_self'}\" element=\"form\" method=\"{this.method}\" action=\"{this.action}\">\n        <design.resparameter readonly=\"{this.readonly}\" showdocumentation=\"{this.showdocumentation}\" documentation=\"{this.documentation}\" (change)=\"this.changed(event)\" element=\"parameterEl\" tag=\"{this.resource}\" value=\"{this.value}\"><\/design.resparameter>\n        <div if=\"this.submitlabel != null\">\n            <form.button icon=\"{this.icon}\" enabled=\"{this.enabled && (this.submited !== true)}\" (click)=\"this.saveClicked()\" label=\"{this.submitlabel != null ? translate(this.submitlabel) : translate('save')}\"><\/form.button>\n        <\/div>\n        <div if=\"this.cancellabel != null\">\n            <form.button enabled=\"{this.enabled}\" (click)=\"this.cancelClicked()\" label=\"{this.cancellabel}\"><\/form.button>\n        <\/div>\n    <\/form>\n<\/div>","css":".error-message {\n    color: #ce2323;\n}\n\n.element-documentation {\n    color: #555;\n}\n\n.j-settings .element-documentation {\n    color:#696262;\n}","javascript":"class ResourceFormTag extends Tag {\n    setup() {\n        this.autocomplete = false\n    }\n    init(){\n        this._enabled = true\n    }\n    set target(t) {\n        this._target = t\n        this.update('this.target')\n    }\n    get target() {\n        return this._target\n    }\n    set showdocumentation(s) {\n        this._showdocumentation = s\n        this.update('this.showdocumentation')\n    }\n    get showdocumentation() {\n        return this._showdocumentation\n    }\n    set action(a) {\n        this._action = a\n        this.update('this.action')\n    }\n    get action() {\n        return this._action\n    }\n    set method(m) {\n        this._method = m\n        this.update('this.method')\n    }\n    get method() {\n        return this._method\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n    get label() {\n        return this._label\n    }\n    set enabled(e) {\n        this._enabled = e\n    }\n    get enabled() {\n        return this._enabled\n    }\n    set documentation(d) {\n        this._documentation = d\n        this.update('this.documentation')\n    }\n    get documentation() {\n        return this._documentation\n    }\n    set subtitle(s) {\n        this._subtitle = s\n        this.update('this.subtitle')\n    }\n    isValid() {\n        return this.parameterEl.isValid()\n    }\n    get subtitle() {\n        return this._subtitle\n    }\n    set submitlabel(l) {\n        this._submitlabel = l\n        this.update('this.submitlabel')\n    }\n    get submitlabel() {\n        return this._submitlabel\n    }\n    set cancellabel(c) {\n        this._cancellabel = c \n        this.update('this.cancellabel')\n    }\n    get cancellabel() {\n        return this._cancellabel\n    }\n    set resourcetype(r) {\n        this._resourcetype = r\n        if (r) {\n            Resource.loaded(r).then( resource => {\n                this.resource = resource;\n                this.update('this.resource')\n                this.update('this.resourcetype')\n            })\n        } else {\n            this.resource = null\n            this.update('this.resource')\n            this.update('this.resourcetype')\n        }\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n    }\n    get value() {\n        return this._value\n    }\n    clear() {\n        this.value = {}\n    }\n    reset() {\n        this.value = {}\n    }\n    changed(event) {\n        this.setAttribute('submitted', false)\n        this._value = event;\n        this.fire('change',event)\n    }\n    cancelClicked() {\n        this.value = {}\n        this.fire('cancel')\n    }\n    saveClicked() {\n        if (!this.enabled || (this.submitted === true)) {\n            return;\n        }\n        \/\/this.setAttribute('submitted', true)\n        Resource.loaded(this._resourcetype).then( resource => {\n            if (this.isValid()) {\n                let obj = Resource.create(this._resourcetype)\n                if (obj instanceof Tag) {\n                    obj = {}\n                }\n                Object.assign(obj, this.parameterEl.value)\n                this.fire('submit', obj)\n                if (!!this.action) {\n                    this.form.submit()\n                }\n            }\n        })\n    }\n    \n}"},"name":"form.resource","title":"Formulario de recursos","type":"tag","dependencies":[{"name":"form.button","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"design.resparameter"}],"extends_resource":null},"form.text":{"id":924,"parameters":[{"name":"label","type":"string","documentation":"Es la etiqueta del elemento formulario.","title":"Etiqueta","title_translated":"Feldbeschriftung","documentation_translated":"Dies ist das Label f\u00fcr das Formularelement."},{"name":"value","type":"string","documentation":"El valor actual del elemento formulario.","title":"Valor","title_translated":"Wert","documentation_translated":"Der aktuelle Wert des Formularelements."},{"name":"placeholder","type":"translated_string","documentation":"El marcador de posici\u00f3n que debe aparecer, cuando no hay ning\u00fan valor introducido.","title":"Marcador de posici\u00f3n","title_translated":"Platzhalter","documentation_translated":"Der Platzhalter, der erscheinen sollte, wenn kein Wert eingegeben wurde.","readonly":false,"required":false},{"name":"type","title":"Tipo de entrada","type":"options","documentation":"El tipo de entrada (texto, contrase\u00f1a, etc.)","options":{"options":[{"name":"Texto","value":"text"},{"name":"Color","value":"color"},{"name":"Contrase\u00f1a","value":"password"},{"name":"Tiempo","value":"time"},{"name":"Week","value":"week"},{"name":"URL","value":"url"},{"name":"Telephone","value":"tel"},{"name":"Date and time","value":"datetime-local"},{"name":"Month","value":"month"},{"name":"N\u00famero","value":"number"},{"name":"Mail address","value":"email"},{"name":"Range","value":"range"}]},"readonly":false,"required":false,"title_translated":"Eingabetyp","documentation_translated":"Die Art der Eingabe (Text, Passwort, usw.)"},{"name":"maxlength","title":"Longitud m\u00e1xima","type":"number","documentation":null,"readonly":false,"required":false,"options":{"suffix":"Characters"},"title_translated":"Maximale L\u00e4nge","documentation_translated":""},{"name":"autocomplete","title":"resource_form_text_title_autocomplete","type":"options","documentation":"","options":{"options":[{"name":"autocomplete_off","value":"off"},{"name":"autocomplete_on","value":"on"},{"name":"autocomplete_name","value":"name"},{"name":"autocomplete_honorific_prefix","value":"honorific-prefix"},{"name":"autocomplete_given_name","value":"given-name"},{"name":"autocomplete_additional_name","value":"additional-name"},{"name":"autocomplete_family_name","value":"family-name"},{"name":"autocomplete_honorific_suffix","value":"honorific-suffix"},{"name":"autocomplete_nickname","value":"nickname"},{"name":"autocomplete_email","value":"email"},{"name":"autocomplete_username","value":"username"},{"name":"autocomplete_new_password","value":"new-password"},{"name":"autocomplete_current_password","value":"current-password"},{"name":"autocomplete_one_time_code","value":"one-time-code"},{"name":"autocomplete_organization_title","value":"organization-title"},{"name":"autocomplete_organization","value":"organization"},{"name":"autocomplete_street_address","value":"street-address"},{"name":"autocomplete_shipping","value":"shipping"},{"name":"autocomplete_billing","value":"billing"},{"name":"autocomplete_address_line1","value":"address-line1"},{"name":"autocomplete_address_line2","value":"address-line2"},{"name":"autocomplete_address_line3","value":"address-line3"},{"name":"autocomplete_address_level4","value":"address-level4"},{"name":"autocomplete_address_level3","value":"address-level3"},{"name":"autocomplete_address_level2","value":"address-level2"},{"name":"autocomplete_address_level1","value":"address-level1"},{"name":"autocomplete_country","value":"country"},{"name":"autocomplete_country_name","value":"country-name"},{"name":"autocomplete_postal_code","value":"postal-code"},{"name":"autocomplete_cc_name","value":"cc-name"},{"name":"autocomplete_cc_given_name","value":"cc-given-name"},{"name":"autocomplete_cc_additional_name","value":"cc-additional-name"},{"name":"autocomplete_cc_family_name","value":"cc-family-name"},{"name":"autocomplete_cc_number","value":"cc-number"},{"name":"autocomplete_cc_exp","value":"cc-exp"},{"name":"autocomplete_cc_exp_month","value":"cc-exp-month"},{"name":"autocomplete_cc_exp_year","value":"cc-exp-year"},{"name":"autocomplete_cc_csc","value":"cc-csc"},{"name":"autocomplete_cc_type","value":"cc-type"},{"name":"autocomplete_transaction_currency","value":"transaction-currency"},{"name":"autocomplete_transaction_amount","value":"transaction-amount"},{"name":"autocomplete_language","value":"language"},{"name":"autocomplete_bday","value":"bday"},{"name":"autocomplete_bday_day","value":"bday-day"},{"name":"autocomplete_bday_month","value":"bday-month"},{"name":"autocomplete_bday_year","value":"bday-year"},{"name":"autocomplete_sex","value":"sex"},{"name":"autocomplete_tel","value":"tel"},{"name":"autocomplete_tel_country_code","value":"tel-country-code"},{"name":"autocomplete_tel_national","value":"tel-national"},{"name":"autocomplete_tel_area_code","value":"tel-area-code"},{"name":"autocomplete_tel_local","value":"tel-local"},{"name":"autocomplete_tel_local_prefix","value":"tel-local-prefix"},{"name":"autocomplete_tel_local_suffix","value":"tel-local-suffix"},{"name":"autocomplete_tel_extension","value":"tel-extension"},{"name":"autocomplete_impp","value":"impp"},{"name":"autocomplete_url","value":"url"},{"name":"autocomplete_photo","value":"photo"},{"name":"autocomplete_webauthn","value":"webauthn"}],"displaytext":"","label":"","multiple":false,"default":false,"datasource":null,"translate_options":true,"sort":false},"readonly":false,"required":false,"title_translated":"Automatische Vervollst\u00e4ndigung","documentation_translated":""}],"implementation":{"html":"<div class=\"form-text {this.class}\"> \r\n\t<label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)}<\/label>\r\n\t<input \r\n\t\tname=\"{this.name}\"\r\n        class=\"input-{this.type ? this.type : 'text'} form-element\"\r\n\t\tspellcheck=\"false\" \r\n\t\tautocomplete=\"{this.autocomplete ?  this.autocomplete : 'off'}\"\r\n\t\tplaceholder=\"{this.placeholder}\" \r\n\t\telement=\"input\" \r\n\t\tname=\"{this.name}\" \r\n\t\ttype=\"{this.type != 'undefined' ? this.type : 'text'}\" \r\n\t\tvalue=\"{this.value}\" \r\n        maxlength=\"{this.maxlength}\"\r\n\t\t(blur)=\"this.isValid()\"\r\n\t\t(input)=\"this.resourceChanged(node.value)\" \r\n        (keypress)=\"this.keypress(event)\"\r\n\t\treadonly=\"{this.readonly}\"\/>\r\n    <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\r\n<\/div>","css":".form-text {\r\n    margin-top: 16px;\r\n    margin-bottom: 16px;\r\n}\r\n\r\ninput:focus::-webkit-input-placeholder {\r\n    color: white;\r\n}\r\n\r\n.form-text input {\r\n    color: black;\r\n    width: calc(100% - 32px);\r\n    border: 1.6px solid black;\r\n    height: auto;\r\n    border-radius: 6px;\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n    padding-top: 8px;\r\n    padding-bottom: 8px;\r\n    outline: 0;\r\n    cursor: pointer;\r\n    background: #f3f3f3;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n}\r\n\r\n.form-text input[readonly] {\r\n    color: #777;\r\n}\r\n\r\n.form-text input::placeholder, .form-text input:focus::placeholder, .form-text input:active::placeholder {\r\n    color: #929292;\r\n}\r\n\r\ninput.input-text.form-element::placeholder {\r\n    color: #929292;\r\n}\r\n\/*\r\n.form-text input:focus::placeholder,\r\n.form-text input:focus::-webkit-input-placeholder,\r\n.form-text input:focus::-ms-input-placeholder {\r\n    color: white !important;\r\n}*\/\r\n\r\n.form-text label {\r\n    display: block;\r\n    margin-bottom: 4px;\r\n}","javascript":"class FormText extends RCBaseFormElement {\r\n\r\n\tset label(l) {\r\n\t\tthis._label = l\r\n\t\tthis.update('this.label')\r\n\t}\r\n\r\n\tget label() {\r\n\t\treturn this._label\r\n\t}\r\n\r\n    set readonly(re) {\r\n        this._readonly = re\r\n    }\r\n\r\n    get readonly() {\r\n        return this._readonly\r\n    }\r\n\r\n    set autocomplete(a) {\r\n        this._autocomplete = a\r\n        this.update('this.autocomplete')\r\n    }\r\n\r\n    get autocomplete() {\r\n        return this._autocomplete\r\n    }\r\n\r\n    resourceChanged(value) {\r\n        if (this.readonly === true) return\r\n\t    this._value = value\r\n\t    this.fire('change', value)\r\n    }\r\n    \r\n    keypress(e) {\r\n        if (!e) e = window.event;\r\n        var keyCode = e.keyCode || e.which;\r\n        if (keyCode == '13'){\r\n            this.fire('enter','pressed enter')\r\n            return false;\r\n        }\r\n    }\r\n\r\n    set value(v) {\r\n        if (v === undefined || v === null) {\r\n            v = ''\r\n        }\r\n        this._value = v\r\n        this.update('this.value')\r\n        if (this.input) {\r\n            this.input.value = v\r\n        }\r\n    }\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n    set type(t) {\r\n        this._type = t\r\n        this.update('this.type')\r\n    }\r\n\r\n    get type() {\r\n        return this._type\r\n    }\r\n    set placeholder(p) {\r\n        this._placeholder = p\r\n        this.update('this.placeholder')\r\n    }\r\n\r\n    get placeholder() {\r\n        return this._placeholder\r\n    }\r\n}"},"name":"form.text","title":"Elemento de formulario de texto","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"}],"extends_resource":null},"object.viewparameter":{"id":1000,"parameters":[],"implementation":{"html":"<div class=\"object-view-parameter\">\n    <div if=\"this.typeInfo != undefined\">\n        <label if=\"this.showlabel !== false\">{translate(this.parameter.title)}<\/label>\n        <div class=\"object-view-content\"><include attributes=\"{ this.attributesForElement }\" (change)=\"this.resourceChanged(event);\" tag=\"{this.typeInfo.viewer}\"><\/include><\/div>\n        <p if=\"this.documentation == true and this.attributesForElement['documentation']\" class=\"documentation\">{this.attributesForElement['documentation']}<\/p>\n    <\/div>\n<\/div>","css":".object-view-parameter {\n    margin-bottom: 16px;\n    margin-top: 16px;\n}\n\n.object-view-parameter label {\n    display: inline-block;\n    width: 280px;\n    font-weight: normal;\n}\n\n.object-view-content {\n    display: inline-block;\n    font-weight: bold;\n}","javascript":"class JJObjViewParameter extends Tag {\n    set parameter(p) {\n        this._parameter = p\n        let cls = Resource.cls('parametertype')\n        if (cls) {\n            let typeInfo = cls.getTypeByName(p.type)\n            this.typeInfo = typeInfo\n            this.update('this.typeInfo')\n        } else {\n            console.warn('object.viewparameter did not resolve parameter type class')\n        }\n        this.update('this.parameter')\n    }\n    get parameter() {\n        return this._parameter\n    }\n    set value(v) {\n        this._value = v\n        this.update('this.attributesForElement')\n    }\n    get value() {\n        return this._value\n    }\n    get attributesForElement() {\n        \n        let obj = Object.assign( {}, this.parameter.options, { label: this.label, value: this.value, value_translated:this.value_translated } );\n        return obj;\n    }\n}"},"name":"object.viewparameter","title":"Ver par\u00e1metros","type":"tag","dependencies":[{"version":"1.0.0","name":"parametertype","type":"object"}],"extends_resource":null},"editor.manage.project":{"id":665,"parameters":[{"name":"title","title":"T\u00edtulo","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Titel","documentation_translated":""},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":null,"readonly":false,"required":false,"title_translated":"Ressourcentyp","documentation_translated":""},{"name":"table","title":"Cuadro","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Tisch","documentation_translated":""},{"name":"show_description","title":"Mostrar documentaci\u00f3n","type":"boolean","documentation":"","readonly":false,"required":false,"title_translated":"Zeige Dokumentation","documentation_translated":""}],"implementation":{"html":"<div class=\"database-editor\">\n    <h1>{this.title}<\/h1>\n\n    <form.text placeholder=\"Buscar en\" (change)=\"this.searchChanged(event)\"><\/form.text>\n    <div style=\"overflow-x: scroll;max-width: 100%;\">\n        <p if=\"this.objs and this.objs.length == 0\">\n            No se han encontrado entradas.        <\/p>\n        <table if=\"this.objs and this.objs.length > 0\" class=\"table wp-list-table widefat fixed striped table-view-list\">\n            <thead>\n                <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                    <th first>\n                        Acciones                    <\/th>\n                    <th (click)=\"this.sortBy(parameter.name)\">{translate(parameter.title)}\n                        {this.getSortIndicator(parameter.name)}<\/th>\n                <\/tr>\n            <\/thead>\n            <tbody for=\"obj of this.objs\">\n                <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                    <td first>\n                        <i (click)=\"this.editRow( obj.id )\" class=\"action\"><img class=\"icon\"\n                                src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/edit.svg\" \/><\/i>\n                        <i (click)=\"this.deleteRow( obj.id )\" class=\"action\"><img class=\"icon\"\n                                src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\" \/><\/i>\n                    <\/td>\n                    <td>\n                        <object.viewparameter showlabel=\"{false}\" parameter=\"{parameter}\" value=\"{obj[parameter.name]}\" value_translated=\"{obj[parameter.name+'_translated']}\">\n                        <\/object.viewparameter>\n                    <\/td>\n                <\/tr>\n            <\/tbody>\n        <\/table>\n    <\/div>\n    <div class=\"tablenav bottom\">\n        <paginator number_of_pages=\"{this.number_of_pages}\" (change)=\"this.pageChanged(event)\"><\/paginator>\n        <form.button (click)=\"this.showAddDialog()\" label=\"A\u00f1adir\"><form.button>\n    <\/form.button>\n<\/div>","css":".pages .form-button {\n    min-width: 30px;\n    min-height: 30px;\n    border-radius: 3px;\n    padding: 0px;\n}\n\n.database-editor table {\n    width: 100%;\n}\n\n.database-editor tr:nth-child(even), .database-editor thead tr {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.database-editor td, .database-editor td .object-view-content {\n    font-weight: normal;\n}\n\n.pages .btn-container {\n    margin-right: 8px;\n}\n\n.database-editor table td, .database-editor table td .view-text-value {\n    max-width: 150px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\n\n\n.database-editor .object-view-parameter  {\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\n.j-editor .database-editor table.table td {\n    padding-top: 3px;\n    padding-bottom: 3px;\n}\n\n.form-button.highlighted {\n    background: white;\n    color: black;\n}","javascript":"class DatabaseTableEditor extends Tag {\n    setup() {\n        this.main_server = resource.getData().main_server\n        this.show_description = false\n    }\n    init() {\n        this.page = 1\n    }\n    set title(t) {\n        this._title = t\n    }\n    get title() {\n        return this._title\n    }\n    set table(t) {\n        this._table = t\n        this.update('this.table')\n        this.reloadData()\n    }\n    get table() {\n        return this._table\n    }\n\n    getSortIndicator(parameter) {\n        if (this.sort == parameter && this.order != undefined) {\n            if (this.order == 'ASC') {\n                return '\u2193';\n            } else {\n                return '\u2191';\n            }\n        }\n        return '';\n    }\n    countItems() {\n        resource.call({table:this.table,resourcetype:this.resourcetype,count:true,search:this.search}).then(result => {\n            this.setAttribute('count', result)\n            this.setAttribute('number_of_pages', Math.ceil(result\/15))\n        })\n    }\n    pageChanged(page) {\n        this.setAttribute('page', page)\n        this.reloadData()\n    }\n    sortBy(attribute) {\n        if (attribute != this.sort) {\n            this.setAttribute('order','ASC')\n        } else {\n            if (this.order == 'DESC') {\n                this.setAttribute('order','ASC')\n            } else {\n                this.setAttribute('order','DESC')\n            }\n        }\n        \n        this.setAttribute('sort',attribute)\n        this.reloadData()\n        this.update('this.getSortIndicator')\n    }\n    searchChanged(query) {\n        this.search = query\n        this.reloadData()\n    }\n    reloadData() {\n        if (this.table != undefined) {\n            resource.call({table:this.table,resourcetype:this.resourcetype,page:this.page,sort:this.sort,order:this.order,search:this.search}).then(result => {\n                if (result.length == 0 && this.page > 1) {\n                    this.setAttribute('page',this.page-1);\n                    this.reloadData()\n                    return\n                }\n                this.objs = result \n                this.update('this.objs')\n            })\n            this.countItems()\n        }\n    }\n    set resourcetype(r) {\n        if (r != undefined && this._resourcetype !== r) {\n            \n            this._resourcetype = r\n            \n            Resource.loaded(this.getServerPrefix()+r).then( resource => {\n                this.setAttribute('resource',resource)\n                this.update('this.resourcetype')\n                this.update('this.objs')\n                this.update('this.resource')\n            });\n        }\n    }\n    get resourcetype() {\n        if (this._resourcetype == undefined) {\n            return this._table\n        }\n        return this._resourcetype\n    }\n    deleteRow(rowid) {\n        if (confirm('Are you sure you want to delete this row?')) {\n            resource.action('delete', {table:this._resourcetype, row_id:rowid}).then(result => {\n                this.reloadData();\n            })\n        }\n    }\n    editRow(rowid) {\n        let value = this.objs.filter( obj => obj.id == rowid)[0]\n        DialogForm.createDialogWithData(this.getServerPrefix()+this.resourcetype,value,{'show_description':this.show_description}).then(resourceData => {\n            resource.action('update', {'table':this.table,'rowid':rowid, 'data':resourceData}).then( result => {\n                this.reloadData();\n            }) \n        })\n    }\n    getServerPrefix() {\n        debugger\n        if (this.main_server) {\n            return 'server:'\n        } else {\n            return '';\n        }\n    }\n    showAddDialog() {\n        DialogForm.createDialogWithData(this.getServerPrefix()+this.resourcetype, {}, {'show_description':this.show_description}).then( resourceData => {\n            resource.action('insert', {'table':this.table, 'resourceData':resourceData}).then(result => {\n                this.reloadData()\n            })\n        })\n    }\n}"},"name":"editor.manage.project","title":"Gestionar proyectos","configuration":{"resourcetype":"rc.project","table":"project","title":"Manage Projects"},"data":{"main_server":false},"allowed_subelements":null,"type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"db.row.editor"},{"version":"1.0.0","type":"tag","name":"db.table"},{"version":"1.0.0","type":"tag","name":"dialog"},{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"form.resource"},{"name":"form.text","type":"tag","version":"1.1.0"},{"name":"object.viewparameter","type":"tag","version":"1.1.0"},{"version":"1.0.0","type":"tag","name":"resource"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"name":"paginator","type":"tag","version":"1.0.0"}],"extends_resource":"database.table.editor"},"editor.parameters":{"id":52,"parameters":[{"name":"test","title":"docu2","type":"string","documentation":null,"validators":[{"name":"rc.validator.regex","options":{"regex":"[a-z]","title":"a-z"}}],"readonly":false,"required":false,"title_translated":"docu2","documentation_translated":""}],"implementation":{"html":"<div class=\"editor-parameters\">\r\n    <h1>Par\u00e1metros<\/h1>\r\n    <div if=\"!this.showEdit\">\r\n        <table if=\"this.parameters && this.parameters.length > 0\" class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>T\u00edtulo y documentaci\u00f3n<\/th>\r\n                    <th>Nombre<\/th>\r\n                    <th>tipolog\u00eda<\/th>\r\n                    <th style=\"width:114px;\">Acciones<\/th>\r\n                <\/tr>\r\n            <\/thead>\r\n            <tbody for=\"parameter of this.parameters\">\r\n                <tr>\r\n                    <td><b>{parameter.title_translated}<\/b><br\/>{parameter.documentation_translated}<\/td>\r\n                    <td>{parameter.event === true ? '(' + parameter.name + ')' : parameter.name}<\/td>\r\n                    <td>{translate('parameter_type_'+parameter.type)}<\/td>\r\n                    <td>\r\n                        <a (click)=\"this.deleteParameter(parameter.name)\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\"\/><\/a> \r\n                        <a (click)=\"this.showAddParameterModal( parameter )\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/edit.svg\"\/><\/a>\r\n                        <rc.arrange (change)=\"this.parametersChanged()\" collection=\"{this.parameters}\" idx=\"{parameter_index}\"><\/rc.arrange>\r\n                    <\/td>\r\n                <\/tr>\r\n            <\/tbody>\r\n        <\/table>\r\n\r\n        <p if=\"!this.parameters || this.parameters.length == 0\">\r\n            A\u00fan no ha a\u00f1adido ning\u00fan par\u00e1metro.        <\/p>\r\n    \r\n    \r\n        <form.button label=\"A\u00f1adir par\u00e1metros\" (click)=\"this.showAddParameterModal()\"><\/form.button>\r\n    <\/div>\r\n\r\n    <div if=\"this.showEdit\">\r\n        <h2>{this.mode == 'edit' ? 'Editar par\u00e1metros' : 'A\u00f1adir par\u00e1metros'}<\/h2>\r\n         <form>\r\n        <form.text element=\"paramNameElement\" label=\"Nombre\" name=\"name\" value=\"{this.paramToSave.name}\" placeholder=\"{this.nameSuggestion}\"><\/form.text>\r\n        <form.text.translated unique=\"{true}\" element=\"paramTitleElement\" translation_category=\"resource_{this.tag.name}\" name=\"title\" label=\"T\u00edtulo\" value=\"{this.paramToSave.title}\" (change)=\"this.titleUpdated(element.value)\"><\/form.text.translated>\r\n        <dropdown translate_options=\"{true}\" options=\"{this.typeOptions}\" (change)=\"this.paramTypeChanged(event)\" element=\"paramTypeElement\" label=\"tipolog\u00eda\" value=\"{this.paramToSave.type}\"><\/dropdown>\r\n\r\n        <div if=\"this.typesettings != undefined && this.typesettings != ''\">\r\n            <form.resource element=\"typesettingsElement\" (change)=\"this.typeSettingChanged(event)\" resourcetype=\"{this.typesettings}\" value=\"{this.paramToSave.options}\"><\/form.resource>\r\n        <\/div>\r\n        <form.checkbox element=\"requiredElement\" label=\"Requerido\" value=\"{this.paramToSave.required}\"><\/form.checkbox>\r\n        <form.checkbox element=\"readonlyElement\" label=\"S\u00f3lo lectura\" value=\"{this.paramToSave.readonly}\"><\/form.checkbox>\r\n        <form.checkbox element=\"eventElement\" label=\"Es un acontecimiento\" value=\"{this.paramToSave.event}\"><\/form.checkbox>\r\n        <form.text.translated unique=\"{true}\" translation_category=\"resource\" name=\"documentation\" element=\"paramDocumentationElement\" label=\"Documentaci\u00f3n\" value=\"{this.paramToSave.documentation}\"><\/form.text.translated>\r\n        <ul class=\"jj-editor-parameters-validators\" if=\"!!this.paramToSave.validators\" for=\"validator of this.paramToSave.validators\">\r\n            <li><text name=\"{validator.name}\"><\/text>\r\n            <i (click)=\"this.editValidator( validator_index )\" class=\"action\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/edit.svg\"\/><\/i>\r\n            <i (click)=\"this.removeValidator( validator_index )\" class=\"action\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\"\/><\/i>\r\n            <!--a (click)=\"this.removeValidator( validator_index )\">Delete <\/a>\r\n            <a (click)=\"this.editValidator( validator_index )\">Edit <\/a><\/li-->\r\n            <\/li>\r\n        <\/ul>\r\n        <form.button (click)=\"this.addValidator()\" label=\"A\u00f1adir validador...\"><\/form.button><br\/>\r\n        <form.button (click)=\"this.mode == 'edit' ? this.saveParameter() : this.addParameter()\" label=\"{this.mode == 'edit' ? 'Guardar' : 'Guardar'}\"><\/form.button>\r\n        <form.button (click)=\"this.hideAddParameterModal()\" label=\"Cancelar\"><\/form.button>\r\n         <\/form>\r\n    <\/div>\r\n    <div if=\"this.tag && this.tag.type == 'dbtable' && !this.tableinfo\">\r\n        <form.button label=\"Crear tabla de base de datos\" (click)=\"this.createDbTable()\"><\/form.button>\r\n    <\/div>\r\n    <div if=\"this.tag && this.tag.type == 'dbtable' && this.tableinfo && (this.tableinfo.length - 1) != this.parameters.length\">\r\n        <form.button label=\"Actualizar tabla de base de datos\" (click)=\"this.updateDbTable()\"><\/form.button>\r\n    <\/div>\r\n\r\n    <dialog display_tag=\"add.validator\" (submit)=\"this.validatorAdded(event)\" element=\"addvalidator\" visible=\"{false}\"><\/dialog>\r\n    \r\n<\/div>","css":".modal-window {\n    height: auto;\n}\n\n.jj-parameter-list {\n    list-style-type: none;\n    padding: 0px;\n}\n\n.jj-editor-parameters-validators li i {\n    position: relative;\n    top: 5px;\n}\n\n.editor-parameters table.table {\n    margin-left: -12px;\n}\n\n.editor-parameters table.table td, .editor-parameters table.table th {\n    border:none;\n    padding: 12px;\n}","javascript":"class EditorParameters extends Tag {\n\n    setup() {\n        this.paramToSave = {}\n        this.parameterTypes = Resource.getResource('parametertype').data\n        resource.action('get_parameter_types').then(result=> {\n            this.setAttribute('parameterTypes',result)\n            this.typeOptions = this.parameterTypes.map(v => { return {name:v.title,value:v.name} })\n        })\n        this.typeOptions = this.parameterTypes.map(v => { return {name:v.title,value:v.name} })\n    }\n\n    init() {\n        this.updateTypesettigsEditor()\n        this.paramTypeChanged()\n    }\n\n    paramByName(name) {\n        let idx = this.parameterTypes.findIndex(v=>{return v.name == name})\n        return this.parameterTypes[idx]\n    }\n\n    showAddParameter() {\n        this.setAttribute('showEdit',true)\n    }\n\n    parametersChanged() {\n        this.update('this.parameters');\n        this.resourceChanged();\n    }\n\n    getTypeSettings(name) {\n        let obj = this.paramByName(name)\n        if (!obj) {\n            return null\n        }\n        return obj.typesettings\n    }\n\n    getTypesettingsDefaults(name) {\n        let obj = this.paramByName(name)\n        if (!obj) {\n            return null\n        }\n        if (typeof obj.editorDefault == 'string') {\n            return JSON.parse(obj.editorDefault)\n        }\n    }\n\n\n     getTypeSettingsEditor(name) {\n        let obj = this.paramByName(name)\n        if (!obj) {\n            return null\n        }\n        return obj.typesettings_editor\n    }\n\n    titleUpdated(title) {\n      \/\/  this.nameSuggestion = title\n      \/\/  this.update('this.nameSuggestion')\n    }\n\n    editValidator(idx) {\n        let validator = this.paramToSave.validators[idx]\n        \n        Resource.cls('dialog').displayTagInDialog('add.validator', validator).then( validator => {\n            let name = validator.tag.tagtype \n            let options = validator.tag.options \n            validator.name = name \n            validator.options = options\n            this.update('this.paramToSave.validators')\n        });\n    }\n\n    addValidator() {\n        this.addvalidator.visible = true\/*\n        Resource.cls('modal.dialog').createDialogWithTag('add.validator', {label:'Validator', submitlabel:\"Add\"}).then( validator => {\n            console.log('Validator added', validator)\n         \n        });*\/\n    }\n\n    validatorAdded(validator) {\n        if (!this.paramToSave.validators) {\n            this.paramToSave.validators = []\n        }\n        this.paramToSave.validators.push(validator)\n        this.update('this.paramToSave.validators')\n    }\n\n    removeValidator(idx) {\n        this.paramToSave.validators.splice(idx,1);\n        this.update('this.paramToSave.validators')\n    }\n\n    paramTypeChanged(value) {\n        this.paramToSave.type = value\n        this.typesettingVal = null;\n        this.typesettings = this.getTypeSettings(this.paramToSave.type); \/\/this.paramTypeElement.value\n        this.paramToSave.options = this.getTypesettingsDefaults(this.paramToSave.type)\n\n        this.update('this.paramToSave.options')\n        this.updateTypesettigsEditor()\n        this.update('this.typesettings')\n    }\n\n    createDbTable() {\n        Resource.call('db.table.create',{resourcetype:this.tag.name,tablename:this.tag.name}).then(result=> {\n            this.updateDatabaseTable()\n            toast$.show('database_table_creation_success_message',false,'success')\n        })\n    }\n\n    updateDbTable() {\n        Resource.call('update-database-table',{resourcetype:this.tag.name,tablename:this.tag.name}).then(result=> {\n            this.updateDatabaseTable()\n            toast$.show('database_table_update_success_message',false,'success')\n        })\n    }\n\n    updateTypesettigsEditor() {\n        if (this.paramTypeElement) {\n            this.typesettings_editor = this.getTypeSettingsEditor(this.paramToSave.type) \/\/ this.paramTypeElement.value\n        } else {\n            this.typesettings_editor = null\n        }\n        this.update('this.typesettings_editor')\n    }\n\n    typeSettingChanged(v) {\n        this.paramToSave.options = v\n    }\n\n    updateDatabaseTable() {\n        if (this.tag != undefined) {\n            if (this.tag.type == 'dbtable') {\n                resource.action('table_info',{table:this.tag.name}).then(result=> {\n                    if (result.table_does_not_exist == undefined) {\n                        this.tableinfo = result;\n                        this.update('this.tableinfo')\n                    }\n                })\n            }\n        }\n    }\n\n    set tag(tag) {\n        this._tag = tag\n        if (tag && tag.parameters != '') {\n            try {\n                this.parameters = JSON.parse(tag.parameters)\n                if (!this.parameters) {\n                    this.parameters = []\n                }\n                this.updateDatabaseTable()\n            } catch (e) {\n                this.parameters = []\n                console.warn('Parameters are not valid JSON!', e)\n            }\n        } else {\n            this.parameters = []\n        }\n        this.update('this.parameters')\n    }\n\n    get tag() {\n        return this._tag\n    }\n\n    showAddParameterModal(parameter=null) {\n        if (parameter != null) {\n            this.paramToSave = parameter\n            this.setAttribute('mode','edit')\n        } else {\n            this.paramToSave = {}\n            this.setAttribute('mode','create')\n        }\n        this.update('this.paramToSave')\n        this.update('this.paramTypeElement')\n        this.typesettings = this.getTypeSettings(this.paramToSave.type);\n        this.update('this.typesettings');\n        this.setAttribute('showEdit',true)\n    }\n\n    resourceChanged() {\n        this.fire('change', JSON.stringify(this.parameters))\n    }\n\n    hideAddParameterModal() {\n      \/\/  this.addParameterModal.classList.remove('active')\n      this.setAttribute('showEdit',false)\n    }\n\n    deleteParameter(parameterName) {\n        let parameterIdx = this.parameters.findIndex((v) => { return v.name == parameterName })\n        this.parameters.splice(parameterIdx, 1)\n        this.update('this.parameters');\n        this.resourceChanged()\n    }\n\n    saveParameter() {\n        let formValues = this.getFormValues()\n        if (this.tag.type == 'dbtable' && formValues.name != this.paramToSave.name) {\n            resource.action('rename_db_column', {table_name:this.tag.name, new_name:formValues.name, old_name:this.paramToSave.name})\n        }\n        Object.assign(this.paramToSave,this.getFormValues())\n        this.paramTitleElement.saveTranslations();\n        \n        this.paramDocumentationElement.saveTranslations()\n        this.paramToSave.title_translated = this.paramTitleElement._translated_value \n        this.paramToSave.documentation_translated = this.paramDocumentationElement._translated_value \n        this.hideAddParameterModal()\n        this.update('this.parameters')\n        this.resourceChanged()\n    }\n\n    getFormValues() {\n        let vals = {\n            'name': this.paramNameElement.value,\n            'title': this.paramTitleElement.value,\n            'type': this.paramTypeElement.value,\n            'documentation': this.paramDocumentationElement.value\n        };\n        if (this.typesettingsElement != undefined ) {\n            vals.options = this.typesettingsElement.value\n        }\n        if (this.eventElement.value === true) {\n            vals.event = true\n        }\/\/TODO\n        if (this.readonlyElement.value === true) {\n            vals.readonly = true\n        } else {\n            vals.readonly = false\n        }\n        if (this.requiredElement.value === true) {\n            vals.required = true\n        } else {\n            vals.required = false\n        }\n        if (this.validators) {\n            vals.validators = this.validators\n        }\n        return vals;\n    }\n\n    addParameter() {\n        this.paramTitleElement.saveTranslations();\n        this.paramDocumentationElement.saveTranslations()\n        let newParam = this.getFormValues()\n        newParam.title_translated = translate(newParam.title)\n        newParam.documentation_translated = translate(newParam.documentation)\n        this.parameters.push(newParam);\n        this.update('this.parameters');\n        this.hideAddParameterModal();\n        this.paramToSave = {}\n        this.update('this.paramToSave')\n        this.update('this.typesettings')\n        this.resourceChanged();\n        \n    }\n}"},"name":"editor.parameters","title":"Gestionar el editor de par\u00e1metros","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"dropdown"},{"version":"1.0.0","type":"tag","name":"form.array"},{"name":"form.button","type":"tag","version":"1.0.0"},{"name":"form.checkbox","type":"tag","version":"1.0.0"},{"version":"1.0.0","name":"form.resource","type":"tag"},{"version":"1.0.0","name":"form.tagtype","type":"tag"},{"name":"form.text","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"form.text.translated"},{"name":"form.textarea","type":"tag","version":"1.1.0"},{"version":"1.0.0","type":"tag","name":"dialog"},{"name":"parametertype","type":"object","version":"1.0.0"},{"name":"rc.arrange","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"text"}],"extends_resource":null},"resource.configuration":{"id":48,"parameters":[{"name":"resourcename","title":"Nombre del recurso","type":"tagtype","documentation":null,"required":null,"title_translated":"Resource name","documentation_translated":""}],"implementation":{"html":"<div class=\"editor-resource-configuration\">\n    <h1>Configuraci\u00f3n<\/h1>\n  <form.resource showdocumentation=\"{window.helpMode$ && helpMode$}\" (submit)=\"this.resourceUpdated(event)\" submitlabel=\"Guardar\" resourcetype=\"resource\" value=\"{this.resource}\"><\/form.resource>  \n<\/div>","javascript":"class MConfiguration extends Tag {\n    setup() {\n        this.showdefaults = false\n    }\n    set resourcename(resourcename) {\n        if (this._resourcename == resourcename) {\n            return\n        }\n        this._resourcename = resourcename\n        this.update('this.resourcename')\n        if (resourcename) {\n            resource.action('load_config', { name: resourcename }).then(resource => {\n                this.resource = resource\n                this.update('this.resource')\n                this.rowid = resource.id\n                this.update('this.rowid')\n \n            });\n        }\n    }\n    get resourcename() {\n        return this._resourcename\n    }\n    resourceUpdated(value) {\n        resource.action('update_config', value).then(result=> {\n            if(this.resourcename != value.name) {\n                document.location = '\/editor\/resource\/'+value.name+'\/config'       \n            }\n        })\n    }\n\n}"},"name":"resource.configuration","title":"Gestionar la configuraci\u00f3n de los recursos","type":"tag","dependencies":[{"version":"1.0.0","name":"db.row.editor","type":"tag"},{"name":"form.resource","type":"tag","version":"1.1.0"},{"version":"1.0.0","type":"tag","name":"rc.resource.config"},{"version":"1.0.0","type":"php-library","name":"rc.resource.get.for.edit"},{"version":"1.0.0","name":"resource","type":"object"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":""},"when":{"id":231,"parameters":null,"implementation":{"html":"<div style=\"display:none\"><\/div>","javascript":"class JWhen extends Tag {\n    set test(t) {\n        if (this._test != t) {\n            this._test = t\n            if (t) {\n                this.call(t)\n            }\n        }\n    }\n\n    get test() {\n        return this._test\n    }\n    set when(w) {\n        if (this._when != w) {\n            this._when = w\n          \/\/  if (w) {\n                this.call(w)\n          \/\/  }\n        }\n    }\n\n    get when() {\n        return this._when\n    }\n    set then(t) {\n        this.thenExpression = new Expression(t, {jscontext:true, tagAndvalue:true})\n        this._then = t\n        if (this._test) {\n            this.call(this._test)\n        }\n        if (this._when !== undefined) {\n            this.call(this._when)\n        }\n    }\n    get then() {\n        return this._then\n    }\n    call(value) {\n        if (this.thenExpression) {\n            try {\n                this.thenExpression.callWithTagAndValue(this.parentTag,value)\n            } catch(error) {\n                console.error('Error in when',error)\n            }\n        }\n    }\n}"},"name":"when","title":"when","type":"tag","extends_resource":null},"resource":{"id":54,"parameters":[{"name":"name","title":"Nombre","type":"string","documentation":"El nombre del recurso, utilizado para acceder al recurso. S\u00f3lo se permiten a-z y puntos (\".\").","required":true,"validators":[],"readonly":false,"title_translated":"Name","documentation_translated":"The name of the resource, used to access the resource. Only a-z and dot's (\".\") are allowed."},{"name":"title","title":"T\u00edtulo","type":"translated_string","documentation":"El t\u00edtulo del recurso.","required":true,"options":{"translation_category":"resource","unique":true},"readonly":false,"title_translated":"Title","documentation_translated":"The title of the resource."},{"name":"vendor","title":"Vendedor","type":"string","documentation":"El proveedor es el propietario del producto del recurso.","required":true,"options":{"label":"","dbtable":"vendor","titlefield":"title","idfield":"name"},"readonly":false,"title_translated":"Vendor","documentation_translated":"The vendor is the product owner of the resource."},{"name":"version","title":"Versi\u00f3n","type":"string","documentation":"El n\u00famero de versi\u00f3n (por ejemplo, 1.0.0)","required":true,"options":null,"readonly":false,"title_translated":"Version","documentation_translated":"The version number (e.g. 1.0.0)"},{"name":"documentation","title":"Documentaci\u00f3n","type":"translated_string","documentation":"Una descripci\u00f3n del recurso. Cu\u00e1l es la finalidad del recurso?","required":false,"options":{"unique":true,"translation_category":"resource"},"readonly":false,"title_translated":"Documentation","documentation_translated":"A description about the resource. What is the purpose of the resource?"},{"name":"extends_resource","title":"Ampl\u00eda el recurso","type":"tagtype","documentation":"Extiende un recurso, lo que significa que hereda todos los campos y el comportamiento de este recurso se puede sobrescribir.","required":null,"title_translated":"Extends Resource","documentation_translated":"Extends a resource, which means it inherits all fields and the behavior from this resource can be overwritten."},{"name":"type","title":"tipolog\u00eda","type":"db_row","documentation":"El tipo principal del recurso. Todos los tipos tienen todas las pesta\u00f1as y funcionalidades posibles (puede utilizarlos como webservice, a\u00f1adir HTML, JavaScript, etc.).","options":{"dbtable":"resource_type","titlefield":"title","idfield":"name","translate_options":true},"required":true,"readonly":false,"title_translated":"Type","documentation_translated":"The main type of the resource. All types have all possible tabs and functionalities (you can use them as webservice, add HTML, JavaScript, etc.)."},{"name":"license","title":"Licencia","type":"db_row","documentation":"Consulte el contrato de licencia (nombre de la licencia).","required":false,"options":{"label":"License","dbtable":"license","titlefield":"title","idfield":"name"},"readonly":false,"title_translated":"License","documentation_translated":"Please refer to the license agreement (name of the license)."},{"name":"project_id","title":"Proyecto","type":"db_row","documentation":"","required":false,"options":{"label":"Project","dbtable":"project","titlefield":"title","idfield":"id"},"readonly":false,"title_translated":"Project","documentation_translated":""},{"name":"allowed_subelements","title":"Subelementos permitidos","type":"array","documentation":"Los subelementos permitidos definen para una etiqueta, por ejemplo, qu\u00e9 subelementos puede tener el recurso. En el dise\u00f1ador s\u00f3lo aparecen estos elementos en los subelementos.","required":false,"options":{"resourcetype":"rc.resource.name"},"readonly":false,"title_translated":"Allowed subelements","documentation_translated":"The allowed subelements define for a tag for example, which subelements the resource can have. In the designer only these elements are listed on subelements."},{"name":"visibility","title":"Visibilidad","type":"options","documentation":"Comparte el componente con otros usuarios y Metayota.","options":{"label":"Public","options":[{"name":"Private","value":"private"},{"name":"Public","value":"public"},{"name":"Published","value":"published"}]},"readonly":false,"required":false,"title_translated":"Visibility","documentation_translated":"Share the component with other users and Metayota."},{"name":"cachetime","title":"Tiempo de cach\u00e9","type":"number","documentation":"","options":{"suffix":"seconds","decimal_places":"0"},"readonly":false,"required":false,"title_translated":"Cache Time","documentation_translated":""}],"implementation":[],"name":"resource","title":"El recurso","type":"dbtable","dependencies":[{"version":"1.0.0","type":"validator","name":"rc.validator.regex"}],"extends_resource":null},"design.item":{"id":30,"parameters":[],"implementation":{"html":"<div class=\"design-item\">\n    <div class=\"tree-item {this.selected then 'selected'} \"  (click)=\"this.didSelectItem(this, this, this)\">\n        <span class=\"draggable\" draggable=\"true\" (dragstart)=\"this.drag(event)\" ><b>{this.value ? (this.value.name ? this.value.name : 'Item') : 'Item'} <a (click)=\"this.addItem()\">+<\/a> <a (click)=\"this.deleteItem()\">-<\/a><\/b><\/span>\n    <\/div>\n    <div class=\"subitems\" if=\"!!this.items\" for=\"subitem of this.items\">\n        <div class=\"droparea-container\"> \n            <design.item parent=\"{this}\" (deleted)=\"this.deleteSubitem( subitem_index )\" value=\"{subitem}\" selecteditem=\"{this.selecteditem}\" (selected)=\"this.didSelectItem(event.itemName, event.element, event.item)\" (change)=\"this.designItemChanged(event, subitem_index)\" tags=\"{this.tags}\"><\/design.item>\n            <div class=\"droparea\" (dragleave)=\"this.leaveDroparea(event,node)\" (dragover)=\"this.allowDrop(event,node)\" (drop)=\"this.drop(event, subitem_index)\" ><\/div>\n        <\/div>\n    <\/div>\n    <div class=\"droparea-container droparea-container-last\" if=\"!!this.items && this.items.length > 0\"> \n        <div class=\"droparea\" (dragleave)=\"this.leaveDroparea(event,node)\" (dragover)=\"this.allowDrop(event,node)\" (drop)=\"this.drop(event, this.items.length)\" ><\/div>\n    <\/div>\n<\/div>","css":".design-item input.item-name {\n    background: transparent;\n    border:transparent;\n    outline:none;\n    font-size: 14px;\n}\n\n.droparea-container {\n    position: relative;\n}\n\n.droparea-container-last {\n    height: 3px;\n    margin-left: 10px;\n}\n\n\n\n.design-item div.droparea {\n    background: #7692b3;\n    height: 4px;\n    \n    margin-top: 0px;\n    margin-bottom: 0px;\n    opacity: 0;\n    padding: 0px;\n    position: absolute;\n    top:0px;\n    right: 0px;\n    left: 0px;\n}\n\n.design-item div.droparea.active {\n    opacity: 1;\n}\n\n.design-item .tree-item {\n    cursor: pointer;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    text-decoration: none;\n}\n\n.tree-item a {\n    margin-left:16px;\n    display: none;\n}\n\n.design-item .tree-item.selected {\n    background: #252c33;\n    color: white;\n}\n\n.design-item .tree-item.selected.dragging {\n    background:rgba(0,0,0,0);\n}\n\n.design-item .tree-item.selected a, .design-item .tree-item:hover a {\n  display: inline-block;\n  color: #2786d0;\n}\n\n.design-item .tree-item {\n    padding-left: 35px;\n}\n\n.design-item .subitems .tree-item {\n    padding-left: 50px;\n    padding-right: 32px;\n}\n\n.design-item .subitems .subitems .tree-item {\n    padding-left: 66px;\n}\n\n.design-item .subitems .subitems .subitems .tree-item {\n    padding-left: 78px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .tree-item {\n    padding-left: 90px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .subitems .tree-item {\n    padding-left: 102px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .subitems .subitems .tree-item {\n    padding-left: 114px;\n}\n\n\n\n.design-item .droparea {\n    left: 35px;\n}\n\n.design-item .subitems .droparea {\n    left: 50px;\n}\n\n.design-item .subitems .subitems .droparea {\n    left: 66px;\n}\n\n.design-item .subitems .subitems .subitems .droparea {\n    left: 78px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .droparea {\n    left: 90px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .subitems .droparea {\n    left: 102px;\n}\n\n.design-item .subitems .subitems .subitems .subitems .subitems .subitems .droparea {\n    left: 114px;\n}","javascript":"class DesignItem extends Tag {\n    setup() {\n        this.items = []\n        this.value = { tag:'div', items: this.items }\n        this.selected = false\n    }\n    \n    addItem() {\n        if (this.items == undefined) {\n            this.items = []\n        }\n        let randomName = 'item' + Math.round(Math.random()*1000)\n        this.items.push({tag:'div',items:[], name:randomName})\n        this.update('this.value')\n        this.update('this.items')\n        this.value.items = this.items\n        this.resourceChanged()\n    }\n    \n    deleteItem() {\n        this.fire('deleted',null);\n    }\n    deleteSubitem(idx) {\n        this.items.splice(idx,1);\n        this.update('this.items')\n        this.update('this.value')\n        this.resourceChanged()\n    }\n    \n    set tags(t) {\n\t\tif (!t) {\n\t\t\treturn;\n\t\t}\n        this.tagOptions = t.map((v, i) => { return { name: v.name, value: v.name } })\n        this._tags = t\n        this.update('this.tagOptions')\n    }\n    get tags() {\n        return this._tags\n    }\n    \n    set selecteditem(v) {\n        this._selecteditem = v;\n        this.selected = (this.value && this == v)\n        this.update('this.selecteditem');\n        this.update('this.selected');\n    }\n    get selecteditem() {\n        return this._selecteditem;\n    }\n    \n    set value(v) {\n        this._value = v\n        if (v && v.items) {\n            this.items = v.items\n        } else {\n            this.items = []\n        }\n        this.selected = (this.value && this.selecteditem && this.value.name == this.selecteditem)\n        this.update('this.value')\n        this.update('this.items')\n    }\n    setItemName(itemName) {\n        this.value.name = itemName\n        this.update('this.value')\n        this.resourceChanged()\n    }\n    setTagName(tagName) {\n        this.value.tag = tagName\n        this.update('this.value')\n        this.resourceChanged()\n    }\n    getTagName() {\n        return this.value.tag\n    }\n    setParameter(parameterName,parameterValue) {\n        if (this.value.parameters === undefined) {\n            this.value.parameters = {}\n        }\n        this.value.parameters[parameterName] = parameterValue\n        this.update('this.value')\n        this.resourceChanged()\n    }\n    setParameters(parameterValue) {\n        this.value.parameters = parameterValue\n        this.update('this.value')\n        this.resourceChanged()\n    }\n    get value() {\n        return this._value\n    }\n    resourceChanged() {\n        this.fire('change',this.value)\n    }\n    designItemChanged(item, index) {\n        this.items[index] = item;\n        this.fire('change', this.value)\n    }\n    tagNameChanged(value) {\n        this.value.tag = value;\n        this.fire('change', this.value)\n    }\n    didSelectItem(itemName, element, item) {\n        this.fire('selected', {itemName:itemName,element:element,item:item});\n    }\n\n    leaveDroparea(event,node) {\n        node.classList.remove('active')\n    }\n    drag(ev,index) {\n     \/\/   ev.dataTransfer.setData(\"index\", index);\n        DesignItem.fromTag = this\n        this.dragging = true\n        this.update('this.dragging')\n        \/\/\/ev.dataTransfer.setData(\"tag\", this);\n    }\n    allowDrop(ev,node) {\n        ev.preventDefault();\n        node.classList.add('active')\n    }\n    drop(ev, newIndex) {\n        ev.preventDefault();\n        \/\/var index = ev.dataTransfer.getData(\"index\");\n        var itm = DesignItem.fromTag\n        \n        let idx = itm.parent.items.findIndex( i => i == itm.value );\n        itm.parent.items.splice(idx,1)\n        \n        if (itm.parent.items == this.items) {\n            if (idx > newIndex) {\n                \/\/newIndex++\n            } else {\n                newIndex--\n               \/\/ newIndex++\n            }\n        }\n        \/\/this.items.push(itm)\n        this.items.splice(newIndex, 0, itm.value)\n        \/\/this.items.splice(newIndex, 0, this.items.splice(index, 1)[0]);\n        itm.parent.update('this.items')\n        this.update('this.items')\n        this.fire('change', this.value)\n    \/\/    itm.didSelectItem(itm,itm,itm)\n        \/\/ev.target.appendChild(document.getElementById(data));\n    }\n}"},"name":"design.item","title":"Elemento de dise\u00f1o","type":"tag","dependencies":[],"extends_resource":null},"form.element":{"id":1013,"parameters":[{"name":"type","type":"string","documentation":"Tipo del valor (por ejemplo, cadena)","title":"tipolog\u00eda","title_translated":"Art","documentation_translated":"Der Typ des Wertes (z.B. Zeichenkette)"},{"name":"value","type":"string","documentation":"El valor del elemento del formulario.","title":"Valor","title_translated":"Wert","documentation_translated":"Der Wert f\u00fcr das Formularelement."},{"name":"label","title":"Etiqueta","type":"text","documentation":"La etiqueta del componente.","required":null,"title_translated":"Feldbeschriftung","documentation_translated":"Die Bezeichnung der Komponente."}],"implementation":{"html":"<div>\n    <div if=\"this.resolvedType != undefined\">\n        <include element=\"include\" attributes=\"{this.attributesForElement}\" (change)=\"this.resourceChanged(event)\" tag=\"{this.resolvedType.editor}\"><\/include>\n    <\/div>\n<\/div>","javascript":"class RCFormElement extends Tag {\n    setup() {\n        this.typesCls = Resource.cls('parametertype') \n        this.types = this.typesCls.types\n    }\n    init() {\n        this.fire('register',this)\n    }\n    get attributesForElement() {\n        let obj = Object.assign( {}, this.options, { name: this.name, label: this.label, value: this.value, validators: this.validators, required: this.required } );\n        return obj;\n    }\n    resourceChanged(v) {\n        this.fire('change',v)\n    }\n    set options(o) {\n        this._options = o\n        this.update('this.options')\n        this.update('this.attributesForElement')\n    }\n    get options() {\n        return this._options\n    }\n    set parameters(v) {\n        this._parameters = v\n    }\n    get parameters() {\n        return this._parameters\n    }\n    set type(v) {\n        this._type = v\n\n        this.resolvedType = this.typesCls.getTypeByName(v)\n        \n        if (this.resolvedType) {\n\t\t\t\/\/ ok\n        } else {\n            console.warn('form.element type could not be resolved',v)\n        }\n    } \n    get type() {\n        return this._type\n    }\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n        this.update('this.attributesForElement')\n    }\n    get value() {\n        if (this.include && this.include.renderedTag && this.include.renderedTag.tag) {\n            return this.include?.renderedTag?.tag?.value\n        } else {\n            return this._value\n        }\n    }\n    isValid() {\n        if (!this.include.renderedTag.tag.isValid) {\n            return true;\n        }\n        return this.include.renderedTag.tag.isValid()\n    }\n    set name(n) {\n        this._name = n\n        this.update('this.name')\n        this.update('this.attributesForElement')\n    }\n    get name() {\n        return this._name\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n        this.update('this.attributesForElement')\n    }\n    get label() {\n        return this._label\n    }\n}"},"name":"form.element","title":"Elemento del formulario","type":"tag","dependencies":[{"name":"form.checkbox","version":"1.0.0","type":"tag"},{"name":"form.number","type":"tag","version":"1.0.0"},{"name":"form.tagtype","type":"tag","version":"1.0.0"},{"name":"form.text","type":"tag","version":"1.0.0"},{"name":"parametertype","type":"object","version":"1.0.0"}],"extends_resource":null},"base.form.element":{"id":802,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":"La etiqueta del elemento del formulario.","title_translated":"Label","documentation_translated":"The label of the form element."},{"name":"value","title":"Valor","type":"string","documentation":"El valor del elemento del formulario.","title_translated":"Value","documentation_translated":"The value of the form element."}],"implementation":{"javascript":"class RCBaseFormElement extends Tag {\n    isValid() {\n        if (this.validators) {\n            for (let validator of this.validators) {\n                let validatorObj = Resource.create(validator.name);\n                Object.assign(validatorObj,validator.options)\n                if (this.value == null) {\n                    this.value = ''\n                }\n                let validatorResult = validatorObj.isValid(this.value)\n                if (validatorResult !== true) {\n                    this.errorMessage = translate(validatorResult)\n                    this.update('this.errorMessage')\n                    return false\n                }\n            }\n        }\n        if (this.required && (!this.value || this.value == '')) {\n            \n            this.errorMessage = translate('fill_out_form_field')\n            this.update('this.errorMessage')\n            return false\n        }\n        if (this.errorMessage) {\n            this.errorMessage = undefined\n            this.update('this.errorMessage')\n        }\n        return true\n    }\n}"},"name":"base.form.element","title":"Elemento del formulario base","type":"tag","extends_resource":null},"editor.addresource":{"id":85,"parameters":[],"implementation":{"html":"<div class=\"editor-addresource\">\n    <h1>A\u00f1adir recurso<\/h1>\n    <form.resource  showdocumentation=\"{window.helpMode$ && helpMode$}\" value=\"{{project_id:editor$.selectedProject,'type':'tag'}}\" resourcetype=\"form.addresource\" (submit)=\"this.saveResource(event)\" submitlabel=\"A\u00f1adir recurso\"><\/form.resource>\n<\/div>","javascript":"class JJEditorAddResource extends Tag {\n    saveResource(event) {\n        resource.call(event).then( result => {\n            editor$.updateResources().then( result => {\n                editor$.gotoResource(event.name)\n                editor$.gotoTab('overview')\n            })\n        })\n    }\n}"},"name":"editor.addresource","title":"Editor - A\u00f1adir recurso","type":"tag","dependencies":[{"name":"form.addresource","type":"object","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"form.resource"}],"extends_resource":null},"user":{"id":408,"parameters":[{"name":"username","title":"Nombre de usuario","type":"string","documentation":null,"options":{"type":"text"},"readonly":false,"required":false},{"name":"email","title":"Correo","type":"string","documentation":null,"options":{"type":"email"},"readonly":false,"required":true},{"name":"gender","title":"G\u00e9nero","type":"Radio Options","documentation":null,"options":{"options":[{"name":"Male","value":"male"},{"name":"Female","value":"female"}]},"readonly":false,"required":false},{"name":"firstname","title":"Nombre","type":"string","documentation":null,"readonly":false,"required":true},{"name":"lastname","title":"Apellido","type":"string","documentation":null,"readonly":false,"required":true},{"name":"company","title":"Empresa","type":"string","documentation":null,"readonly":false,"required":false}],"implementation":[],"name":"user","title":"Usuario","type":"dbtable","extends_resource":null},"login":{"id":614,"parameters":[{"name":"username","title":"Nombre de usuario o direcci\u00f3n de correo","type":"string","documentation":"Tu nombre de usuario o direcci\u00f3n de correo electr\u00f3nico.","required":true,"readonly":false,"options":{"htmllabel":""},"title_translated":"Username or Mail address","documentation_translated":"Your username or email address."},{"name":"password","title":"Contrase\u00f1a","type":"password","documentation":"Tu contrase\u00f1a.","options":{"htmllabel":""},"readonly":false,"required":false,"title_translated":"Password","documentation_translated":"Your password."},{"name":"remember_me","title":"Permanecer conectado","type":"boolean","documentation":"Guarda al usuario durante 1 mes.","options":{"htmllabel":""},"readonly":false,"required":false,"title_translated":"Stay logged in","documentation_translated":"Saves the user for 1 month."}],"implementation":{"css":"\n.form-login.visible {\n    display: block;\n}\n.error-message {\n    font-weight: bold; \n}\n\n.form-login .parameters {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 32px;\n}","javascript":"class FormLogin extends Tag {\n    init() {\n        if (document.location.protocol == 'http:') {\n            document.location.protocol = 'https';\n        }\n    }\n    logout() {\n\t\tresource.action('logout', {}).then( x => {     \n            Tag.publish('loggedInUser$',{})\n         })\n    }\n    login(loginData) {\n        resource.call(loginData).then( result => {\n            if (result.error != undefined) {\n                this.setAttribute('errorMessage',result.error)\n                this.loginform.reset();\n            } else {\n                Tag.publish('loggedInUser$',Object.assign(new JJUser(), result))\n                router$.goto('\/login')\n            }\n        })\n    }\n}","html":"<div>\n    <div if=\"router$.params.subpage == 'confirmed-mail'\">\n        <h1>\u00a1Email Verificado! Gracias<\/h1>\n\n        <p>Su correo electr\u00f3nico ha sido confirmado. Ahora puede iniciar sesi\u00f3n utilizando el siguiente formulario.<\/p>\n    <\/div>\n    <h1 if=\"!loggedInUser$.username\">Inicio de sesi\u00f3n<\/h1>\n    <h1 if=\"!!loggedInUser$.username\">Bienvenido.<\/h1>\n    <div>\n        <div if=\"!loggedInUser$.username\" class=\"form-login\">\n            <form.resource value=\"{'remember_me':true}\" autocomplete=\"{false}\" element=\"loginform\" (submit)=\"this.login(event)\" submitlabel=\"Inicio de sesi\u00f3n\"\n             resourcetype=\"login\"><\/form.resource>\n        <\/div>\n        <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\n        <p if=\"!!this.errorMessage\">\n            <form.button (click)=\"router$.goto('\/forgot-password');\" label=\"Restablecer contrase\u00f1a\"><\/form.button>\n        <\/p>\n        <div if=\"!!loggedInUser$.username\" class=\"form-login\">\n            <p>Hola {loggedInUser$.firstname}, has iniciado sesi\u00f3n con la cuenta <b>{loggedInUser$.username}<\/b>.<\/p>\n            <form.button (click)=\"this.logout()\" label=\"Cerrar sesi\u00f3n\"><\/form.button>\n        <\/div>\n    <\/div>\n    <div if=\"!loggedInUser$.username\">\n    <p>\n        <b>\u00bfTiene problemas para conectarse?<\/b>\n    <\/p>\n    <p>\n        <a link=\"\/forgot-password\">Restablecer contrase\u00f1a<\/a>\n    <\/p>\n    <p>\n        <a link=\"\/verify-mail\">Reenviar correo electr\u00f3nico de registro<\/a>\n    <\/p>\n<\/div><\/div>"},"name":"login","title":"Inscribirse","type":"tag","dependencies":[{"name":"form.button","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"form.resource"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"version":"1.0.0","type":"object","name":"user_obj"}],"extends_resource":null},"object.view":{"id":110,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":null,"required":null},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype"},{"name":"obj","title":"Objeto","type":"string"}],"implementation":{"html":"<div class=\"object-view\">\n    <h3 if=\"this.label != undefined\">{this.label}<\/h3>\n    <div if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n        <div if=\"this.obj[parameter.name] != null && this.obj[parameter.name] != ''\" class=\"obj-view-value\">\n            <object.viewparameter parameter=\"{parameter}\" value=\"{this.obj[parameter.name]}\"><\/object.viewparameter>\n        <\/div>\n    <\/div>\n<\/div>","css":".obj-view-value {\n    user-select: text;\n}","javascript":"class ObjectView extends Tag {\n    set value(v) {\n        this.obj = v\n    }\n\n    get value() {\n        return this._obj\n    }\n\n    set obj(o) {\n\t\tif (o == undefined) {\n\t\t\to = {}\n\t\t}\n        this._obj = o \n        this.update('this.obj')\n        this.update('this.resource')\n    }\n    get obj() {\n        return this._obj \n    }\n    set resourcetype(r) {\n        this._resourcetype = r\n        Resource.loaded(r).then( resource => {\n            this.resource = resource\n            this.update('this.resource')\n            this.update('this.resourcetype')\n        })\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n}"},"name":"object.view","title":"Ver objeto","type":"tag","dependencies":[{"version":"1.0.0","name":"object.viewparameter","type":"tag"}],"extends_resource":null},"innerhtml":{"id":466,"parameters":[],"implementation":{"html":"<div element=\"main\"><\/div>","javascript":"class RCInnerHtml extends Tag {\n    render() {\n        this.main.innerHTML = this.value\n    }\n\n    set value(v) {\n        this._value = v\n        if (this.main) {\n            this.main.innerHTML = v\n        }\n    }\n\n    get value() {\n        return this._value\n    }\n}"},"name":"innerhtml","title":"InnerHTML","type":"tag","extends_resource":null},"stars.rating":{"id":317,"parameters":[{"name":"stars","title":"Estrellas","type":"number","documentation":"Introduzca un n\u00famero del 1 al 5.","options":{"suffix":"Estrellas"},"required":true}],"implementation":{"html":"<span class=\"stars-rating\">\n    <span for=\"starHelper of this.starsHelper\">\n        <span class=\"stars-rating-star\">\u2605<\/span>\n    <\/span>\n    <span for=\"starHelper of this.starsHelper2\">\n        <span class=\"stars-rating-star stars-rating-star-filler\">\u2606<\/span>\n    <\/span>\n<\/span>","javascript":"class RCStarsRating extends Tag {\n    set stars(s) {\n        this._stars = s\n        this.update('this.stars')\n        this.starsHelper = []\n        this.starsHelper2 = []\n        for (let i = 0 ; i < s ; i++) {\n            this.starsHelper.push('star')\n        }\n        for (let i = s ; i < 5 ; i++) {\n            this.starsHelper2.push('star')\n        }\n    }\n    get stars() {\n        return this._stars\n    }\n}"},"name":"stars.rating","title":"Visualizaci\u00f3n de la clasificaci\u00f3n por estrellas","type":"tag","extends_resource":null},"task":{"id":398,"parameters":[{"name":"title","title":"T\u00edtulo","type":"string","documentation":"Breve descripci\u00f3n de la tarea.","required":true,"title_translated":"Titel","documentation_translated":"Kurze Beschreibung der Aufgabe."},{"name":"description","title":"Descripci\u00f3n","type":"string","documentation":"Por favor, describa lo que hay que hacer en la tarea. Puede hacer referencia a la documentaci\u00f3n o a la lista de tareas.","required":true,"title_translated":"Beschreibung","documentation_translated":"Bitte beschreiben Sie, was in der Aufgabe erledigt werden muss. Sie k\u00f6nnen sich auf die Dokumentation oder die To-do-Liste beziehen."},{"name":"maxprice","title":"Precio m\u00e1ximo","type":"number","documentation":"\u00bfCu\u00e1l es el precio m\u00e1ximo en RC que le gustar\u00eda pagar? 1 CR equivale a 0,05 USD.","options":{"suffix":"RC"},"title_translated":"H\u00f6chstpreis","documentation_translated":"Wie hoch ist der maximale Preis in RC, den Sie zahlen m\u00f6chten? 1 RC entspricht 0,05 USD."},{"name":"status","title":"Estado","type":"db_row","documentation":"El estado de la tarea.","options":{"label":"State","dbtable":"task_state","titlefield":"title","idfield":"name"},"title_translated":"Status","documentation_translated":"Der Status der Aufgabe."},{"name":"skill_id","title":"Habilidad","type":"db_row","documentation":"La habilidad principal necesaria para realizar la tarea.","options":{"dbtable":"skills","titlefield":"skill_name","idfield":"id","translate_options":true},"title_translated":"F\u00e4higkeit","documentation_translated":"Die Hauptf\u00e4higkeit, die ben\u00f6tigt wird, um die Aufgabe zu erf\u00fcllen.","readonly":false,"required":false},{"name":"resource","title":"Recursos","type":"tagtype","documentation":"Tipo de recurso.","required":true,"title_translated":"Ressource","documentation_translated":"Die Art der Ressource."}],"implementation":{"javascript":"class JJTask  {\n\n    doaction(action,info={}) {\n        let data = {}\n        Object.assign(data,{action:action, task_id: this.id},info)\n        return resource.call(data).then(task => {\n            if (task.message != undefined) {\n                toast$.display(task)\n            } else if (!task.error) {\n                Object.assign(this,task)\n            } else {\n                alert(task.error)\n            }\n            return this\n        })\n    }\n    \n    get currentPrice() {\n        return this.maxprice;\n    }\n\n    getActions() {\n        return JSON.parse(this.actions)\n    }\n  \n}"},"name":"task","title":"Tarea","type":"dbtable","dependencies":[{"version":"1.0.0","type":"php-library","name":"sync-functions"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"version":"1.0.0","type":"tag","name":"toast"}],"extends_resource":""},"title":{"id":607,"parameters":[{"name":"title","type":"string","title":"T\u00edtulo"}],"implementation":{"html":"<h1>{this.title}<\/h1>","javascript":"class TitleTag extends Tag {\n    set title(t) {\n        this._title = t\n        this.update('this.title')\n    }\n\n    get title() {\n        return this._title\n    }\n}"},"name":"title","title":"T\u00edtulo","type":"tag","extends_resource":null},"task.list":{"id":132,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":null,"required":null,"title_translated":"Feldbeschriftung","documentation_translated":""},{"name":"tasks","title":"Tareas","type":"array","documentation":"","options":{"typename":"task","resourcetype":"task"},"title_translated":"Auftr\u00e4ge","documentation_translated":""}],"implementation":{"html":"<div class=\"task-list\">\n    <h2>{this.label}<\/h2>\n    <table if=\"this.tasks != undefined and this.tasks.length > 0\" class=\"table\">\n        <colgroup>\n            <col width=\"*\"><\/col>\n            <col width=\"100\"><\/col>\n            <col width=\"150\"><\/col>\n        <\/colgroup>\n        <tr>\n            <th>Tarea<\/th>\n            <th>grado de avance (del proyecto)<\/th>\n            <th>Habilidad<\/th>\n            <th>Recompensa<\/th>\n        <\/tr>\n        <tbody for=\"task of this.tasks\">\n            <tr>\n                <td>\n                    <a link=\"\/tasks\/{task.id}\">{task.title}<\/a>\n                <\/td>\n                <td>\n                    <div if=\"task.progress < 100\"><progress value=\"{task.progress}\" max=\"100\"><\/progress><\/div>\n                    {translate(task.status)}\n                <\/td>\n                <td>\n                    {task.skill_name}\n                <\/td>\n                <td>\n                    <b class=\"devcoins\">{(task.max_price*0.85).toFixed(2)} \u20ac<\/b>\n                <\/td>\n            <\/tr>\n        <\/tbody>\n    <\/table>\n    <div if=\"this.tasks != undefined and this.tasks.length == 0\">\n        <p>Actualmente no hay tareas en esta vista.<\/p>\n    <\/div>\n    <div if=\"this.tasks == undefined\">\n        <loader><\/loader>\n    <\/div>\n<\/div>","css":".task-list a {\n\tcolor: white;\n    font-weight: bold;\n}","javascript":"class TaskList extends Tag {\n    setup() {\n        \/\/this.tasks = [\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n    get label() {\n        return this._label\n    }\n    set tasks(t) {\n    \/\/    if (t) {\n            this._tasks = t\n            this.update('this.tasks')\n      \/\/  }\n    }\n    get tasks() {\n        return this._tasks\n    }\n}"},"name":"task.list","title":"Lista de tareas","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"text"},{"version":"1.0.0","type":"tag","name":"loader"}],"extends_resource":null},"rc.code":{"id":205,"parameters":[{"name":"content","title":"Contenido","type":"text","documentation":null,"required":null},{"name":"language","title":"Idioma","type":"string"}],"implementation":{"html":"<div>\n    <code element=\"example\" id=\"code\" class=\"{tag.class}\"><\/code><!-- test -->\n<\/div>","css":"\/* http:\/\/prismjs.com\/download.html?themes=prism&languages=markup+css+clike+javascript *\/\n\/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http:\/\/dabblet.com)\n * @author Lea Verou\n *\/\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\tfont-family: 'HelveticaMonospaced', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\ncode {\n    white-space: pre;\n    color: black;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n\/* Code blocks *\/\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground: #f5f2f0;\n}\n\n\/* Inline code*\/\n.inline-code {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n    color: black;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #de1886;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #95d020;\n    color: #197d4f;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #a67f59;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #02b3ff;\n    color: #0300d6;\n}\n\n.token.function {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #e90;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n","javascript":"class Code extends Tag {\n    init() {\n        var codetag = this;\n        this.loaded = Tag.load('assets\/js\/prismjs.js').then( (value) => {\n            codetag.loadComplete = true;\n            return true;\n        } );\n    }\n    render(browserElement) {\n        this.browserElement = browserElement;\n        if (this._content && this.language) {\n            let content = this._content.replace(\/&lt;\/g, \"<\").replace(\/&gt;\/g, '>');\n            let language = this.language;\n            var example = this.example;\n            content = this.fixIndentation(content).replace(\/\\t\/g, '   ');;\n            example.innerHTML = this.htmlEscape(content);\n            if (this.loadComplete === true) {\n                var html = Prism.highlight(content, Prism.languages[language]);\n                example.innerHTML = html;\n            } else {\n                this.loaded.then(function () {\n                    \n                    var html = Prism.highlight(content, Prism.languages[language]);\n                    example.innerHTML = html;\n                });\n            }\n        }\n        return browserElement;\n    }\n    refresh() {\n        if (this.browserElement)\n            this.render(this.browserElement);\n    }\n    set content(content) {\n        this._content = content;\n        this.refresh();\n    }\n    get content() {\n        return this._content;\n    }\n    htmlEscape(str) {\n        return str\n            .replace(\/&\/g, '&amp;')\n            .replace(\/\"\/g, '&quot;')\n            .replace(\/'\/g, '&#39;')\n            .replace(\/<\/g, '&lt;')\n            .replace(\/>\/g, '&gt;')\n            \n    }\n    fixIndentation(text) {\n        let lines = text.split('\\n');\n        let minSpaces = null;\n        for (let line of lines) {\n            if (line.trim()) {\n                let spaces = line.search(\/\\S\/)\n                if (minSpaces == null || spaces < minSpaces) {\n                    minSpaces = spaces;\n                }\n            }\n        }\n        let newLines = [];\n        for (let line of lines) {\n            if (line.trim()) {\n                newLines.push(line.substr(minSpaces));\n            }\n        }\n        if (newLines.length > 0) {\n            newLines[0] = newLines[0].trim();\n        }\n        return newLines.join('\\n');\n    }\n}"},"name":"rc.code","title":"C\u00f3digo","type":"tag","extends_resource":null},"form.radio":{"id":975,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":null,"readonly":false,"required":true,"title_translated":"Label","documentation_translated":""},{"name":"options","title":"Opciones","type":"array","documentation":null,"options":{"resourcetype":"namevalue"},"readonly":false,"required":false,"title_translated":"Options","documentation_translated":""},{"name":"value","title":"Valor","type":"string","documentation":null,"readonly":false,"required":false,"options":{"resourcetype":"namevalue"},"title_translated":"Value","documentation_translated":""},{"name":"translate_options","title":"Traducir las opciones","type":"boolean","documentation":"","readonly":false,"required":false,"title_translated":"Translate the options","documentation_translated":""}],"implementation":{"html":"<div class=\"form-radio-container\">\n    <label class=\"form-label\" if=\"this.label !== undefined\">{translate(this.label)}<\/label>\n    <input type=\"hidden\" name=\"{this.name}\" value=\"{this.value}\" \/>\n    <div class=\"radio-items\"  for=\"option of this.options\">\n        <div (click)=\"this.select(option.value)\" class=\"form-radio-box\">\n            <div class=\"form-radio {(this.value != undefined) && this.value == option.value ? 'selected' : ''}\">\n                <div class=\"form-radio-dot\"><\/div>\n            <\/div>\n            <label if=\"option.name !== undefined\" class=\"form-option-label\">{translate(option.name)}<\/label>\n        <\/div>\n    <\/div>\n    <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\n<\/div>","css":".form-radio-container {\n\tmargin-top: 16px;\n    margin-bottom: 16px;\n}\n\n.radio-items {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.form-radio-box {\n    margin-right: 30px;\n    display: flex;\n    align-items: center;\n}\n\n.form-radio {\n    margin-top: 8px;\n    margin-bottom: 8px;\n\twidth: 21px;\n\theight: 21px;\n\ttext-align: center;\n\tborder-radius: 15px;\n\tcursor: pointer;\n\t-webkit-user-select: none;\n\tdisplay: inline-block;\n\tline-height: 18px;\n    border: 1.6px solid black;\n    background: #f3f3f3;\n}\n\n.form-radio-box label {\n\tdisplay: inline-block;\n\tvertical-align: top;\n\tcursor: pointer;\n\t-webkit-user-select: none;\n\tuser-select: none;\n    margin-left: 8px;\n    font-weight: normal;\n}\n\n.form-radio-dot {\n    display: none;\n}\n\n.form-radio.selected .form-radio-dot {\n    display: block;\n    width:8px;\n    height:8px;\n    border-radius: 5px;\n    background: white;\n    margin-left: 6.5px;\n    margin-top: 6.5px;\n}\n\n.form-radio.selected {\n\tbackground: #4682e2;\n\tborder-color: #4682e2;\n}","javascript":"class RadioGroup extends Tag {\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n    }\n\n    get value() {\n        return this._value\n    }\n\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n\n    get label() {\n        return this._label\n    }\n\n    set options(o) {\n        this._options = o\n        this.update('this.options')\n    }\n    get options() {\n        return this._options\n    }\n    select(value) {\n        this.value = value\n        this.update('this.options')\n        this.fire('change', value);\n    }\n\n}"},"name":"form.radio","title":"Grupo de radio","type":"tag","extends_resource":null},"where":{"id":176,"parameters":[{"name":"field","title":"Campo","type":"string","documentation":"El campo de la tabla de la base de datos que desea filtrar.","required":null},{"name":"value","title":"Valor","type":"string","documentation":"\u00bfQu\u00e9 valor debe tener la fila?"}],"implementation":[],"name":"where","title":"D\u00f3nde Condici\u00f3n","type":"object","extends_resource":null},"parametertype":{"id":813,"parameters":[{"name":"name","title":"Nombre","type":"string","documentation":"El nombre del sistema del par\u00e1metro.","required":true},{"name":"title","title":"T\u00edtulo","type":"string","documentation":"El t\u00edtulo del par\u00e1metro (por ejemplo, \"Texto\").","required":true},{"name":"editor","title":"Editor tipogr\u00e1fico","type":"tagtype","documentation":"La etiqueta del editor para editar este tipo de par\u00e1metro."},{"name":"sqltype","title":"Tipo SQL","type":"string","documentation":"El tipo SQL correspondiente (MySQL), tambi\u00e9n puede utilizarse con otras bases de datos."},{"name":"viewer","title":"Visor de tipos","type":"tagtype","documentation":"Este visor se utiliza para mostrar el contenido del par\u00e1metro.","required":null},{"name":"typesettings","title":"Ajustes de tipo","type":"tagtype","documentation":"La etiqueta para editar los ajustes de la etiqueta (por ejemplo, m\u00edn\/m\u00e1x para los n\u00fameros).","required":null}],"implementation":{"javascript":"class ParameterType {\n    save() {\n        return Tag.call('parametertype', { action: 'save', value: JSON.stringify(this) });\n    }\n    static getTypes() {\n        if (!ParameterType.types) {\n            ParameterType.types = Resource.getResource('parametertype').data\n        }\n        return ParameterType.types;\n    }\n    static loadTypes() {\n        return Tag.call('parametertype', { action: 'load' }).then(result => {\n            ParameterType.types = result;\n            return result;\n        });\n    }\n    static getTypeByName(name) {\n        let types = this.getTypes();\n        if (types) {\n            let idx = types.findIndex(v => { return v.name == name })\n            return types[idx]\n        } else {\n            console.warn('getType. types unresolved') \n        }\n    }\n}"},"data":[{"id":6,"name":"array","title":"parameter_type_array","editor":"form.array","sqltype":"TEXT","viewer":"view.array","typesettings":"form.array","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":5,"name":"boolean","title":"parameter_type_boolean","editor":"form.checkbox","sqltype":"BOOL","viewer":"view.bool","typesettings":"form.checkbox","typesettings_editor":"","editorDefault":null,"translate_settings":"[\"label\",\"htmllabel\"]"},{"id":9,"name":"color","title":"parameter_type_color","editor":"form.text","sqltype":"VARCHAR(64)","viewer":"form.text","typesettings":"form.text","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":13,"name":"datasource","title":"parameter_type_datasource","editor":"form.datasource","sqltype":"","viewer":"form.datasource","typesettings":"form.datasource","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":11,"name":"date","title":"parameter_type_date","editor":"form.date","sqltype":"DATE","viewer":"view.date","typesettings":null,"typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":19,"name":"datetime","title":"parameter_type_datetime","editor":"form.text","sqltype":"DATETIME","viewer":"view.text","typesettings":"form.text","typesettings_editor":"","editorDefault":"{\"type\":\"datetime-local\"}","translate_settings":null},{"id":12,"name":"db_row","title":"parameter_type_db_row","editor":"form.options.dbrow","sqltype":"INTEGER(32)","viewer":"form.options.dbrow.view","typesettings":"form.options.dbrow","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":15,"name":"file","title":"parameter_type_file","editor":"form.file","sqltype":"VARCHAR(1024)","viewer":"view.file","typesettings":"form.file","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":2,"name":"number","title":"parameter_type_number","editor":"form.number","sqltype":"INTEGER(32)","viewer":"view.number","typesettings":"form.number","typesettings_editor":"","editorDefault":null,"translate_settings":"[\"options:suffix\"]"},{"id":3,"name":"options","title":"parameter_type_options","editor":"dropdown","sqltype":"TEXT","viewer":"view.options","typesettings":"dropdown","typesettings_editor":"","editorDefault":null,"translate_settings":"[\"options:options:name\"]"},{"id":10,"name":"password","title":"parameter_type_password","editor":"form.password","sqltype":"VARCHAR(128)","viewer":"form.text","typesettings":"form.text","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":17,"name":"radio","title":"parameter_type_radio","editor":"form.radio","sqltype":"VARCHAR(24)","viewer":"view.options","typesettings":"form.radio","typesettings_editor":"","editorDefault":null,"translate_settings":"[\"options:options:name\"]"},{"id":8,"name":"resource","title":"parameter_type_resource","editor":"form.resource","sqltype":"TEXT","viewer":"object.view","typesettings":"form.resource","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":14,"name":"resource_params","title":"parameter_type_resource_params","editor":"rc.resource.with.parameters","sqltype":"TEXT","viewer":"rc.view.resource.with.parameters","typesettings":"rc.resource.with.parameters","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":7,"name":"string","title":"parameter_type_string","editor":"form.text","sqltype":"VARCHAR({maxlength})","viewer":"view.text","typesettings":"form.text","typesettings_editor":"","editorDefault":"{\"maxlength\":256}","translate_settings":"[\"options:placeholder\"]"},{"id":4,"name":"tagtype","title":"parameter_type_tagtype","editor":"form.tagtype","sqltype":"VARCHAR(1024)","viewer":"view.text","typesettings":"form.tagtype","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":1,"name":"text","title":"parameter_type_text","editor":"form.textarea","sqltype":"TEXT","viewer":"view.text","typesettings":"","typesettings_editor":"","editorDefault":null,"translate_settings":null},{"id":18,"name":"translated_string","title":"parameter_type_translated_string","editor":"form.text.translated","sqltype":"VARCHAR(1024)","viewer":"view.translated.text","typesettings":"form.text.translated","typesettings_editor":"","editorDefault":null,"translate_settings":null}],"name":"parametertype","title":"Tipo de par\u00e1metro","type":"dbtable","extends_resource":null},"rc.dependencies.view":{"id":352,"parameters":[],"implementation":{"html":"<div>\n    <div if=\"this.dependencies and this.dependencies.length > 0\">   \n        <h4>{this.label ? this.label : 'Dependencies'}<\/h4>\n\t\t<ul class=\"list\" for=\"dependency of this.dependencies\">\n\t\t\t<li><b>{dependency.title}<\/b> {dependency.version}<br\/>{dependency.name}, {dependency.type}<\/li>\n\t\t<\/ul>\n\t\t<p if=\"this.dependencies and this.length == 0\">No dependencies<\/p>\n    <\/div>\n<\/div>","javascript":"class RCDependenciesView extends Tag {\n    set dependencies(d) {\n        this._dependencies = d\n        this.update('this.dependencies')\n        this.updateDependencies()\n    }\n    get dependencies() {\n        return this._dependencies\n    }\n    updateDependencies() {\n        resource.action('get_dependencies_info', {'dependencies':this.dependencies}).then(dependencies => {\n            this._dependencies = dependencies\n            this.update('this.dependencies')\n        })\n    }\n}"},"name":"rc.dependencies.view","title":"Ver dependencias","type":"tag","extends_resource":""},"rc.parameters.view":{"id":351,"parameters":[],"implementation":{"html":"<div>\n    <div if=\"this.parameters && this.parameters.length > 0\">\n        <h4>{this.label ? this.label : 'Parameters'}<\/h4>\n        <ul class=\"list\" for=\"parameter of this.parameters\">\n            <li><b>{parameter.title} <\/b>({parameter.name}, {parameter.type})\n            <div if=\"parameter.documentation != null\">{parameter.documentation}<\/div><\/li>\n        <\/ul>\n    <\/div>\n<\/div>"},"name":"rc.parameters.view","title":"Ver par\u00e1metros","type":"tag","extends_resource":""},"rc.table":{"id":116,"parameters":[],"implementation":{"html":"<div>\n    <table class=\"table\">\n        <thead>\n            <tr for=\"column of this.columns\">\n                <th style=\"width:{column.width}%;\">{column.title}<\/th>\n            <\/tr>\n        <\/thead>\n\t\t<tbody for=\"item of this.data\">\n\t\t\t<tr for=\"column of this.columns\">\n\t\t\t\t<td>\n\t\t\t\t\t{this.format(item[column.name])}\n\t\t\t\t<\/td>\n\t\t\t<\/tr>\n\t\t<\/tbody>\n    <\/table>\n<\/div>","css":"","javascript":"class JJTable extends Tag {\n    set data(d) {\n        this._data = d\n        this.update('this.data')\n    }\n    get data() {\n        return this._data\n    }\n    set label(l) {\n        this._label = l\n    }\n    get label() {\n        return this._label\n    }\n    set columns(c) {\n        this._columns = c\n        this.update('this.columns')\n    }\n    get columns() {\n        return this._columns\n    }\n    format(v) {\n        if (typeof v == 'object') {\n            return JSON.stringify(v)\n        } else {\n            return v\n        }\n    }\n}"},"name":"rc.table","title":"Cuadro","type":"tag","extends_resource":null},"db.list":{"id":179,"parameters":[{"name":"table","title":"Cuadro","type":"string","documentation":"Especifique el nombre de la tabla de la base de datos.","required":null},{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":"Nombre del recurso","required":null},{"name":"where","title":"D\u00f3nde","type":"array","documentation":"Especifique qu\u00e9 filas deben mostrarse.","required":null,"options":{"resourcetype":"where"}},{"name":"label","title":"Etiqueta","type":"string","documentation":"El t\u00edtulo de la tabla.","required":null},{"name":"labelfield","title":"Campo de etiqueta","type":"string","documentation":"El campo de la base de datos donde debe encontrarse la etiqueta de los art\u00edculos.","required":null}],"implementation":{"html":"<div class=\"j-viewobjects\">\n    <h3 if=\"this.label != undefined\">{this.label}<\/h3>\n    <div for=\"obj of this.objs\">\n        <object.view label=\"{obj[this.labelfield]}\" resourcetype=\"{this.resourcetype}\" obj=\"{obj}\"><\/object.view> \n    <\/div>\n<\/div>","javascript":"class JDBListObjects extends Tag {\n    set where(w) {\n        this._where = w\n        this.reloadData()\n    }\n    get where() {\n        if (!this._where) {\n            this._where = []\n        }\n        return this._where\n    }\n    set table(t) {\n        this._table = t\n        this.reloadData()\n    }\n    get table() {\n        return this._table\n    }\n    reloadData() {\n        let where = {}\n        for (let whereItem of this.where) {\n            where[whereItem.field] = whereItem.value\n        }\n        resource.call({table:this.table,where:where}).then(result => {\n            this.objs = result \n            this.update('this.objs')\n        })\n    }\n    set resourcetype(r) {\n        if (this._resourcetype !== r) {\n            this._resourcetype = r\n            Resource.loaded(r).then( resource => {\n                this.resource = resource\n                this.update('this.resource')\n                this.update('this.resourcetype')\n            })\n        }\n        this.reloadData()\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n}"},"name":"db.list","title":"Ver objetos","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"object.view"}],"extends_resource":null},"rc.diff":{"id":354,"parameters":[],"implementation":{"html":"<div element=\"differ\" class=\"rc-diff\"><\/div>","css":".rc-diff {\n    height: 450px;\n}","javascript":"class RCDiff extends Tag {\n    set language(l) {\n        this._language = l\n        if (this.editor)\n            monaco.editor.setModelLanguage(this.editor.getModel(), l)\n    }\n\n    get language() {\n        return this._language\n    }\n\n    set original(o) {\n        this._original = o\n        this.loadEditor()\n    }\n\n    get original() {\n        return this._original\n    }\n\n    set updated(u) {\n        this._updated = u\n        this.loadEditor()\n    }\n\n    get updated() {\n        return this._updated\n    }\n\n    render(browserElement) {\n        this.loadEditor(browserElement.node);\n    }\n\n    loadEditor(element) {\n        \/*if (this.done) {\n            return\n        }*\/\n        if (!element) {\n            element = this.differ\n        }\n        if (!element) {\n            return\n        }\n        if (this.original != undefined && this.updated != undefined) {\n            this.done = true\n          \/\/  let element = this.differ\n\n            var originalModel = monaco.editor.createModel(this.original, \"text\/plain\");\n            var modifiedModel = monaco.editor.createModel(this.updated, \"text\/plain\");\n            if (!this.diffEditor) {\n                this.diffEditor = monaco.editor.createDiffEditor(element);\n            }\n            this.diffEditor.setModel({\n                original: originalModel,\n                modified: modifiedModel\n            });\n            setTimeout( () => {\n                this.diffEditor.layout();\n            },100)\n            \n        }\n    }\n    \n}"},"name":"rc.diff","title":"Diferencial RC","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"vscode.inc"}],"extends_resource":""},"form.checkbox":{"id":933,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":"La etiqueta de la casilla de verificaci\u00f3n","required":false,"title_translated":"Label","documentation_translated":"The label of the checkbox"},{"name":"value","title":"Valor","type":"boolean","documentation":"Comprobado o no","title_translated":"Value","documentation_translated":"Checked or not"},{"name":"htmllabel","title":"Etiqueta HTML","type":"translated_string","documentation":"Crear una etiqueta HTML, utilizada por ejemplo para a\u00f1adir enlaces en la etiqueta.","readonly":false,"required":false,"title_translated":"HTML Label","documentation_translated":"Create a HTML label, used for example to add links in the label!"}],"implementation":{"html":"<div class=\"form-checkbox checkbox {this.value ? 'selected' : ''} {this.class}\">\n    <input type=\"hidden\" name=\"{this.name}\" value=\"Yes\" if=\"!!this.value\"\/>\n\t<div (keydown)=\"this.keydown(event)\" tabindex=\"0\" (click)=\"this.check()\" class=\"form-element form-element-checkbox  {this.value ? 'selected' : ''}\"><\/div>\n    <label (click)=\"this.check()\" if=\"this.label !== undefined and (this.htmllabel == undefined || this.htmllabel == '')\" class=\"form-label\">{translate(this.label)}<\/label>\n\t<label (click)=\"this.check()\" if=\"this.htmllabel !== undefined\" class=\"form-label\" element=\"labelel\"><\/label>\n    <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\n<\/div>","css":".form-checkbox {\n\tmargin-top: 16px;\n    margin-bottom: 16px;\n}\n\n.form-element-checkbox {\n\twidth: 21px;\n\theight: 21px;\n\ttext-align: center;\n\tborder-radius: 8px;\n\tcursor: pointer;\n\t-webkit-user-select: none;\n\tdisplay: inline-block;\n\tline-height: 18px;\n    border: 1.6px solid black;\n    background: #f3f3f3;\n}\n\n.checkbox label {\n    display: inline;\n    position: relative;\n    top: 3px;\n\tvertical-align: top;\n\tcursor: pointer;\n\t-webkit-user-select: none;\n\tuser-select: none;\n    margin-left: 8px;\n    \/*\n        display: inline-block;\n\tmargin-top: 3px;\n    *\/\n}\n\n.form-element-checkbox::before {\n\tcontent: \"\u2713\";\n\tfont-size: 18px;\n\tvisibility: hidden;\n\tline-height: 18px;\n\ttop: 2px;\n\tposition: relative;\n\tcolor: white;\n\tfont-family: Arial;\n\t-webkit-user-select: none;\n}\n.form-element-checkbox.selected::before {\n\tcontent: \"\u2713\";\n\tvisibility: visible;\n}\n\n.checkbox .form-element-checkbox.selected {\n\tbackground: #4682e2;\n\tborder: 1.6px solid black;\n}","javascript":"class Checkbox extends RCBaseFormElement {\n\n\tsetup() {\n\t\tthis.value = false\n\t}\n\n\tset value(v) {\n\t\tthis._value = (v == true)\n\t\tthis.update('this.value')\n\t}\n\n\tget value() {\n\t\treturn this._value\n\t}\n\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n\n    get label() {\n        return this._label\n    }\n\n\tset htmllabel(l) {\n\t\tthis._htmllabel = l\n\t}\n\n\tget htmllabel() {\n\t\treturn this._htmllabel;\n\t}\n\n\trender() {\n\t\tif (this.htmllabel) {\n\t\t\tthis.labelel.innerHTML = translate(this.htmllabel)\n\t\t}\n\t}\n\n\tcheck() {\n        if (!this.value) {\n            this.value = true\n        } else {\n            this.value = false\n        }\n\t\tthis.fire('change',this.value);\n\t}\n    keydown(event) {\n        if (event.keyCode == 32 || event.keyCode == 13) {\n            this.check()\n            event.preventDefault();\n            event.stopPropagation();\n        }\n \n    }\n    \n}"},"name":"form.checkbox","title":"Elemento de formulario Checkbox","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"}],"extends_resource":null},"form.textarea":{"id":998,"parameters":[{"name":"label","title":"Etiqueta","type":"string","documentation":null,"required":null,"title_translated":"Label","documentation_translated":""}],"implementation":{"html":"<div class=\"form-textarea {this.class}\">\r\n\t<label class=\"form-label\" if=\"this.label !== undefined\">{translate(this.label)}<\/label>\r\n\t<textarea name=\"{this.name}\" class=\"form-element\" spellcheck=\"false\" element=\"textarea\" readonly=\"{this.readonly}\" (blur)=\"this.isValid()\" (input)=\"this.handleInput(node)\">{this.value}<\/textarea> \r\n\t<p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\r\n<\/div>","css":".form-textarea {\r\n\tmargin-top: 16px;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.form-textarea label {\r\n\tdisplay: block;\r\n    margin-bottom: 4px;\r\n}\r\n\r\n.form-textarea textarea {\r\n\twidth: calc(100% - 32px);\r\n\tborder: 1.6px solid black;\r\n\theight: 144px;\r\n\tborder-radius: 8px;\r\n\tpadding: 16px;\r\n\toutline: 0;\r\n\tcursor: pointer;\r\n\tbackground:#f3f3f3;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n\r\n}\r\n\r\n.form-textarea textarea:focus {\r\n    border-color: #0a6ca9;\r\n}","javascript":"class FormTextarea extends RCBaseFormElement {\n    handleInput(node) {\n        this.value = node.value\n        this.fire('change',this.value)\n    }\n    \n    set value(val) {\n        this._value = val;\n        this.update('this.value')\n    }\n    \n    get value() {\n        return this._value\n    }\n}"},"name":"form.textarea","title":"Elemento de formulario Textarea","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"}],"extends_resource":null},"text":{"id":608,"parameters":[{"name":"name","type":"string","documentation":"La clave del texto, que es el nombre del campo en la tabla \"texto\".","required":true,"title":"Nombre"}],"implementation":{"html":"<span>{ this.text }<\/span>","javascript":"class TextList extends Tag {\n    set name(n) {\n        this._name = n\n        this.text = TextList.getText(n)\n        this.update('this.text')\n        this.update('this.name')\n    }\n    get name() {\n        return this._name\n    }\n    static getText(k) {\n        return translate(k)\n    }\n}"},"name":"text","title":"Texto multiling\u00fce","type":"tag","dependencies":[],"extends_resource":null},"vscode.inc":{"id":356,"parameters":[],"implementation":{"javascript":"class VSCodeInc extends Tag {\n    static initialize() {\n        if (VSCodeInc.included) {\n            return true\n        }\n        let promise = new Promise(function (resolve, reject) {\n            VSCodeInc.resolved = resolve\n        });\n\n        var script = document.createElement('script');\n        script.type = 'text\/javascript';\n        let path = Resource.wp ? 'wp-content\/plugins\/metayota\/' : '';\n        script.src = path + 'libs\/monaco-editor\/min\/vs\/loader.js';\n        script.onload = function () {\n            require.config({ paths: { 'vs': path + 'libs\/monaco-editor\/min\/vs' } });\n            require(['vs\/editor\/editor.main'], function () {\n                VSCodeInc.included = true\n                VSCodeInc.resolved(true)\n            })\n        }\n        document.head.appendChild(script);\n\n\n\n        return promise\n    }\n\n}"},"name":"vscode.inc","title":"VSCode incluye","type":"tag","extends_resource":""},"design.resparameter":{"id":1019,"parameters":[],"implementation":{"html":"<div>\n    <h3 if=\"this.label != undefined\">{this.label}<\/h3>\n    <div if=\"this.parameters != undefined\">\n        <div class=\"parameters\" for=\"parameter of this.parameters\">\n            <div if=\"this.readonly === true || parameter.readonly === true\">\n                <object.viewparameter documentation=\"{this.documentation}\" parameter=\"{parameter}\" value=\"{parameter.value}\"><\/object.viewparameter>\n            <\/div>\n\n            <div if=\"this.readonly !== true && !parameter.readonly\">\n                <form.element (register)=\"this.elements.push(event)\" required=\"{parameter.required}\" validators=\"{parameter.validators}\" (change)=\"this.parameterChanged(parameter.name,event)\" name=\"{parameter.name}\" label=\"{parameter.title}\" type=\"{parameter.type}\" value=\"{parameter.value}\" options=\"{parameter.options}\"><\/form.element> \n                <div class=\"element-documentation\" if=\"this.showdocumentation && parameter.documentation && parameter.documentation != ''\">{parameter.documentation}<\/div>\n            <\/div>\n        <\/div>\n    <\/div>\n<\/div>","javascript":"class ResParameter extends Tag {\n\n    setup() {\n        this.value = {}  \n        this._elements = [] \n    }\n\n    set elements(e) {\n        this._elements = e\n    }\n\n    get elements() {\n        return this._elements\n    }\n\n    set showdocumentation(s) {\n        this._showdocumentation = s\n        this.update('this.showdocumentation')\n    }\n\n    get showdocumentation() {\n        return this._showdocumentation\n    }\n\n    set documentation(d) {\n        this._documentation = d\n        this.update('this.documentation')\n    }\n\n\n    get documentation() {\n        return this._documentation\n    }\n    \n    set tag(tag) {\n        this._tag = tag;\n        this._elements = []\n        this.parameters = this.getParameters()\n        this.update('this.parameters')\n    }\n    \n    get tag() {\n        return this._tag;\n    }\n    \n    parameterChanged(parameterName,value) {\n        if (this._value === undefined || this._value === null) {\n            this._value = {}\n        }\n        this._value[parameterName] = value\n        this.fire('change',this.value)\n    }\n\n    isValid() {\n        let valid = true\n        \n        for(let element of this.elements) {\n            if (element.isValid && !element.isValid()) {\n                valid = false\n            }\n        }\n        return valid\n    }\n\n\n    getParams(tag) {\n        if (!tag) {\n            return []\n        }\n        let params = []\n        try {\n            if (typeof tag.parameters != 'object') {\n                params = JSON.parse(this._tag.parameters)\n            } else { \n                params = tag.parameters\n            }\n        } catch(e) {\n            console.warn(e)\n        }\n        let value = this._value ? this._value : {}\n        let paramsAndValues = []\n        if (params) {\n            for (let param of params) {\n                let parameter = Object.assign({},param)\n                if (value[param.name] !== undefined) {\n                    parameter.value = value[param.name]\n                }\n                paramsAndValues.push(parameter)\n            }\n        }\n       \/* if (tag.extends_resource != undefined) {\n            let extendsRes = Resource.getResource(tag.extends_resource)\n            if (extendsRes != undefined) {\n                paramsAndValues.push(this.getParams(extendsRes)) \n\n            }\n        }*\/\n        return paramsAndValues\n    }\n    \n    getParameters() {\n        return this.getParams(this._tag)\n    }\n    \n    set value(v) {\n        if (v == '') {\n            v = {}\n        }\n        this._value = v;\n        this.parameters = this.getParameters()\n        this.update('this.value')\n        this._elements = [] \/\/they are going to register again\n        this.update('this.parameters')\n    }\n\n    get value() {\n        if (this.elements && this.elements.length > 0) {\n            let existingValue = this._value ? this._value : {}\n            let associativeObject = this.elements.reduce((obj, item) => {\n                obj[item.name] = item.value;\n                return obj;\n            }, existingValue);\n            return associativeObject\n        }\n        \n        return this._value;\n    }\n}"},"name":"design.resparameter","title":"Par\u00e1metros de recursos","type":"tag","dependencies":[{"name":"form.element","version":"1.0.0","type":"tag"},{"version":"1.0.0","type":"tag","name":"object.viewparameter"}],"extends_resource":null},"form.array":{"id":973,"parameters":[{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":null,"required":null,"options":null,"title_translated":"Resource Type","documentation_translated":""}],"implementation":{"html":"<div class=\"form-array\">\n    <label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)}<\/label>\n    <table if=\"this.value != null && this.value.length > 0\" class=\"table\" >\n        <thead>\n            <tr if=\"this.resource != undefined\" for=\"parameter of this.resource.parameters\">\n                <th>{translate(parameter.title)}<\/td>\n                <th last>Acciones<\/th>\n            <\/tr>\n        <\/thead>\n        <tbody for=\"item of this.value\">\n            <tr if=\"this.resource != undefined\" (dragleave)=\"this.leaveDroparea(event,node)\" (dragover)=\"this.allowDrop(event,node)\" class=\"tr-droparea\"     (drop)=\"this.drop(event, item_index)\" draggable=\"true\" (dragstart)=\"this.drag(event, item_index)\" for=\"parameter of this.resource.parameters\">\n                <td><object.viewparameter showlabel=\"{false}\" parameter=\"{parameter}\" value=\"{item[parameter.name]}\"><\/object.viewparameter><\/td>\n                <td last class=\"action-icons\">\n                    <span (click)=\"this.editItem(item_index)\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/edit.svg\"\/><\/span>\n                    <span (click)=\"this.deleteItem(item_index)\"><img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/delete.svg\"\/><\/span>\n                <\/td>\n            <\/tr>\n        <\/tbody>\n    <\/table>\n\n    <form.button label=\"A\u00f1adir art\u00edculo...\" (click)=\"this.addItemDialog()\"><\/form.button>\n<\/div>","css":".form-array {\n    margin-top: 16px;\n}\n\n.form-array label {\n    margin-bottom: 4px;\n    display: block;\n}\n\n.form-array table {\n    margin-bottom: 16px;\n    text-align: left;\n    border-collapse: collapse;\n}\n\n.form-array table td, .form-array table th {\n    padding-left: 12px;\n    padding-right: 12px;\n    border: 1px solid #cfcfcf;\n}\n\n.tr-droparea.active {\n    color: white;\n    background: #4682e2;\n}\n\n.tr-droparea {\n    height: 15px;\n    width: 15px;\n}\n\n.form-array .object-view-parameter {\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\n.form-array .form-button {\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\n.action-icons {\n    padding: 0px;\n}\n\n.action-icons img {\n    cursor: pointer;\nwidth: 20px;\n    height: 20px;\n}","javascript":"class JJFormArray extends RCBaseFormElement {\n    setup() {\n        this._value = []\n    }\n    set value(v) {\n        if (typeof v == 'string' && v != '') {\n            v = JSON.parse(v)\n        }\n        if (v) {\n            this._value = v\n        } else {\n            this._value = []\n        }\n        this.update('this.value')\n    }\n    get value() {\n        return this._value\n    }\n    set resourcetype(r) {\n        this._resourcetype = r\n        Tag.registerAndLoad(r)\n        Resource.loaded(r).then( resource => {\n            this.resource = resource\n            this.update('this.resource')\n            this.update('this.value')\n        })\n        this.update('this.resourcetype')\n    }\n    editItem(i) {\n        let item = this.value[i]\n         Resource.cls('dialog').createDialogWithData(this.resourcetype, item).then( item => {\n            this.value[i] = item\n            this.update('this.value')\n            this.changed()\n        })\n    }\n    deleteItem(i) {\n        this.value.splice(i,1)\n        this.resourceUpdated(this.value)\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n    resourceUpdated(value,index) {\n        this.value[index] = value;\n        this.update('this.value')\n        this.changed()\n    }\n    addItemDialog() {\n        Resource.cls('dialog').createDialogWithData(this.resourcetype, {}).then( item => {\n            this.addItem(item)\n        })\n    }\n    changed() {\n        this.fire('change',this.value)\n    }\n    addItem(value) {\n        this._value.push(value);\n        this.update('this.value')\n        this.changed()\n    }\n    allowDrop(ev,node) {\n        ev.preventDefault();\n        node.classList.add('active')\n    }\n    leaveDroparea(event,node) {\n        node.classList.remove('active')\n    }\n\n    drag(ev,index) {\n        ev.dataTransfer.setData(\"index\", index);\n    }\n\n    drop(ev, newIndex) {\n        ev.preventDefault();\n        var index = ev.dataTransfer.getData(\"index\");\n\n        this.value.splice(newIndex, 0, this.value.splice(index, 1)[0]);\n        this.update('this.value')\n        \/\/ev.target.appendChild(document.getElementById(data));\n    }\n}"},"name":"form.array","title":"Lista","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"},{"version":"1.0.0","type":"tag","name":"dialog"},{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"form.resource"},{"version":"1.0.0","type":"tag","name":"object.viewparameter"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"form.tagtype":{"id":811,"parameters":[{"name":"typename","title":"Tipo de nombre","type":"tagtype","title_translated":"Geben Sie den Namen ein","documentation_translated":""},{"name":"change","title":"Sobre el cambio","type":"string","documentation":"Evento cuando cambia el tipo de etiqueta.","event":true,"title_translated":"Auf Ver\u00e4nderung","documentation_translated":"Ereignis, wenn sich der Tag-Typ \u00e4ndert."},{"name":"typefilter","title":"Tipo de filtro","type":"db_row","documentation":"Qu\u00e9 tipo de etiquetas deben mostrarse.","options":{"dbtable":"resource_type","titlefield":"title","idfield":"name","translate_options":true},"title_translated":"Filtertyp","documentation_translated":"Welche Art von Tags sollten angezeigt werden.","readonly":false,"required":false},{"name":"label","title":"Etiqueta","type":"string","documentation":"La etiqueta del elemento del formulario.","title_translated":"Feldbeschriftung","documentation_translated":"Das Label des Formularelements."},{"name":"resource_type","title":"Filtro de tipo de recurso","type":"tagtype","documentation":"","readonly":false,"required":false,"title_translated":"resource_form_tagtype_title_resource_type","documentation_translated":""}],"implementation":{"html":"<div class=\"form-tagtype\">\n    <dropdown label=\"{this.label ? this.label : 'Tipo de recurso'}\" (change)=\"this.updated(event)\" label=\"{this.label}\" name=\"{this.name}\" options=\"{this.filteredTags}\" value=\"{this.value}\"><\/dropdown>\n<\/div>","css":"","javascript":"class JJFormTagtype extends RCBaseFormElement {\n    setup() {\n        this.label = 'Resource Type'\n        resource.call({}).then( tags => {\n            debugger\n            this.tags = tags.map((v, i) => { return { name: v.title_translated ? v.title_translated : v.name, value: v.name, \"type\": v.type, 'extends_resource' : v.extends_resource } });\n            this.update('this.tags')\n            this.filterTags()\n        });\n    }\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n    }\n    get value() {\n        return this._value\n    }\n    updated(event) {\n        debugger\n        this.fire('change',event)\n        this._value = event\n    }\n    filterTags() {\n        if (this.tags) {\n            \n            if (this.typefilter) {\n                this.filteredTags = this.tags.filter(tag => {\n                    return tag.type == this.typefilter\n                })\n            } else {\n                this.filteredTags = this.tags\n            }\n            if (this.resource_type) {\n                this.filteredTags = this.filteredTags.filter(tag => {\n                    return tag.extends_resource == this.resource_type\n                })\n            }\n            this.update('this.filteredTags')\n        }\n    }\n    set typefilter(t) {\n        this._typefilter = t\n        this.filterTags()\n    }\n    get typefilter() {\n        return this._typefilter\n    }\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n    get label() {\n        return this._label\n    }\n}"},"name":"form.tagtype","title":"Formulario de tipo de recurso","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"},{"name":"dropdown","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"form.text.translated":{"id":1073,"parameters":[{"name":"name","title":"Nombre","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Name","documentation_translated":""},{"name":"value","title":"Valor","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Wert","documentation_translated":""},{"name":"translation_category","title":"Categor\u00eda de traducci\u00f3n","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"\u00dcbersetzungskategorie","documentation_translated":""},{"name":"unique","title":"\u00danico","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Einzigartig","documentation_translated":""}],"implementation":{"html":"<div class=\"form-text-translatable {this.class}\"> \n\t<label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)} (<a (click)=\"this.toggleTranslationInfo()\">Traducciones<\/a>, <a (click)=\"this.checkAutoTranslate()\">Traducir autom\u00e1ticamente<\/a>)<\/label>\n    <div if=\"!this.unique\">\n        <dropdown (change)=\"this.setExistingTranslation(event)\" options=\"{this.existing_options}\"><\/dropdown>\n    <\/div>\n\t<input \n        if=\"!this.getUseTextarea() && (this.unique || this.create_new_translation)\"\n\t\tname=\"{this.name}\"\n        class=\"input-{this.type ? this.type : 'text'} form-element\"\n\t\tspellcheck=\"false\" \n\t\tautocomplete=\"{this.autocomplete == true ?  'on' : 'off'}\"\n\t\tplaceholder=\"{this.getOtherTranslationNotEmpty()}\" \n\t\telement=\"input\" \n\t\tname=\"{this.name}\" \n\t\ttype=\"{this.type != 'undefined' ? this.type : 'text'}\" \n\t\tvalue=\"{this.translated_value}\" \n\t\t(blur)=\"this.blur()\"\n        (input)=\"this.resourceChanged(node.value)\" \n        (focus)=\"this.loadRecommended(node.value)\"\n        (keypress)=\"this.keypress(event)\"\n\t\treadonly=\"{this.readonly}\"\/>\n\n    <textarea if=\"this.getUseTextarea()\" name=\"{this.name}\"\n        class=\"input-{this.type ? this.type : 'text'} form-element\"\n\t\tspellcheck=\"false\" \n\t\tautocomplete=\"{this.autocomplete == true ?  'on' : 'off'}\"\n\t\tplaceholder=\"{this.getOtherTranslationNotEmpty()}\" \n\t\telement=\"textarea\" \n\t\tname=\"{this.name}\" \n\t\ttype=\"{this.type != 'undefined' ? this.type : 'text'}\" \n\t\tvalue=\"{this.translated_value}\" \n\t\t(blur)=\"this.blur()\"\n\t\t(input)=\"this.resourceChanged(node.value)\" \n        (keypress)=\"this.keypress(event)\"\n\t\treadonly=\"{this.readonly}\"><\/textarea>\n    <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\n    <div element=\"translation_info\" style=\"display:none;\" class=\"translation-info\">\n        <label class=\"form-label\">Clave de traducci\u00f3n<\/label>\n        <input readonly=\"{!this.unique && !this.create_new_translation}\" type=\"text\" (input)=\"this.translationKeyChanged(node.value)\" value=\"{this.value}\"\/>\n        \n        <div for=\"other_language of this.other_languages\">\n            <label class=\"form-label\">{other_language.language_translated}<\/label>\n            <input type=\"text\" (input)=\"this.otherLanguageChanged(other_language, node.value)\" value=\"{other_language.translation}\"\/>\n        <\/div>\n        <a target=\"_blank\" href=\"\/es\/translator#key:{this.value}\">Mostrar en la herramienta de traducci\u00f3n<\/a>\n    <\/div>\n<\/div>","css":".form-text-translatable {\n\tmargin-top: 16px;\n    margin-bottom: 16px;\n}\n\n.translation-info {\n    border:1px solid gray;\n    background: #efefef;\n    padding:20px;\n}\n\ninput:focus::-webkit-input-placeholder {\n    color: white;\n}\n\n.form-text-translatable input {\n    color: black;\n\twidth: calc( 100% - 32px );\n\tborder: 1.6px solid black;\n\theight: auto;\n\tborder-radius: 6px;\n\tpadding-left: 16px;\n\tpadding-right: 16px;\n\tpadding-top: 8px;\n\tpadding-bottom: 8px;\n\toutline: 0;\n\tcursor: pointer;\n    background: #f3f3f3;\n}\n\n.translation-info input {\n    margin-bottom: 10px;\n}\n\n.form-text-translatable input[readonly] {\n\tcolor: #777;\n}\n\n\n\n.form-text-translatable label {\n\tdisplay: block;\n    margin-bottom: 4px;\n}\n\n\/** textarea **\/\n\n\n.form-text-translatable textarea {\n\twidth: calc(100% - 32px);\n\tborder: 1.6px solid black;\n\theight: 144px;\n\tborder-radius: 8px;\n\tpadding: 16px;\n\toutline: 0;\n\tcursor: pointer;\n\tbackground:#f3f3f3;\n\n}\n\n.form-text-translatable textarea:focus {\n    border-color: #0a6ca9;\n}","javascript":"\/***\n * 1) A new translation & Current language is not main language & autotranslate is not available THEN MAIN LANGUAGE IS REQUIRED...\n *\/\nclass FormTextTranslated extends RCBaseFormElement {\n    init() {\n        this.useTextarea = false\n        this.disableBlur = true\n        this.main_language = resource.getData().main_language\n        this.current_language = resource.getData().current_language\n        this.auto_translate = resource.getData().auto_translate\n        if (!this.main_language) {\n            this.main_language = 'en'\n            console.warn('Metayota: main_language is not set in config')\n        }\n    }\n\n    set translation_category(tc) {\n        this._translation_category = tc\n    }\n    get translation_category() {\n        return this._translation_category\n    }\n\n    set translated_value(tv) {\n        this._translated_value = tv\n        this.update('this.translated_value')\n    }\n\n    get translated_value() {\n        return this._translated_value\n    }\n\n    setTranslation(translation) {\n        this.setAttribute('recommended', [])\n        this.value = translation.translation_key\n        this.translated_value = translation.translation\n        this.translationKeyChanged(translation.translation_key)\n        this.updateUseTextarea();\n    }\n\n    toggleTranslationInfo() {\n        if (this.translation_info.style.display == 'block') {\n            this.translation_info.style.display = 'none'\n        } else {\n            this.translation_info.style.display = 'block'\n        }\n    }\n\n    otherLanguageChanged(other_language, newValue) {\n        other_language.translation = newValue\n        if (other_language.language == this.main_language && !this.unique) {\n            this.updateValueNonUnique()\n        }\n        this.generateRandomValue()\n        this.fire('change', this._value) \/\/doesn't really needed to be called all the time, just when it's really changed\n    }\n\n    translationKeyChanged(new_key) {\n        this._value = new_key\n        this._original_value = new_key\n        this.fire('change', this._value)\n        if (!this.create_new_translation) {\n            this.loadTranslation(new_key)\n        }\n    }\n\n    set label(l) {\n        this._label = l\n        this.update('this.label')\n    }\n\n    get label() {\n        return this._label\n    }\n\n    set readonly(re) {\n        this._readonly = re\n    }\n\n    get readonly() {\n        return this._readonly\n    }\n\n    hideRecommended() {\n        this.setAttribute('recommended', [])\n    }\n\n    loadRecommended(value) {\n        if (!this.unique) {\n            resource.action('get_recommended', { query: value, area: this.translation_category }).then(result => {\n                this.setAttribute('recommended', result)\n                let existingOptions =  result.map(item => {\n                    return {\n                        value: item.translation_key,\n                        name: item.translation\n                    };\n                });\n                existingOptions.unshift({\n                    value: 'new_translation',\n                    name: translate('new_translation') \/\/ Hier verwenden wir eine translate-Funktion\n                });\n                this.setAttribute('existing_options', existingOptions) \n            })\n        }\n    }\n\n    convertToTranslationKey(text) {\n        let nameValue = text\n        if (nameValue == undefined) {\n            nameValue = Array.from({ length: 8 }, () => Math.random().toString(36).charAt(2)).join('');\n        } else {\n            nameValue = nameValue.replaceAll('-','_').replaceAll(' ','_').replaceAll('.','_').toLowerCase()\n        }\n        return nameValue\n    }\n\n    generateRandomValue() {\n        if (this.unique && (this._value == undefined || this._value == '')) {\n            let nameValue = this.convertToTranslationKey(this.input.form?.name?.value)\n            this._value = (this.translation_category ? this.convertToTranslationKey(this.translation_category) + '_' : '')  + this.convertToTranslationKey(this.name) + '_'  + nameValue\n            this.fire('change', this._value)\n        }\n    }\n\n    textToTranslationKey(text) {\n        return text.trim().replace(\/(\\d+)([a-zA-Z]+)\/g, '$1_$2').replace(\/([a-zA-Z]+)(\\d+)\/g, '$1_$2').replaceAll(' ', '_').replaceAll('-', '_').replaceAll('(', '_').replaceAll(')', '_').replaceAll('__', '_').replace(\/[^a-z0-9]+\/gi, \"_\").replace(\/^_+|_+$\/g, '').toLowerCase()\n    }\n\n    updateValueNonUnique() {\n        if (this.not_found) {\n            let mainTranslation = this.getMainTranslation()\n            if (mainTranslation != undefined && mainTranslation != '') {\n                this._value = this.textToTranslationKey(mainTranslation)\n                this._value = this.translation_category ? this.textToTranslationKey(this.translation_category) + '_' + this._value : this._value\n                if (this._value.length > 60) {\n                    let category = this.translation_category ? this.textToTranslationKey(this.translation_category) + '_' : ''\n                    let translation_key = category + this.name  + '_' + Array.from({ length: 8 }, () => Math.random().toString(36).charAt(2)).join('');\n                    this._value = translation_key\n                }\n            } else if (this._original_value != undefined) {\n                this._value = this._original_value\n            }\n            this.update('this.value')\n            this.fire('change', this._value)\n        }\n    }\n\n    setExistingTranslation(value) {\n        if (value == 'new_translation') {\n            this.setAttribute('create_new_translation', true);\n            if (!this.auto_translate && this.current_language != this.main_language) {\n                let category = this.translation_category ? this.textToTranslationKey(this.translation_category) + '_' : ''\n                let translation_key = category  + Array.from({ length: 8 }, () => Math.random().toString(36).charAt(2)).join('');\n                this.value = translation_key\n            } else {\n                this.value = this.translation_category\n            }\n            this.loadOtherLanguages('', false)\n        } else {\n            this.setAttribute('create_new_translation', false);\n            this.value = value\n            this.loadOtherLanguages(this._value,true)\n        }\n    }\n\n    resourceChanged(value) {\n        if (this.readonly === true) return\n\n        this._translated_value = value\n        if (value == '') {\n            if (!this.unique) {\n                this._value = ''\n                this._original_value = ''\n            }\n        } else {\n            if (!this.unique) {\n                this.updateValueNonUnique()\n            }\n        }\n        this.update('this.value')\n        this.generateRandomValue()\n        this.fire('change', this._value)\n        this.updateUseTextarea()\n    }\n\n    keypress(e) {\n        if (!e) e = window.event;\n        var keyCode = e.keyCode || e.which;\n        if (keyCode == '13') {\n            \/\/this.fire('enter', 'pressed enter')\n            if (!this.getUseTextarea()) {\n                if (this.translated_value == undefined) {\n                    this.translated_value =\"\\n\"\n                } else {\n                    this.translated_value+=\"\\n\"\n                }\n            }\n            this.updateUseTextarea()\n            return false;\n        }\n    }\n\n    blur() {\n        window.setTimeout(() => {\n            this.hideRecommended()\n        }, 800)\n        \n        if (!this.disableBlur && !this.unique) {\n            resource.action('get_translation', { translation_key: this.value }).then(result => {\n                if (result) {\n                    if (!result.not_found) {\n                        this._translated_value = result.translation\n                    }\n                    this.updateUseTextarea();\n                    this.setAttribute('editable',false)\n                } else {\n                    this.setAttribute('editable',true)\n                }\n            });\n        }\n    }\n\n    saveTranslations() {\n        if (this.value != undefined && this.value != '') {\n            Translation.translations[this.value] = this._translated_value\n\n            let valuesToSave = { 'translation_key': this.value, 'translation': this._translated_value }\n            if (!this.unique) {\n                valuesToSave.translation_category = this.translation_category;\n            }\n            resource.action('save_translation', valuesToSave);\n            \n            this.other_languages.forEach(other_language => {\n                other_language.translation_key = this.value\n                resource.action('save_translation',other_language)\n            });\n            \n        }\n    }\n\n    isValid() {\n        this.saveTranslations()\n        return true\n    }\n\n    loadOtherLanguages(key,including_main_language) {\n        resource.action('get_translation', { translation_key: key, including_main_language:including_main_language }).then(result => {\n            \n            if (result != undefined && result.translation !== undefined) {\n                this.setAttribute('other_languages',result.other_languages)\n                this.update('this.getOtherTranslationNotEmpty')\n            }\n        })\n    }\n\n    getAllTranslations() {\n        let allTranslations = []\n        allTranslations.push(...this.other_languages)\n        let translation = { 'translation': this._translated_value, 'language':this.language }\n        allTranslations.push(translation) \/\/ current language\n        return allTranslations\n    }\n\n    getMainTranslation() {\n        let mainTranslation = this.getAllTranslations().find( t => t.language == this.main_language)\n        if (mainTranslation != undefined) {\n            return mainTranslation.translation\n        }\n        return undefined\n    }\n\n    checkAutoTranslate() {\n        let allTranslations = this.getAllTranslations()\n        let emptyTranslations = allTranslations.filter(item => item.translation === '');\n        let filledTranslations = allTranslations.filter(item => item.translation !== '');\n        let emptyLanguages = emptyTranslations.map(item => item.language);\n        resource.action('autotranslate', {'translation_key': this.value, 'existing_translations':filledTranslations, 'needed_languages':emptyLanguages}).then(result=>{\n            for (let key in result) {\n                let value = result[key];\n                if (key == this.language) {\n                    \n                    this.input.value = value\n                \n                    this.translated_value = value\n                } else {\n                    let langObj = this.other_languages.find(item => item.language == key);\n                    if(langObj) {\n                        langObj.translation = value;\n                    }\n                }\n            }\n            this.update('this.other_languages')\n            this.update('this.getOtherTranslationNotEmpty')\n            this.updateValueNonUnique()\n        })\n    }\n\n    getOtherTranslationNotEmpty() {\n        \/\/ If the property doesn't exist or isn't an array, return null\n        if (!this.other_languages || !Array.isArray(this.other_languages)) {\n            return null;\n        }\n\n        \/\/ Find the first language object where the translation is not an empty string\n        const firstValidLanguage = this.other_languages.find(lang => lang.translation && lang.translation.trim() !== '');\n\n        \/\/ If found, return the translation, otherwise return null\n        return firstValidLanguage ? firstValidLanguage.translation : null;\n    };\n\n \n    loadTranslation(key) {\n        resource.action('get_translation', { translation_key: key }).then(result => {\n            if (result != undefined) {\n                \n                \/\/if (!result.not_found) {\n                this.not_found = result.not_found\n                this.language = result.language\n                    if (result.translation != undefined) {\n                        if (this.input != undefined) {\n                            this.input.value = result.translation\n                        }\n                        this.translated_value = result.translation\n                        this.updateUseTextarea();\n                    }\n                    this.setAttribute('other_languages',result.other_languages)\n                    this.update('this.getOtherTranslationNotEmpty')\n                \/\/}\n            }\n        })\n    }\n\n    getUseTextarea() {\n        if (!this.unique) {\n            return false\n        }\n        if (this._translated_value != undefined) {\n            if (this._translated_value.length > 200) {\n                return true;\n            }\n            if (this._translated_value.includes(\"\\n\")) {\n                return true\n            }\n        }\n        return false\n    }\n\n    updateUseTextarea() {\n        this.disableBlur = true\n        \n        let giveFocus = document.activeElement != undefined && (this.input == document.activeElement || this.textarea == document.activeElement);\n        this.update('this.getUseTextarea')\n        if (giveFocus) {\n            if (this.getUseTextarea()) {\n                this.textarea.focus()\n            } else {\n                this.input.focus()\n            }\n        }\n        this.update('this.translated_value');\n        this.disableBlur = false\n    }\n\n    set value(v) {\n        if (v === undefined || v === null) {\n            v = ''\n        }\n        this._value = v\n        this._original_value = v\n        this.update('this.value')\n        this.loadTranslation(v)\n        this.loadRecommended()\n    }\n    get value() {\n        return this._value\n    }\n\n    set type(t) {\n        this._type = t\n        this.update('this.type')\n    }\n\n    get type() {\n        return this._type\n    }\n    set placeholder(p) {\n        this._placeholder = p\n        this.update('this.placeholder')\n    }\n\n    get placeholder() {\n        return this._placeholder\n    }\n}"},"data":{"main_language":"en","current_language":"es","auto_translate":true},"name":"form.text.translated","title":"Campo de formulario de texto traducible","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"},{"version":"1.0.0","type":"php-library","name":"translation-service"},{"version":"1.0.0","type":"php-library","name":"deepl"},{"version":"1.0.0","type":"php-library","name":"chat-gpt"}],"extends_resource":null},"rc.arrange":{"id":270,"parameters":[],"implementation":{"html":"<div class=\"j-arrange\">\n    <div class=\"droparea\" (dragleave)=\"this.leaveDroparea(event,node)\" (dragover)=\"this.allowDrop(event,node)\" (drop)=\"this.drop(event, this.idx)\" draggable=\"true\" (dragstart)=\"this.drag(event, this.idx)\" >\n        <img class=\"icon\" src=\"\/wp-content\/plugins\/metayota\/editor_scripts\/rc.icon\/move.svg\"\/>\n    <\/div>\n<\/div>","css":".droparea {\n    height: 21px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    border-radius: 4px;\n}\n\n.droparea.active {\n    background: #4ba2f1;\n}\n\n.j-arrange {\n    display: inline-block;   \n}\n\n.droparea {\n    display: inline-block;\n}","javascript":"class JArrange extends Tag {\n    set idx(i) {\n        this._idx = i\n    }\n    get idx() {\n        return this._idx\n    }\n    set collection(c) {\n        this._collection = c\n    }\n    get collection() {\n        return this._collection\n    }\n    allowDrop(ev,node) {\n        ev.preventDefault();\n        node.classList.add('active')\n    }\n    leaveDroparea(event,node) {\n        node.classList.remove('active')\n    }\n\n    drag(ev,index) {\n        ev.dataTransfer.setData(\"index\", index);\n    }\n\n    drop(ev, newIndex) {\n        ev.preventDefault();\n        var index = ev.dataTransfer.getData(\"index\");\n        this.collection.splice(newIndex, 0, this.collection.splice(index, 1)[0]);\n        this.fire('change',this.collection)\n    }\n}"},"name":"rc.arrange","title":"Arrastrar y soltar","type":"tag","extends_resource":null},"rc.resource.config":{"id":307,"parameters":[],"implementation":{"html":"<div>\n  <title title=\"Configure your resource\"><\/title>\n  <div if=\"!!this.resourceTypeName\">\n    <form.resource (change)=\"this.configurationUpdated(event)\" resourcetype=\"{this.resourceTypeName}\" value=\"{this.resource.configuration}\"><\/form.resource>\n  <\/div>\n<\/div>","javascript":"class ResourceConfig extends Tag {\n  set resource(r) {\n    \n    this._resource = r\n    if (r) {\n      let restypeData = Resource.getResource('resource_type')\n      let resourceTypes = restypeData.data\n      this.restypes = resourceTypes\n      this.resourceType = this.getResourceType(r.type)\n      this.resourceTypeName = this.resourceType.configuration\n    } else {\n      this.resourceTypeName = null\n      this.update('this.resourceTypeName')\n    }\n    this.update('this.restypes')\n    this.update('this.resource')\n    this.update('this.resourceTypeName')\n    this.update('this.resourceType')\n    \n  }\n  get resource() {\n    return this._resource\n  }\n  configurationUpdated(c){\n    resource.action('update-config',{configuration:c,resource:this.resource.name})\n  }\n  getResourceType(n) {\n      let idx = this.restypes.findIndex( resourceType => {  \n          return (resourceType.name == n)\n      } )\n      return this.restypes[idx]\n  }\n}"},"name":"rc.resource.config","title":"Configuraci\u00f3n de recursos","type":"tag","dependencies":[{"version":"1.0.0","type":"dbtable","name":"resource_type"}],"extends_resource":null},"rc.validator.regex":{"id":834,"parameters":[{"name":"regex","title":"Expresi\u00f3n regular","type":"string","documentation":"El validador de expresiones regulares necesita un texto, que define si un valor es v\u00e1lido. El validador puede utilizarse para comprobaciones personalizadas de datos.","title_translated":"Regular Expression","documentation_translated":"The regular expression validator needs a text, which defines if a value is valid. The validator can be used for custom checks on data."},{"name":"title","title":"Mensaje de error","type":"translated_string","documentation":"El t\u00edtulo describe la funcionalidad de la expresi\u00f3n regular.","title_translated":"Error message","documentation_translated":"The title describes the functionality of the regular expression.","readonly":false,"required":false}],"implementation":{"javascript":"class RegExValidator {\n    isValid(value) {\n        if (value.match('^' + this.regex + '$') === null) {\n            return this.title\n        } else {\n            return true\n        }\n    }\n}"},"name":"rc.validator.regex","title":"Validador RegEx","type":"validator","extends_resource":null},"form.number":{"id":1026,"parameters":[{"name":"value","type":"string","documentation":"N\u00famero","title":"Valor","title_translated":"Value","documentation_translated":"Number"},{"name":"label","type":"string","documentation":"Etiqueta para el componente del formulario","title":"Etiqueta","readonly":false,"required":false,"title_translated":"Label","documentation_translated":"Label for the form component"},{"name":"suffix","type":"translated_string","documentation":"El tipo de n\u00famero, por ejemplo, USD, Kg, etc.","title":"Sufijo","title_translated":"Suffix","documentation_translated":"The type of the number e.g. USD, Kg, etc.","readonly":false,"required":false},{"name":"decimal_places","title":"Posiciones decimales","type":"number","documentation":"N\u00famero de decimales a mostrar.","readonly":false,"required":false,"title_translated":"Decimal Places","documentation_translated":"Number of decimal places to show."},{"name":"readonly","title":"S\u00f3lo lectura","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Read only","documentation_translated":""},{"name":"group_separator","title":"Separador de grupos","type":"string","documentation":"Un separador de grupos, como una coma (,) o un punto (.), ayuda a organizar los n\u00fameros grandes en grupos m\u00e1s f\u00e1ciles de leer, normalmente de tres d\u00edgitos. Por ejemplo, el n\u00famero 1.000 o 1.000 significa mil. Separa los millares de las centenas, lo que facilita la lectura y la comprensi\u00f3n del valor. En distintos lugares se utilizan s\u00edmbolos diferentes como separadores de grupos.","options":{"maxlength":"1"},"readonly":false,"required":false,"title_translated":"Group Separator","documentation_translated":"A group separator, like a comma (,) or a dot (.), helps to organize big numbers into easier-to-read groups, usually of three digits. For example, the number 1,000 or 1.000 means one thousand. It separates thousands from hundreds, making it quicker to read and understand the value. Different places use different symbols as group separators."},{"name":"decimal_separator","title":"Separador decimal","type":"string","documentation":"Un separador decimal es un punto (.), una coma (,) u otros s\u00edmbolos que dividen un n\u00famero en partes enteras y fraccionarias. Como en 12,34 o 12,34. En $3.50, el punto (.) es el separador decimal, lo que significa que tienes 3 d\u00f3lares y 50 centavos.","options":{"maxlength":"1"},"readonly":false,"required":false,"title_translated":"Decimal Separator","documentation_translated":"A decimal separator is a dot (.), comma (,), or other symbols that divide a number into whole and fractional parts. Like in 12.34 or 12,34. In $3.50, the dot (.) is the decimal separator which means you have 3 dollars and 50 cents."},{"name":"group_separator_characters_count","title":"N\u00famero de grupo","type":"number","documentation":"El n\u00famero de caracteres del separador de grupo indica cu\u00e1ntos d\u00edgitos se agrupan antes de utilizar un separador. La agrupaci\u00f3n m\u00e1s habitual es por miles (3 caracteres), pero algunas regiones o sistemas permiten personalizarla, como la agrupaci\u00f3n por diez mil (4 caracteres). Agrupaci\u00f3n de tres caracteres (1.000 o 1.000): Es la m\u00e1s utilizada en todo el mundo. Agrupaci\u00f3n de cuatro caracteres (10.000 o 10.000): Es menos com\u00fan, pero puede encontrarse en algunos pa\u00edses de Asia Oriental.","readonly":false,"required":false,"title_translated":"Group Number","documentation_translated":"The group separator character count indicates how many digits are grouped together before a separator is used. The most common grouping is by thousands (3 characters), but some regions or systems allow for customization, such as grouping by ten thousand (4 characters). Three characters grouping (1,000 or 1.000): This is widely used globally. Four characters grouping (10,000 or 10.000): This is less common but can be found in certain East Asian countries."},{"name":"min","title":"M\u00ednimo","type":"number","documentation":"","readonly":false,"required":false,"title_translated":"Minimum","documentation_translated":""},{"name":"max","title":"M\u00e1ximo","type":"number","documentation":"","readonly":false,"required":false,"title_translated":"Maximum","documentation_translated":""}],"implementation":{"html":"<div class=\"number-input-form-element\">\r\n    <label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)}<\/label>\r\n    <input element=\"input\" \r\n        type=\"text\" \r\n        class=\"form-element field input number\" \r\n        name=\"{this.name}\" \r\n        value=\"{ this.formattedValue }\" \r\n        spellcheck=\"false\" \r\n        readonly=\"{this.readonly}\"\r\n        (blur)=\"this.onBlur(node,event)\"\r\n        (select)=\"this.correctSelection(node.value,node)\"\r\n        (click)=\"this.correctSelection(node.value,node)\"\r\n        (mousedown)=\"this.correctSelection(node.value,node)\"\r\n        (keyup)=\"this.correctSelection(node.value,node)\"\r\n        (focus)=\"this.correctSelection(node.value,node)\"\r\n        (input)=\"this.valueToDisplayValue(node.value,node,false);  this.onChange(event, node.value)\"\r\n        (keydown)=\"this.handleKeypress(node,node.value,event)\"\r\n        (keypress)=\"this.correctSelection(node.value,node)\"\/>\r\n   <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\r\n<\/div>","css":".number-input-form-element { \n    margin-top: 16px;\n    margin-bottom: 16px;\n} \n\n.number-input-form-element input {\n    width: auto;\n    border: 1.6px solid black;\n    height: auto;\n    border-radius: 8px;\n    padding-left: 16px;\n    padding-right: 10px;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    outline: 0;\n    cursor: pointer;    \n    background: #f3f3f3;\n    font-size: inherit;\n    font-family: inherit;\n}\n\n.number-input-form-element  input[readonly] {\n\tcolor: #777;\n}\n\n.number-input-form-element input:focus {\n    border-color: #4682e2;\n}\n\n.number-input-form-element label {\n    display: block;\n    margin-bottom: 4px;\n}","javascript":"\/* VERSION: 1.1.13 *\/ \r\nclass NumberInputCmp extends RCBaseFormElement {\r\n    setup() {\r\n        this.decimal_separator = translate('number_format_decimal_separator').length == 1 ? translate('number_format_decimal_separator') : '.';\r\n        this.group_separator = translate('number_format_group_separator').length == 1 ? translate('number_format_group_separator') : '\u2009';\r\n        this.group_separator_characters_count = 3;\r\n        this.suffixSeparator = ' ';\r\n    }\r\n\r\n    getValueFromFormattedInput(inputValue) {\r\n        if (inputValue == null) {\r\n            return '';\r\n        }\r\n        let inputValueStr = `${inputValue}`;\r\n        let decimal_separator = this.decimal_separator;\r\n        let regex = new RegExp(`[\\\\d\\\\${decimal_separator}]+`, 'g');\r\n        let matches = inputValueStr.match(regex);\r\n        let joined = matches ? matches.join('') : '';\r\n        let convertedValue = joined.replace(this.decimal_separator, '.')\r\n        \/\/let matches = inputValueStr.match(\/[\\d\\.]+\/g);\r\n        return convertedValue;\r\n    }\r\n    handleKeypress(input, inputValue, event) {\r\n        if (event.keyCode == 13) {\r\n            this.valueToDisplayValue(inputValue, input, false, true);\r\n        } else {\r\n            this.correctSelection(inputValue, input);\r\n            if (event.keyCode == 8) {\r\n                if (inputValue.charAt(input.selectionStart - 1) == this.group_separator) {\r\n                    input.selectionStart = input.selectionStart - 1;\r\n                    input.selectionEnd = input.selectionEnd - 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onBlur(node, event) {\r\n        this.valueToDisplayValue(node.value, node, true, false);\r\n        this.onChange(event, node.value);\r\n        this.isValid()\r\n    }\r\n    updateValueDisplay(inputString, input = null, keepSelection = true) {\r\n        const inputValue = String(inputString);\r\n        const selectionStart = (input != null) ? input.selectionStart : 0;\r\n        const selectionEnd = (input != null) ? input.selectionEnd : 0;\r\n\r\n        let newSelectionStart = 0;\r\n        let newSelectionEnd = 0;\r\n        let processedValue = '';\r\n        let processedNumber = 0;\r\n        let integerPart = inputValue.indexOf(this.decimal_separator) === -1 ? true : false;\r\n\r\n        for (let i = inputValue.length - 1; i >= 0; i--) {\r\n            const charAtIndex = inputValue.charAt(i);\r\n            if (charAtIndex === this.decimal_separator) {\r\n                processedNumber = -1;\r\n                integerPart = true;\r\n            }\r\n            const shouldBeSeparator = integerPart && (((processedNumber % this.group_separator_characters_count) === 0) && processedNumber > 0);\r\n            const isSeparator = (charAtIndex === this.group_separator) ||\r\n                (Number(charAtIndex).toString() === 'NaN') ||\r\n                (charAtIndex === this.decimal_separator);\r\n            const isSelectionStart = (i === selectionStart);\r\n            const isSelectionEnd = (i === selectionEnd);\r\n\r\n            if (shouldBeSeparator && !processedValue.startsWith(this.group_separator)) {\r\n                processedValue = this.group_separator + processedValue;\r\n                newSelectionStart++;\r\n                newSelectionEnd++;\r\n            }\r\n            let decimal_separator = this.decimal_separator;\r\n            let regex = new RegExp(`[\\\\d\\\\${decimal_separator}]`, 'g');\r\n\r\n            if (charAtIndex.match(regex)) {\r\n                processedValue = charAtIndex + processedValue;\r\n                newSelectionStart++;\r\n                newSelectionEnd++;\r\n                processedNumber++;\r\n            }\r\n\r\n            if (isSelectionStart) {\r\n                newSelectionStart = 0;\r\n            }\r\n            if (isSelectionEnd) {\r\n                newSelectionEnd = 0;\r\n            }\r\n        }\r\n\r\n        if (input != null) {\r\n            if (keepSelection) {\r\n                input.value = processedValue;\r\n                input.selectionStart = newSelectionStart;\r\n                input.selectionEnd = newSelectionEnd;\r\n            }\r\n        }\r\n        return processedValue;\r\n    }\r\n    checkAndCorrectFractonSize(value) {\r\n        if (this.decimal_places !== null && (this.decimal_places === null || this.decimal_places === 0 || value.endsWith(this.decimal_separator))) {\r\n            return Math.round(value) + '';\r\n        } else {\r\n            return (value * 1).toFixed(this.decimal_places * 1).replace('.', this.decimal_separator);\r\n        }\r\n    }\r\n    correctSelection(value, input = null) {\r\n\r\n        if (input == null) {\r\n            return;\r\n        }\r\n        let suffix = this.getSuffix();\r\n        if (value.endsWith(suffix)) {\r\n            let maxSelectionEnd = value.length - suffix.length;\r\n            if (input.selectionEnd > maxSelectionEnd) {\r\n                input.selectionEnd = maxSelectionEnd;\r\n            }\r\n        } else {\r\n            this.valueToDisplayValue(input.value, input, true, false);\r\n        }\r\n    }\r\n    valueToDisplayValue(value, input = null, checkRange = false, keepSelection = true) {\r\n        let valueToDisplay = String(value);\r\n        let rawValue = this.getValueFromFormattedInput(valueToDisplay);\r\n        if (this.max != undefined && rawValue != '' && rawValue > this.max) {\r\n            rawValue = this.max + ''\r\n            valueToDisplay = this.checkAndCorrectFractonSize(rawValue);\r\n        }\r\n        if (checkRange) {\r\n            if (!this.isNumberInRange(rawValue)) {\r\n                rawValue = this.getNumberInRange(rawValue) + '';\r\n            }\r\n            valueToDisplay = this.checkAndCorrectFractonSize(rawValue);\r\n        }\r\n\r\n        if (keepSelection) {\r\n            this.correctSelection(valueToDisplay, input);\r\n        }\r\n\r\n        let newValue = this.updateValueDisplay(valueToDisplay, input, keepSelection)\r\n        let suffix = this.getSuffix();\r\n        if (input != null) {\r\n            let keepSelectionStart = input.selectionStart;\r\n            let keepSelectionEnd = input.selectionEnd;\r\n            if (input.value !== newValue + suffix) {\r\n                input.value = newValue + suffix;\r\n            }\r\n            if (keepSelection) {\r\n                input.selectionStart = keepSelectionStart;\r\n                input.selectionEnd = keepSelectionEnd;\r\n            }\r\n        }\r\n\r\n        return newValue + suffix;\r\n    }\r\n    getSuffix() {\r\n        if (this.suffix && this.suffix != '') {\r\n            if (window.Translation != undefined && Translation.translations[this.value + '_' + this.suffix] != undefined) { \/\/ special suffix for singular, dual, plural, etc. 1_tons = Tonne\r\n                return this.suffixSeparator + translate(this.value + '_' + this.suffix);\r\n            }\r\n\r\n            return this.suffixSeparator + translate(this.suffix);\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    onChange(e, value) {\r\n\r\n        this._value = this.getValueFromFormattedInput(value).replace(this.decimal_separator, '.');\r\n        \r\n        this.fire('change', this._value);\r\n    }\r\n    set label(l) {\r\n        this._label = l\r\n        this.update('this.label')\r\n    }\r\n    get label() {\r\n        return this._label\r\n    }\r\n    set suffix(s) {\r\n        this._suffix = s\r\n        this.update('this.suffix')\r\n        this.update('this.getSuffix')\r\n        if (this._value) {\r\n            this.formattedValue = this.valueToDisplayValue(this._value);\r\n            this.update('this.formattedValue')\r\n        }\r\n    }\r\n    get suffix() {\r\n        return this._suffix\r\n    }\r\n    set value(value) {\r\n        this.formattedValue = ''\r\n        if (value == undefined) {\r\n            value = '';\r\n        } else if (typeof value === 'number') {\r\n            value = value + ''\r\n        }\r\n        this._value = value.replace('.', this.decimal_separator)\r\n        this.formattedValue = this.valueToDisplayValue(this._value, this.input, true, false);\r\n        this.update('this.formattedValue')\r\n    }\r\n    get value() {\r\n        if  (typeof this._value == 'string' && this._value != '') {\r\n            return this._value.replace(this.decimal_separator, '.')\r\n        } else if (this._value) {\r\n            return this._value\r\n        } else {\r\n            if (this._min) {\r\n                return this._min\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n    set decimal_places(f) {\r\n        if (f) {\r\n            this._decimal_places = f\r\n            this.formattedValue = this.valueToDisplayValue(this._value, this.input, true);\r\n            this.update('this.formattedValue')\r\n        }\r\n    }\r\n    get decimal_places() {\r\n        return this._decimal_places\r\n    }\r\n    set group_separator(f) {\r\n        if (f) {\r\n            this._group_separator = f\r\n            this.formattedValue = this.valueToDisplayValue(this._value, this.input, true);\r\n            this.update('this.formattedValue')\r\n        }\r\n    }\r\n    get group_separator() {\r\n        return this._group_separator\r\n    }\r\n    set decimal_separator(f) {\r\n        if (f) {\r\n            this._decimal_separator = f\r\n            this.formattedValue = this.valueToDisplayValue(this._value, this.input, true);\r\n            this.update('this.formattedValue')\r\n        }\r\n    }\r\n    get decimal_separator() {\r\n        return this._decimal_separator\r\n    }\r\n    set group_separator_characters_count(c) {\r\n        this._group_separator_characters_count = c\r\n        this.formattedValue = this.valueToDisplayValue(this._value, this.input, true);\r\n        this.update('this.formattedValue')\r\n    }\r\n    get group_separator_characters_count() {\r\n        return this._group_separator_characters_count\r\n    }\r\n    set name(n) {\r\n        this._name = n\r\n        this.update('this.name')\r\n    }\r\n    get name() {\r\n        return this._name\r\n    }\r\n    set min(m) {\r\n        this._min = m * 1\r\n    }\r\n    get min() {\r\n        return this._min\r\n    }\r\n    isNumberInRange(value) {\r\n        if (value != null) {\r\n            value = value * 1\r\n            if (this.min != null) {\r\n                if (value < this.min) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.max != null) {\r\n                if (value > this.max) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getNumberInRange(value) {\r\n\r\n        if (value != null) {\r\n            value = value * 1;\r\n            if (this.min !== null) {\r\n                if (value < this.min) {\r\n                    return this.min;\r\n                }\r\n            }\r\n            if (this.max !== null) {\r\n                if (value > this.max) {\r\n                    return this.max;\r\n                }\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}"},"name":"form.number","title":"Elemento de formulario para n\u00fameros","configuration":{"suffix":""},"type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"base.form.element"}],"extends_resource":null},"form.addresource":{"id":22,"parameters":[{"name":"name","title":"Nombre","type":"string","documentation":"El nombre del recurso se utiliza para identificar el componente. Para las etiquetas, el nombre es tambi\u00e9n el nombre de la etiqueta <mytag> (o [mytag] para los shortcodes de WordPress). Al crear una tabla de base de datos, el nombre es el nombre de la tabla. Utilice s\u00f3lo letras min\u00fasculas y n\u00fameros, y subrayados. (a-z, -, _, 0-9).","required":true,"readonly":false,"title_translated":"Name","documentation_translated":"The name of the resource is used to identify the component. For tags, the name is also the name of the tag <mytag> (or [mytag] for WordPress shortcodes). When creating a database-table, the name is the name of the table. Use only small letters and numbers, and underlines. (a-z, -, _, 0-9).","options":null},{"name":"title","title":"T\u00edtulo","type":"translated_string","documentation":"T\u00edtulo del nuevo recurso, que se mostrar\u00e1 como identificador principal en la interfaz de usuario. El T\u00edtulo debe ser una breve descripci\u00f3n de lo que hace el componente. Puede contener espacios y debe empezar por may\u00fascula.","required":true,"readonly":false,"options":{"unique":true,"translation_category":"resource"},"title_translated":"Title","documentation_translated":"The Title of the new resource, to be displayed as a main identifier in the user interface. The Title should be a short description, what the component does. It can contain spaces and should start with a capital letter."},{"name":"type","title":"tipolog\u00eda","type":"db_row","documentation":"Elija el tipo de recurso que desea crear. El tipo m\u00e1s com\u00fan es etiqueta, lo que significa que es una etiqueta que se puede utilizar en otras etiquetas como una etiqueta HTML. ","required":false,"options":{"options":[{"name":"Object","value":"object"},{"name":"Tag","value":"tag"},{"name":"Webservice","value":"webservice"},{"name":"Function","value":"function"}],"dbtable":"resource_type","titlefield":"title","idfield":"name","translate_options":true},"title_translated":"Type","documentation_translated":"Choose the type of resource you want to create. The most common type is tag, which means it is a tag that can be used in other tags like an HTML tag. ","readonly":false},{"name":"project_id","title":"Proyecto","type":"db_row","documentation":"Seleccione el proyecto...","required":false,"options":{"label":"Project","dbtable":"project","titlefield":"title","idfield":"id","serverdb":true},"readonly":false,"title_translated":"Project","documentation_translated":"Select the project..."}],"implementation":[],"name":"form.addresource","title":"A\u00f1adir formulario de recursos","type":"object","dependencies":[],"extends_resource":null},"loader":{"id":276,"parameters":null,"implementation":{"html":"<div class=\"loader-frame\">\n\t<div class=\"loading\">\n\t<div class=\"loading-bar\"><\/div>\n\t<div class=\"loading-bar\"><\/div>\n\t<div class=\"loading-bar\"><\/div>\n\t<div class=\"loading-bar\"><\/div>\n\t<\/div>\n<\/div>","css":".loader-frame {\n\theight: 200px;\n\tposition: relative;\n}\n\n.loading {\n\tposition: absolute;\n    top: 50%;\n    left: 50%;\n    margin-left: -25px;\n    margin-top: -10px;\n    width: 50px;\n}\n.loading-bar {\n  display: inline-block;\n  width: 4px;\n  height: 18px;\n  border-radius: 4px;\n  animation: loading 1s ease-in-out infinite;\n  margin:4px;\n}\n.loading-bar:nth-child(1) {\n  background-color: #3498db;\n  animation-delay: 0;\n}\n.loading-bar:nth-child(2) {\n  background-color: #c0392b;\n  animation-delay: 0.09s;\n}\n.loading-bar:nth-child(3) {\n  background-color: #f1c40f;\n  animation-delay: .18s;\n}\n.loading-bar:nth-child(4) {\n  background-color: #27ae60;\n  animation-delay: .27s;\n}\n\n@keyframes loading {\n  0% {\n    transform: scale(1);\n  }\n  20% {\n    transform: scale(1, 2.2);\n  }\n  40% {\n    transform: scale(1);\n  }\n}"},"name":"loader","title":"Cargador","type":"tag","extends_resource":null},"editor.welcome":{"id":260,"parameters":[],"implementation":{"html":"<div class=\"editor-welcome\">   \n    <h1>Metayota<\/h1>\n    <div>\n                    <p>\u00a1Bienvenido al Editor de Metayota! \u00a1El Editor Metayota ya est\u00e1 disponible para WordPress! \u00a1Por favor, echa un <a href=\"https:\/\/www.metayota.com\/documentation-wordpress\">vistazo a la documentaci\u00f3n<\/a>!<\/p>\n\n            <h2>Caracter\u00edsticas<\/h2>\n            <p><ul><li><b>Crea tus propias etiquetas y c\u00f3digos cortos<\/b><br\/>Las etiquetas se pueden utilizar tanto en HTML &lt;mitag parametro=\"valor\"&gt; o con c\u00f3digos cortos de WordPress [guestbook].<\/li><li><b>Generador de formularios<\/b><br\/>Con muchos componentes apropiados como men\u00fas desplegables, casillas de verificaci\u00f3n, cajas de radio, etc.<\/li><li><b>Multiling\u00fcismo<\/b><br\/>Crea etiquetas y formularios multiling\u00fces y utiliza las funciones para la traducci\u00f3n autom\u00e1tica con ChatGPT y conexi\u00f3n DeepL<\/li><li><b>Editor de base de datos<\/b><br\/>Crea y edita tus propias tablas de base de datos, tambi\u00e9n con componentes apropiados dependiendo del tipo de datos. Incl. funci\u00f3n de b\u00fasqueda y ordenaci\u00f3n.<\/li><li><b>Control de acceso<\/b><br\/>Determina qui\u00e9n tiene acceso a qu\u00e9 funciones<\/li><\/ul><\/p>\n            <h2>Documentaci\u00f3n<\/h2>\n            <p><ul><li><a href=\"https:\/\/www.metayota.com\/es\/documentation\/\">Documentaci\u00f3n del Editor Metayota<\/a><br\/>La documentaci\u00f3n completa para aprender a crear etiquetas con JavaScript y HTML, c\u00f3mo construir servicios web PHP, etc.<\/li><li><a href=\"https:\/\/www.metayota.com\/es\/documentation-metayota-editor-wordpress-plugin\/\">Documentaci\u00f3n del Plugin de WordPress<\/a><br\/>Una visi\u00f3n general sencilla del plugin de WordPress<\/li><li><a href=\"https:\/\/www.youtube.com\/@metayota\">Video Tutoriales en YouTube<\/a><br\/>Videos con instrucciones<\/li><\/ul><\/p>\n            \n            <\/div>\n<\/div>","css":".editor-welcome ul li {\n    margin-top: 6px;\n    margin-bottom: 6px;\n}","javascript":"class RCEditorWelcome extends Tag {\n\n    init() {\n       \/\/ this.updateServerCount()\n        this.enabled = true\n    }\n\n    set enabled(e) {\n        this._enabled = e\n        this.update('this.enabled')\n    }\n\n    get enabled() {\n        return this._enabled\n    }\n\n    buyFreeServer() {        \n        if (confirm('Should we setup the new server? This process will take about 60 seconds.')) {\n            this.enabled = false\n            let data = {product:8, name: 'Essay edition'}\n            GlobalResource.call('rc.product.buy',data).then( result => {\n                GlobalResource.action('metayota','export_app');\n                if (result.success) {\n                    alert(result.message)\n                    this.fire('success',result.message)\n                    this.enabled = true\n                } \n                if (result.error) {\n                    alert(result.error)\n                    this.enabled = true\n                }\n                this.updateServerCount();\n            }).catch( error => {\n                alert('Thank you for buying one of our products! Your server will be installed and should be ready in about 60 seconds!')\n                window.setTimeout( function() {\n                    this.fire('success', null)\n                }.bind(this), 12000)\n                router$.goto('\/editor\/view\/server')\n            })\n        }\n    }\n}"},"name":"editor.welcome","title":"Bienvenido","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"create-free-webspace"},{"version":"1.0.0","type":"tag","name":"editor.server.login"},{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"php-library","name":"format-text"}],"extends_resource":""},"resource_type":{"id":306,"parameters":[],"implementation":[],"data":[{"id":5,"name":"dbtable","title":"type_dbtable","configuration":"rc.db.table.config","implementation_template":""},{"id":4,"name":"object","title":"type_object","configuration":"","implementation_template":""},{"id":7,"name":"php-library","title":"type_php_library","configuration":"","implementation_template":""},{"id":1,"name":"tag","title":"type_tag","configuration":"","implementation_template":""},{"id":6,"name":"validator","title":"type_validator","configuration":"","implementation_template":""},{"id":2,"name":"webservice","title":"type_webservice","configuration":"","implementation_template":""}],"name":"resource_type","title":"Tipo de recurso (tabla)","type":"dbtable","extends_resource":null},"editor.server.login":{"id":672,"parameters":[],"implementation":{"html":"<div>\n    <h2 if=\"this.servers && this.servers.length > 0\">Con\u00e9ctese a su servidor<\/h2>\n\n    <div for=\"server of this.servers\">\n        <form.button icon=\"server\" enabled=\"{!editor$.currentServer || editor$.currentServer.id != server.id}\" (click)=\"this.chooseServer(server.id)\" label=\"{server.title}\"><\/form.button>\n    <\/div>\n\n    <div if=\"this.servers && this.servers.length == 0\">\n        <div if=\"!this.creating && window.loggedInUser$ && window.loggedInUser$.id != undefined\">\n            <create-free-webspace ><\/create-free-webspace>\n        <\/div>\n        \n        <p if=\"this.creating\">\n            <loader ><\/loader>\n            please_wait_server_created        <\/p>\n    <\/div>\n\n    \n<\/div>","javascript":"class ChooseServer extends Tag {\n    init() {\n        this.reloadList();\n    }\n    reloadList() {\n        resource.action('list').then( servers => {\n            this.setAttribute('servers', servers)\n        })\n    }\n    createFreeServer() {\n        this.setAttribute('creating', true)\n        let formData = {\"product\":1, \"name\":\"website\", time:1,\"location\":\"ams\"};\n        GlobalResource.call('rc.product.buy',formData).then( result => {\n            GlobalResource.action('metayota','export_app');\n            alert('The server has been created')\n            window.location = ('\/editor\/view\/server.admin')\n        });\n    }\n\n    chooseServer(id) {\n        GlobalResource.action('editor','choose_server',{server:id}).then( result => {\n            editor$.updateCurrentServer().then(result=> {\n                this.reloadList()\n                sessionStorage.setItem('recentlyviewed',\"[]\")\n            })\n        })\n    }\n}"},"name":"editor.server.login","title":"Iniciar sesi\u00f3n en el servidor","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"create-free-webspace"}],"extends_resource":null},"create-free-webspace":{"id":850,"parameters":[{"name":"software","title":"Software","type":"options","documentation":null,"readonly":false,"required":false,"options":{"options":[{"name":"METAYOTA PHP engine","value":"metayota"},{"name":"WordPress","value":"wordpress"},{"name":"No preinstalled software","value":"no-preinstall"}]},"title_translated":"Software","documentation_translated":""}],"implementation":{"html":"<div>\n    <h1>Webspace Starter Edition<\/h1>\n    <p>Get the Webspace Starter Edition server with 1 GB storage, PHP and MySQL support for free.<\/p>\n    <p>Choose your preferred software:<\/p>\n    <ul>\n        <li>Metayota PHP Engine<\/li>\n        <li>Wordpress<\/li>\n        <li>No preinstalled software<\/li>\n    <\/ul>\n    <p>\n        It is possible to rename your server, and add a domain in a later step.\n    <\/p>\n    <div if=\"this.creating\">\n        <loader ><\/loader>\n    <\/div>\n    <div if=\"!this.creating\">\n        <form.resource (submit)=\"this.createFreeServer(event.software)\" resourcetype=\"create-free-webspace\" submitlabel=\"Create Free Webspace\"><\/form.resource>\n    <\/div>\n<\/div>","javascript":"class CreateFreeWebspace extends Tag {\n    createFreeServer(software) {\n        this.setAttribute('creating', true)\n        let formData = {\"product\":1, \"name\":\"Your Website\", time:1,\"location\":\"de\",\"software\":software};\n        GlobalResource.call('rc.product.buy',formData).then( result => {\n            GlobalResource.action('metayota','export_app');\n            alert('The server has been created')\n            toast$.show('The Free Edition Webspace has been created sucessfully!', true, '\/editor\/view\/server.admin', 'Server Admin')\n            this.setAttribute('creating', false)\n        });\n    }\n}"},"name":"create-free-webspace","title":"Crear espacio web gratuito","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.resource"},{"version":"1.0.0","type":"tag","name":"loader"}],"extends_resource":null},"user_obj":{"id":799,"parameters":[{"name":"username","type":"string","documentation":"El nombre de usuario del usuario. Debe ser \u00fanico.","required":true,"title":"Nombre de usuario","title_translated":"Username","documentation_translated":"The username of the user. It must be unique."},{"name":"company","title":"Nombre de la empresa","type":"string","documentation":"El nombre de la empresa.","title_translated":"Company name","documentation_translated":"The name of the company."},{"name":"firstname","type":"string","documentation":"Nombre del usuario.","title":"Nombre","title_translated":"Firstname","documentation_translated":"Firstname of the user."},{"name":"lastname","type":"string","documentation":"Tu apellido.","title":"Apellido","readonly":false,"required":false,"title_translated":"Lastname","documentation_translated":"Your last name."},{"name":"birthdate","type":"date","documentation":"Tu fecha de nacimiento.","required":null,"title":"Fecha de nacimiento","title_translated":"Birthdate","documentation_translated":"Your date of birth."},{"name":"email","title":"Correo electr\u00f3nico","type":"string","documentation":"Su direcci\u00f3n de correo (no utilice ninguna direcci\u00f3n de spam, sino su direcci\u00f3n de correo electr\u00f3nico que consulte con m\u00e1s frecuencia).","required":false,"readonly":true,"title_translated":"Mail Address","documentation_translated":"Your Mail Address (do not use any spam address, but your email address you check most often)."}],"implementation":{"javascript":"class JJUser {\n    get fullname() {\n        return this.firstname + ' ' + this.lastname\n    }\n    logout() {\n        Resource.action('login','logout').then(\n            x => { \n               Tag.publish('loggedInUser$', {})\n        })\n    }\n    static getLoggedInUser() {\n        return JJUser.loggedInUser\n    }\n    static initialize() {\n        JJUser.updateLoggedInUser();\n    }\n    static updateLoggedInUser() {\n\t\twindow.loggedInUser$ = {}\n        let loggedInUser = this.getLoggedInUser()\n        if (!loggedInUser) {\n\t\t\twindow.loggedInUser$ = {}\n            let loggedInUserSession = sessionStorage.loggedInUser\n            if (loggedInUserSession) {\n                let loggedInUserParsed = JSON.parse(loggedInUserSession)\n                let loggedInUser = new JJUser()\n                JJUser.loggedInUser = Object.assign( loggedInUser, loggedInUserParsed )\n                Tag.publish('loggedInUser$',JJUser.loggedInUser)\n                if (window.editor$) {\n                    window.editor$.update('this.getRCMenuName')\n                }\n            }\n        } \n\n        Tag.call('user_obj').then( user => {\n            let loggedInUser = new JJUser();\n            Object.assign(loggedInUser,user)\n            sessionStorage.loggedInUser = JSON.stringify( Object.assign({},loggedInUser))\n            Tag.publish('loggedInUser$',loggedInUser)\n            if (window.editor$) {\n                window.editor$.update('this.getRCMenuName')\n            }\n        });\n    }\n}"},"name":"user_obj","title":"Usuario","type":"object","extends_resource":null},"paginator":{"id":1040,"parameters":[{"name":"number_of_pages","title":"N\u00famero de p\u00e1ginas","type":"number","documentation":"","options":{"suffix":"pages"},"readonly":false,"required":false,"title_translated":"Number of Pages","documentation_translated":""},{"name":"page","title":"P\u00e1gina actual","type":"number","documentation":"","readonly":false,"required":false,"title_translated":"Current Page","documentation_translated":""}],"implementation":{"html":"<div class=\"paginator\" if=\"this.pages && this.pages.length > 1\">\n    <div class=\"pages\" for=\"page of this.pages\">\n        <a class=\"{page.number == this.page ? 'current-page' : ''}\" (click)=\"this.pageChanged(page.number)\">{page.text}<\/a>\n    <\/div>\n<\/div>","css":"\n\n.paginator > div {\n    display: flex;\n    gap: 16px;\n}\n\n.paginator a, .paginator a:hover, .paginator a:active, .paginator a:visited {\n    min-width: 30px;\n    height: 30px;\n    text-align: center;\n    background: #cfcfcf;\n    border:1px solid #aaa;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 3px;\n    cursor: pointer;\n    user-select: none;\n    text-decoration: none;\n}\n\n.paginator a:active {\n\n}\n\n.paginator a.current-page {\n    background: rgb(0 162 237);\n    color: white;\n    border: 1px solid rgb(0 133 194);\n}","javascript":"class Paginator extends Tag {\n    setup() {\n        this._page = 1\n    }\n    set number_of_pages(i) {\n        this._number_of_pages = i\n        this.updatePages()\n    }\n    get number_of_pages() {\n        return this._number_of_pages\n    }\n    set page(i) {\n        this._page = i\n        this.updatePages()\n    }\n    get page() {\n        return this._page\n    }\n    pageChanged(p) {\n        this.page = p\n        this.fire('change', p)\n    }\n    updatePages() {\n        let pages = [];\n        const currentPage = this.page; \/\/ Assume _current_page is a 1-based index\n        const totalPages = this._number_of_pages;\n\n        let startPage = 1;\n        let endPage = totalPages;\n\n        if (totalPages > 14) {\n            \/\/ If the current page is among the first 12 pages\n            if (currentPage <= 12) {\n                endPage = 12;\n            }\n            \/\/ If the current page is among the last 12 pages\n            else if (currentPage >= totalPages - 11) {\n                startPage = totalPages - 11;\n            }\n            \/\/ If the current page is somewhere in the middle\n            else {\n                startPage = currentPage - 6;\n                endPage = currentPage + 6;\n            }\n        }\n\n        \/\/ First page\n        pages.push({ number: 1, text: '1' });\n\n        if (startPage > 2) {\n            \/\/ \"...\" after the first page, to represent hidden preceding pages\n            pages.push({ number: startPage - 1, text: '...' });\n        }\n\n        \/\/ Middle pages\n        for (let i = Math.max(2, startPage); i <= Math.min(endPage, totalPages - 1); i++) {\n            pages.push({ number: i, text: i.toString() });\n        }\n\n        if (endPage < totalPages - 1) {\n            \/\/ \"...\" before the last page, to represent hidden succeeding pages\n            pages.push({ number: endPage + 1, text: '...' });\n        }\n\n        \/\/ Last page\n        if (totalPages > 1) {\n            pages.push({ number: totalPages, text: totalPages.toString() });\n        }\n\n        this.setAttribute('pages', pages);\n    }\n\n}"},"name":"paginator","title":"Paginador","type":"tag","extends_resource":null},"form.options.dbrow":{"id":1070,"parameters":[{"name":"serverdb","title":"Servidor DB","type":"boolean","documentation":"Ejecutar en la base de datos del servidor (opci\u00f3n para desarrolladores de editores)","readonly":false,"required":false,"title_translated":"Server DB","documentation_translated":"Execute on the server db (option for editor developers)"},{"name":"label","title":"Etiqueta","type":"string","documentation":null,"required":null,"title_translated":"Label","documentation_translated":""},{"name":"dbtable","title":"Tabla DB","type":"string","documentation":"La tabla de la base de datos de la que elegir una fila.","title_translated":"DB Table","documentation_translated":"The database table to choose a row from."},{"name":"titlefield","title":"Campo T\u00edtulo","type":"string","documentation":"El campo que es el t\u00edtulo, nombre o descripci\u00f3n de la fila.","title_translated":"Title Field","documentation_translated":"The field which is the title, name or description of the row."},{"name":"idfield","title":"Campo ID","type":"string","documentation":"El campo que es el identificador, que ser\u00e1 devuelto como valor.","title_translated":"ID Field","documentation_translated":"The field which is the identifier, which will be returned as a value."},{"name":"multiselect","title":"Selecci\u00f3n m\u00faltiple","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Multi select","documentation_translated":""},{"name":"translate_options","title":"Traducir las opciones","type":"boolean","documentation":null,"readonly":false,"required":false,"title_translated":"Translate the options","documentation_translated":""}],"implementation":{"html":"<div>\n    <dropdown translate_options=\"{this.translate_options}\" multiple=\"{this.multiselect}\" (change)=\"this.changed(event)\" label=\"{this.label}\" options=\"{this.options}\" value=\"{this.value}\"><\/dropdown>\n<\/div>","javascript":"class DBRowOptions extends RCBaseFormElement {\n\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n    }\n\n    get value() {\n        return this._value\n    }\n\n    changed(value) {\n        this.value = value\n        this.fire('change',value)\n    }\n\n    set dbtable(t) {\n        this._dbtable = t\n    }\n\n    get dbtable() {\n        return this._dbtable\n    }\n\n    set titlefield(t) {\n        this._titlefield = t\n    }\n\n    get titlefield() {\n        return this._titlefield\n    }\n\n    set idfield(i) {\n        this._idfield = i\n    }\n\n    get idfield() {\n        return this._idfield\n    }\n\n    init() {\n        this.fetchOptions()\n    }\n\n    fetchOptions() {\n        if (!this.idfield || !this.titlefield || !this.dbtable) {\n            return\n        }\n        \/\/ Tag.callJson('db.fetchall',{table:this.dbtable, fields:[this.idfield,this.titlefield],serverdb:this.serverdb})\n        let translate_columns = this.translate_options ?  [this.titlefield] : []\n\n        GlobalResource.call('db.fetchall', {table:this.dbtable, fields:[this.idfield,this.titlefield],serverdb:this.serverdb,translate_columns}, true).then( options => {\n            this.options = options.map( v => {\n                let translatedProperty = this.titlefield + '_translated'\n                let displayValue = v[translatedProperty] != undefined ? v[translatedProperty] : v[this.titlefield]\n                return {value: v[this.idfield], name: displayValue}\n            })\n            this.update('this.options')\n        })\n    }\n}"},"name":"form.options.dbrow","title":"Opciones (fila DB)","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"dropdown"},{"version":"1.0.0","type":"tag","name":"base.form.element"}],"extends_resource":null},"rc.editor.tab.create":{"id":198,"parameters":[{"name":"technology","title":"Seleccione una tecnolog\u00eda","type":"radio","documentation":"","required":false,"options":{"options":[{"name":"HTML","value":"html"},{"value":"javascript","name":"JavaScript"},{"name":"PHP","value":"php"},{"name":"CSS","value":"css"},{"value":"html.php","name":"HTML Y PHP"}]},"readonly":false,"title_translated":"Select a Technology","documentation_translated":""},{"name":"custom","title":"Nombre de archivo personalizado","type":"string","documentation":"","required":false,"title_translated":"Custom File Name","documentation_translated":"","readonly":false}],"implementation":[],"name":"rc.editor.tab.create","title":"Ficha Crear","type":"object","extends_resource":null},"add.validator":{"id":321,"parameters":[],"implementation":{"html":"<div>    \n    <h1>A\u00f1adir validador...<\/h1>\n    <form.tagtype element=\"tagtypename\" value=\"{this.name}\" typefilter=\"validator\" (change)=\"this.tagTypeChanged(event)\"><\/form.tagtype>\n    <form.resource  submitlabel=\"A\u00f1adir validador...\" (submit)=\"this.submit(event)\" resourcetype=\"{this.name}\" value=\"{this.options}\" (change)=\"this._options = event\" element=\"validatorOptions\"><\/form.resource>\n<\/div>","javascript":"class AddValidator extends Tag {\n    tagTypeChanged(tagtype) {\n        if (this.validatorOptions) {\n            this.validatorOptions.resourcetype = tagtype\n        }\n\t\tthis.tagtype = tagtype\n    }\n\n    set name(n) {\n        this._name = n\n        this.tagTypeChanged(n)\n        this.update('this.name')\n    }\n\n    get name() {\n        return this._name\n    }\n\n    set options(o) {\n        this._options = o\n        this.update('this.options')\n    }\n    get options() {\n        return this._options\n    }\n    submit(event) {\n        this.fire('submit',{name:this.tagtypename.value, options:event})\n    }\n}"},"name":"add.validator","title":"A\u00f1adir validador...","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.tagtype"},{"version":"1.0.0","type":"tag","name":"title"},{"version":"1.0.0","type":"tag","name":"form.resource"}],"extends_resource":null},"namevalue":{"id":166,"parameters":[{"name":"name","title":"Nombre","type":"translated_string","documentation":"","required":false,"title_translated":"Name","documentation_translated":"","readonly":false},{"name":"value","title":"Valor","type":"string","title_translated":"Value","documentation_translated":""}],"implementation":[],"name":"namevalue","title":"Par nombre-valor","type":"object","extends_resource":null},"view.text":{"id":623,"parameters":[],"implementation":{"html":"<div class=\"view-text\">\n    <label if=\"this.label !== undefined\" class=\"form-label\">{this.label}<\/label>\n    <div class=\"view-text-value\">{this.getDisplayValue()}<\/div>\n<\/div>","css":".view-text label {\n    font-weight: bold;\n}","javascript":"class ViewText extends Tag {\n    setup() {\n        this.defaulttext = ''\n    }\n    getDisplayValue() {\n        return this.value ? this.value : this.defaulttext;\n    }\n}"},"name":"view.text","title":"Ver texto","type":"tag","extends_resource":null},"view.bool":{"id":870,"parameters":[],"implementation":{"html":"<div class=\"view-text\">\n    <label if=\"this.label !== undefined\" class=\"form-label\">{this.label}<\/label>\n    <div class=\"view-text-value\">{this.value ? '\u2713' : '\u2717'}<\/div>\n<\/div>"},"name":"view.bool","title":"Ver Booleano","type":"tag","extends_resource":null},"view.date":{"id":871,"parameters":[],"implementation":{"html":"<span>{this.formatted}<\/span>","javascript":"class ViewDate extends Tag {\n\n    set value(v) {\n        this._value = v\n        this.update('this.value')\n        const jsDate = new Date(v);\n        const options = { year: 'numeric', month: 'long', day: 'numeric' };\n        let localeCode = translate('language_code_long')\n        if (localeCode == undefined) {\n            console.error('Metayota ViewDate Component - Please add the translation *language_code_long* like de-DE and make it accessible to JavaScript')\n        } else {\n            localeCode = 'en-US'\n        }\n        \n        this.formatted = jsDate.toLocaleDateString(localeCode,options);\n        this.update('this.formatted');\n    }\n    get value() {\n        this._value\n    }\n}"},"name":"view.date","title":"Ver fecha","type":"tag","extends_resource":null},"view.file":{"id":1027,"parameters":[],"implementation":{"html":"<span class=\"view-file\">\n    <img if=\"this.value && (this.value.endsWith('jpg') || this.value.endsWith('png') || this.value.endsWith('webp') || this.value.endsWith('jpeg'))\" src=\"{this.value}\"\/><br\/>\n    <a target=\"_blank\" href=\"{this.value}\">{this.value}<\/a>\n<\/span>","css":".view-file img {\n    max-width:120px;\n    max-height:120px;\n}"},"name":"view.file","title":"Ver archivo","type":"tag","extends_resource":null},"view.number":{"id":873,"parameters":[{"name":"value","title":"Valor","type":"number","documentation":null,"readonly":false,"required":false,"title_translated":"Value","documentation_translated":""},{"name":"suffix","title":"Sufijo","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Suffix","documentation_translated":""}],"implementation":{"html":"<span>{this.formattedValue}<\/span>","javascript":"class ViewNumber extends Tag {\n    setup() {\n        this.decimal_separator = translate('number_format_decimal_separator').length == 1 ? translate('number_format_decimal_separator') : '.';\n        this.group_separator = translate('number_format_group_separator').length == 1 ? translate('number_format_group_separator') : '\u2009';\n        this.group_separator_characters_count = 3;\n        this.suffixSeparator = ' ';\n    }\n    getSuffix() {\n        if (this.suffix && this.suffix != '') {\n            return this.suffixSeparator + this.suffix;\n        } else {\n            return '';\n        }\n    }\n    set value(v) {\n        if (v == undefined) {\n            v = ''\n        }\n        this._value = v\n        this.update('this.value')\n        let formattedValue = this.valueToDisplayValue(v)\n        this.setAttribute('formattedValue',formattedValue)\n    }\n    get value() {\n        return this._value\n    }\n    set suffix(v) {\n        this._suffix = v\n        this.update('this.suffix')\n        let formattedValue = this.valueToDisplayValue(v)\n        this.setAttribute('formattedValue',formattedValue)\n    }\n    get suffix() {\n        return this._suffix\n    }\n updateValueDisplay(inputString, input = null, keepSelection = true) {\n        const inputValue = String(inputString);\n\n        \n        \n        let processedValue = '';\n        let processedNumber = 0;\n        let integerPart = inputValue.indexOf(this.decimal_separator) === -1 ? true : false;\n\n        for (let i = inputValue.length - 1; i >= 0; i--) {\n            const charAtIndex = inputValue.charAt(i);\n            if (charAtIndex === this.decimal_separator) {\n                processedNumber = -1;\n                integerPart = true;\n            }\n            const shouldBeSeparator = integerPart && (((processedNumber % this.group_separator_characters_count) === 0) && processedNumber > 0);\n\n            if (shouldBeSeparator && !processedValue.startsWith(this.group_separator)) {\n                processedValue = this.group_separator + processedValue;\n            }\n            let decimal_separator = this.decimal_separator;\n            let regex = new RegExp(`[\\\\d\\\\${decimal_separator}]`, 'g');\n\n            if (charAtIndex.match(regex)) {\n                processedValue = charAtIndex + processedValue;\n                processedNumber++;\n            }\n\n        }\n\n        return processedValue;\n    }\n    valueToDisplayValue(value) {\n        if (!this.isNumberInRange(value)) {\n            value = this.getNumberInRange(value) + '';\n        }\n        let valueToDisplay = String(value);\n\n\n        valueToDisplay = this.checkAndCorrectFractonSize(valueToDisplay);\n\n        let newValue = this.updateValueDisplay(valueToDisplay)\n        let suffix = this.getSuffix();\n        \n\n        return newValue + suffix;\n    }\n    \n    checkAndCorrectFractonSize(value) {\n        if (this.decimal_places !== null && (this.decimal_places === null || this.decimal_places === 0 || value.endsWith(this.decimal_separator))) {\n            return Math.round(value) + '';\n        } else {\n            return (value * 1).toFixed(this.decimal_places * 1).replace('.', this.decimal_separator);\n        }\n    }\n     isNumberInRange(value) {\n        if (value !== null) {\n            if (this.min !== null) {\n                if (value < this.min) {\n                    return false;\n                }\n            }\n            if (this.max !== null) {\n                if (value > this.max) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    getNumberInRange(value) {\n        if (value !== null) {\n            if (this.min !== null) {\n                if (value < this.min) {\n                    return this.min;\n                }\n            }\n            if (this.max !== null) {\n                if (value > this.max) {\n                    return this.max;\n                }\n            }\n        }\n\n        return value;\n    }\n}"},"name":"view.number","title":"Ver n\u00famero","type":"tag","extends_resource":null},"view.options":{"id":874,"parameters":[],"implementation":{"html":"<span>{this.displayValue}<\/span>","javascript":"class ViewOption extends Tag {\n    set value(v) {\n        this._value = v \n        let option = this.options.find( o => o.value == v)\n        if (option) {\n            this.setAttribute('displayValue',option.name)\n        }\n    }\n    get value() {\n        return this._value\n    }\n}"},"name":"view.options","title":"Ver opciones","type":"tag","extends_resource":null},"view.translated.text":{"id":984,"parameters":[],"implementation":{"html":"<div class=\"view-text\">\n    <label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)}<\/label>\n    <div class=\"view-text-value\">{this.value_translated ? this.value_translated : translate(this.value)}<\/div>\n<\/div>","javascript":"class ViewTransaltedText extends Tag {\n    set value(v) {\n        if (v != this._value) {\n            this._value = v\n        }\n    }\n\n    get value() {\n        return this._value\n    }\n\n    getTranslatedValue() {\n        \n    }\n}"},"name":"view.translated.text","title":"Ver texto traducido","type":"tag","extends_resource":null},"check.dependencies":{"id":862,"parameters":[{"name":"resource","title":"Recursos","type":"tagtype","documentation":null,"readonly":false,"required":false,"title_translated":"Resource","documentation_translated":""}],"implementation":{"html":"<h1>A\u00f1adir las dependencias que faltan<\/h1>\n<p>\n    Las siguientes dependencias se incorporar\u00e1n a la vista de dependencias para una mejor gesti\u00f3n del proyecto y una integraci\u00f3n perfecta.<\/p>\n<ul class=\"dependencies-list\" for=\"dependency of this.dependencies\">\n    <li><form.checkbox (change)=\"this.checking[dependency] = event\" value=\"{true}\" label=\"{dependency}\"><\/form.checkbox><\/li>\n<\/ul>\n    \n<form.button (click)=\"this.submit()\" label=\"A\u00f1adir a Dependencias\"><\/form.button>","css":".dependencies-list {\n    list-style-type: none;\n    padding-left: 0px;\n}","javascript":"class CheckDependencies extends Tag {\n    init() {\n        this.resource = router$.params.subpage;\n        this.dependencies = []\n        this.checking = {}\n        resource.call({resource:this.resource}).then(result=> {\n            this.setAttribute('dependencies', result);\n            for (let i = 0 ; i < result.length ; i++) {\n                this.checking[result[i]] = true;\n            }\n        })\n    }\n\n    submit() {\n        let keys = Object.keys(this.checking)\n        let resources = []\n        for( let keyNr in keys) {\n            let key = keys[keyNr]\n            if (this.checking[key]) {\n                resources.push(key)\n            }\n        }\n        resource.action('add_dependencies',{'resource':this.resource,'dependencies':resources}).then(result=> {\n            router$.goto('\/editor\/resource\/'+this.resource+'\/vscode')\n        })\n        \n    }\n}"},"name":"check.dependencies","title":"Comprobar dependencias","type":"tag","dependencies":[{"version":"1.0.0","name":"form.button","type":"tag"},{"version":"1.0.0","type":"tag","name":"form.checkbox"}],"extends_resource":null},"complete-translations":{"id":1066,"parameters":[],"implementation":{"html":"<h1>Completar y limpiar textos<\/h1>\n<div if=\"this.missing_translations != undefined && this.missing_translations.length > 0\">\n    <div for=\"missing_translation of this.missing_translations\">\n        <div style=\"margin-top:32px;margin-bottom:32px\">\n            <b>{missing_translation.translation_key} ({missing_translation.language_translated})<\/b><br\/>\n            \n            <form.radio (change)=\"this.setCase(missing_translation, event)\" value=\"{missing_translation.case}\" options=\"{missing_translation.cases}\" ><\/form.radio>\n            \n            <div style=\"margin-left:32px\" if=\"missing_translation.case == 'auto_translate'\">\n                <b>{missing_translation.other_language_translated}: <\/b>\n                {missing_translation.other_translation}\n            <\/div>\n            <div style=\"margin-left:32px\" if=\"missing_translation.case == 'import_main_db'\">\n                {missing_translation.translation}\n            <\/div>\n            <div style=\"margin-left:32px\" if=\"missing_translation.case == 'suggest_translation'\">\n                <innerhtml value=\"{ translate('already_translated_other_key',{suggested_translation:missing_translation.suggested_translation, other_language:missing_translation.other_language_translated,other_translation:missing_translation.other_translation,other_translation_key:missing_translation.suggested_translation_key}) }\"><\/innerhtml>\n                \n            <\/div>\n        <\/div>\n    <\/div> \n    <p if=\"this.waiting\">\n        <loader><\/loader>\n        El sistema est\u00e1 traduciendo los elementos seleccionados, \u00a1por favor espere!    <\/p>\n    <form.button enabled=\"{!this.waiting}\" (click)=\"this.performActions()\" label=\"Enviar\"><\/form.button>\n<\/div>\n<div if=\"this.missing_translations != undefined && this.missing_translations.length == 0\">\n    <p>No le faltan traducciones.<\/p>\n<\/div>","javascript":"class CompleteTranslations extends Tag {\n    init() {\n        this.waiting = false\n        this.getMissingTranslations()\n    }\n    getMissingTranslations() {\n        resource.action('missing_translations').then(result=> {\n            let transformedResult = result.map(item => {\n                \n                item.cases = item.cases.map(str => {\n                    return {\n                        name: translate(str),\n                        value: str\n                    };\n                })\n                \n                return item;\n            });\n            this.setAttribute('missing_translations',transformedResult)\n        })\n    }\n    setCase(missing_translation, event) {\n        missing_translation.case = event\n        this.update('this.missing_translations')\n    }\n\n    performActions() {\n        this.setAttribute('waiting',true)\n        resource.action('perform_actions',{'missing_translations':this.missing_translations}).then(result=> {\n            this.setAttribute('missing_translations',[])\n            this.setAttribute('waiting',false)\n            this.getMissingTranslations()\n        })\n    }\n}"},"name":"complete-translations","title":"Completar y limpiar textos","type":"webservice","dependencies":[{"version":"1.0.0","type":"php-library","name":"deepl"},{"version":"1.0.0","type":"php-library","name":"chat-gpt"},{"name":"form.button","type":"tag","version":"1.0.0"},{"version":"1.0.0","type":"tag","name":"form.radio"},{"name":"innerhtml","type":"tag","version":"1.1.0"},{"name":"loader","type":"tag","version":"1.1.0"},{"version":"1.0.0","type":"tag","name":"translate"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"form.file":{"id":991,"parameters":[{"name":"folder","title":"Carpeta","type":"string","documentation":null,"readonly":false,"required":false,"title_translated":"Ordner","documentation_translated":""}],"implementation":{"html":"<div class=\"form-file {this.class}\"> \n\t<label if=\"this.label !== undefined\" class=\"form-label\">{translate(this.label)}<\/label>\n\t<div if=\"!this.uploading\"><form.button (click)=\"this.chooseFile()\" label=\"{this.value ? this.value : this.uploadLabel}\"><\/form.button> <span if=\"this.value != undefined && this.value != ''\"><form.button (click)=\"this.removeFile()\" label=\"{translate('remove_file')}\"><\/form.button><\/span><\/div>\n\t<div if=\"this.uploading\"><progress><\/progress><\/div>\n    <p class=\"error-message\" if=\"!!this.errorMessage\">{this.errorMessage}<\/p>\n<\/div>","css":".form-file {\n    margin-top: 16px;\n    margin-bottom: 16px;\n}\n\n.form-file label {\n    display: block;\n}\n\n.form-file .form-button {\n    margin-top: 4px;\n    margin-bottom: 0px;\n}","javascript":"class FormFile extends RCBaseFormElement {\n\n\tsetup() {\n\t\tthis.uploadLabel = translate('choose_file')\n\t}\n\n\tset uploading(u) {\n\t\tthis._uploading = u\n\t\tthis.update('this.uploading')\n\t}\n\n\tget uploading() {\n\t\treturn this._uploading\n\t}\n\n    removeFile() {\n        this.setAttribute('value','')\n        this.fire('change','')\n    }\n\n    chooseFile() {\n\t\tTag.ready('form.file.helper').then(ready => {\n\t\t\tlet renderedTag = TagModel.renderTag('form.file.helper',{folder:this.folder})\n\t\t\tdocument.body.appendChild(renderedTag.node)\n\t\t\trenderedTag.tag.chooseFile()\n\t\t\trenderedTag.tag.fileTag = this\n\n\t\t\trenderedTag.tag.fileChosen = function(result) {\n\t\t\t\tthis.setAttribute('value', result)\n\t\t\t\tthis.fire('change',this.value)\n\t\t\t}.bind(this)\n\n            renderedTag.tag.errorHappened = function(result) {\n                this.setAttribute('errorMessage',result.message)\n\t\t\t\tthis.setAttribute('value', '')\n                this.setAttribute('uploading', false)\n\t\t\t\tthis.fire('change',this.value)\n\t\t\t}.bind(this)\n\t\t})\n    }\n}"},"name":"form.file","title":"Elemento de formulario de expediente","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"form.button"},{"version":"1.0.0","type":"tag","name":"form.file.helper"}],"extends_resource":null},"form.file.helper":{"id":1021,"parameters":[],"implementation":{"html":"<div class=\"form-file-helper\">\n\t<form target=\"{this.iframeName}\" element=\"form\" method=\"post\" action=\"\/wp-content\/plugins\/metayota\/scripts\/form.file.helper\/form.file.helper.php\" enctype=\"multipart\/form-data\">\n\t\t<input name=\"file\" element=\"file\" type=\"file\" (change)=\"this.fileSelected()\"\/>\n        <input type=\"hidden\" name=\"folder\" value=\"{this.folder}\"\/>\n\t\t<input type=\"hidden\" name=\"iframe\" value=\"{this.iframeName}\"\/>\n\t\t<input type=\"submit\"\/>\n\t<\/form>\n\t<iframe (message)=\"this.uploadComplete(event)\" name=\"{this.iframeName}\"><\/iframe>\n\t<p if=\"!!this.errorMessage\" class=\"error-message\">{this.errorMessage}<\/p>\n<\/div>","css":".form-file-helper {\n    display: none;\n}","javascript":"class FormFileHelper extends Tag {\n\n    setup() {\n        this.iframeName = 'uploadiframe'+Math.random()*10000\n        this.completed = true\n    }\n\n    chooseFile() {\n        this.file.click()\n    }\n\n    render() {\n        window.addEventListener('message',function(e) {\n            if (e.data.iframe == this.iframeName) {\n                if (e.data.message != undefined) {\n                    toast$.show(e.data.message,true)\n                    this.completed = false\n\t\t\t        this.fileTag.uploading = false\n                } else {\n                    this.uploadComplete(e.data.filename)\n                }\n            }\n        }.bind(this))\n    }\n\n    fileSelected() {\n        if (this.fileChosen) {\n            this.fileChosen()\n            this.form.submit()\n            this.completed = false\n\t\t\tthis.fileTag.uploading = true\n        }\n    }\n\n    uploadComplete(event) {\n        this.fileChosen(event)\n        this.filename = event\n        this.completed = true\n\t\tthis.fileTag.uploading = false\n    }\n\n    isValid() {\n        if (!this.completed) {\n            this.setAttribute('errorMessage', 'Please wait for the upload to be completed...')\n        }\n        return this.completed\n    }\n\n    destroy() {\n        alert('gets destroyed')\n        super.destroy()\n    }\n}"},"name":"form.file.helper","title":"Ayuda para archivos de formulario","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"toast"},{"version":"1.0.0","type":"php-library","name":"translation-service"}],"extends_resource":null},"rc.resource.with.parameters":{"id":217,"parameters":[{"name":"resourcetype","title":"Tipo de recurso","type":"tagtype","documentation":"","options":null,"readonly":false,"required":false,"title_translated":"Ressourcentyp","documentation_translated":""},{"name":"display_resource_type","title":"El tipo de recurso puede ser cambiado","type":"boolean","documentation":"","options":null,"readonly":false,"required":false,"title_translated":"Der Ressourcentyp kann ge\u00e4ndert werden","documentation_translated":""},{"name":"label","title":"Etiqueta","type":"translated_string","documentation":"","options":{"unique":true},"readonly":false,"required":false,"title_translated":"Feldbeschriftung","documentation_translated":""},{"name":"typefilter","title":"Recursos Tipo de filtro","type":"db_row","documentation":"Qu\u00e9 tipo de etiquetas deben mostrarse.","options":{"translate_options":true,"serverdb":false,"label":"","dbtable":"resource_type","titlefield":"title","idfield":"name","multiselect":false},"readonly":false,"required":false,"title_translated":"Ressourcen Typenfilter","documentation_translated":"Welche Art von Tags sollten angezeigt werden."}],"implementation":{"html":"<div>\n    <fieldset>\n        <legend>{this.label}<\/legend>\n        <div if=\"!!this.display_resource_type\">\n            <form.tagtype value=\"{this.resourcetype}\" (change)=\"this.resourceTypeChanged(event)\" typefilter=\"{this.typefilter}\"><\/form.tagtype>\n        <\/div>\n        <div if=\"this.resourcetype != undefined\">\n            <form.resource (change)=\"this.resourceOptionsChanged(event)\" resourcetype=\"{this.resourcetype}\" value=\"{this.options}\"><\/form.resource>\n        <\/div>\n    <\/fieldset>\n<\/div>","javascript":"class RCResourceWithParams extends Tag {\n    setup() {\n        resource.action('list_resources').then(result=> {\n            debugger\n            this.setAttribute('resourceTypes',result)\n        })\n    }\n    set resourcetype(t) {\n        this._resourcetype = t\n        this.update('this.resourcetype')\n    }\n    get resourcetype() {\n        return this._resourcetype\n    }\n    set options(o) {\n        this._options = o\n        this.update('this.options')\n    }\n    get options() {\n        return this._options\n    }\n    resourceOptionsChanged(o) {\n        this._options = o\n        this.resourceChanged()\n    }\n    resourceTypeChanged(v) {\n        debugger\n        this.setAttribute('resourcetype',v)\n    }\n    resourceChanged() {\n        this.fire('change',this.value)\n    }\n    set value(v) {\n        if (v && (typeof v == 'string')) {\n            v = JSON.parse(v)\n        }\n        if (v!=undefined) {\n            this.setAttribute('options',v.options)\n            this.setAttribute('resourcetype',v.resourcetype)\n        }\n    }\n    get value() {\n        return {options:this.options, resourcetype:this.resourcetype}\n    }\n}"},"name":"rc.resource.with.parameters","title":"Recurso con par\u00e1metros","type":"tag","dependencies":[{"version":"1.0.0","type":"tag","name":"dropdown"},{"version":"1.0.0","type":"tag","name":"form.resource"},{"version":"1.0.0","type":"object","name":"parametertype"},{"name":"form.tagtype","type":"tag","version":"1.1.0"}],"extends_resource":null},"rc.view.resource.with.parameters":{"id":218,"parameters":[],"implementation":{"html":"<div>\n    \n    {this.resourcetype} ({this.commaSeparated(this.attributes)})\n    <!--include tag=\"{this.resource}\" attributes=\"{this.attributes}\"><\/include-->\n<\/div>","javascript":"class ViewResWithParams extends Tag {\n    setup() {\n        this._value = ''\n    }\n\n    set value(v) {\n        if (v && (typeof v == 'string')) {\n            v = JSON.parse(v)\n        }\n        this.resourcetype = v.resourcetype\n        this.attributes = v.options\n        this.update('this.resourcetype')\n        this.update('this.attributes')\n    }\n\n    get value() {\n        return this._value\n    }\n\n    commaSeparated(obj) {\n         return Object.entries(obj)\n            .filter(([key, value]) => Boolean(value)) \/\/ Falsy Werte ausschlie\u00dfen, aber 0 beibehalten\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(', ');\n    }\n}"},"name":"rc.view.resource.with.parameters","title":"Ver recurso con par\u00e1metros","type":"tag","extends_resource":null},"admin-menus":{"id":1089,"parameters":[],"implementation":{"html":"<h1>Men\u00fas de administraci\u00f3n de WordPress<\/h1>\n<p>Aqu\u00ed puede seleccionar qu\u00e9 etiquetas autoprogramadas o descargadas deben aparecer en el \u00e1rea de administraci\u00f3n de WordPress. Tambi\u00e9n puede introducir par\u00e1metros.<\/p>\n<database.table.editor table=\"admin_menu\" resourcetype=\"admin_menu\"><\/database.table.editor>"},"name":"admin-menus","title":"Men\u00fas de administraci\u00f3n","type":"tag","dependencies":[{"name":"database.table.editor","type":"tag","version":"1.1.0"}],"extends_resource":null},"admin_menu":{"id":1090,"parameters":[{"name":"title","title":"T\u00edtulo","type":"translated_string","documentation":"","readonly":false,"required":false,"title_translated":"Titel","documentation_translated":"","options":{"unique":true,"name":"","value":"","translation_category":""}},{"name":"resource_with_parameter","title":"D\u00eda (incl. par\u00e1metros)","type":"resource_params","documentation":"","options":{"display_resource_type":true,"resourcetype":null,"label":"","typefilter":"tag"},"readonly":false,"required":false,"title_translated":"Tag (inkl. Parameter)","documentation_translated":""}],"implementation":[],"name":"admin_menu","title":"Men\u00fas de administraci\u00f3n","allowed_subelements":[],"type":"dbtable","extends_resource":null}}